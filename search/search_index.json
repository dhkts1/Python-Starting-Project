{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#quick-start","title":"Quick Start","text":"<p>To get started with this project, see the Getting Started guide.</p>"},{"location":"#why-i-created-this-project","title":"Why I Created This Project","text":"<p>See Why I Created This Project for a detailed explanation of the motivation, philosophy, and approach behind this project.</p>"},{"location":"#python-starting-project","title":"Python Starting Project","text":"<p>A comprehensive learning template for Python applications with modern tools and best practices.</p>"},{"location":"#quick-setup","title":"Quick Setup","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+ installed on your system</li> <li>Git installed on your system</li> <li>Basic command-line knowledge</li> </ul>"},{"location":"#step-1-install-uv-package-manager","title":"Step 1: Install UV Package Manager","text":"<p>UV is a blazing-fast Python package manager written in Rust.</p>"},{"location":"#for-macoslinux","title":"For MacOS/Linux:","text":"<ol> <li>Install Cursor - AI-powered code editor</li> <li>Install UV - Modern Python package manager</li> </ol> <p>Verify installation with:</p> <pre><code>uv --version\n</code></pre>"},{"location":"#step-2-ide-setup-optional","title":"Step 2: IDE Setup (Optional)","text":"<p>For the best development experience, we recommend:</p> <ul> <li>Cursor - AI-powered code editor (recommended)</li> <li>Visual Studio Code - Popular code editor</li> </ul>"},{"location":"#step-3-set-up-your-project","title":"Step 3: Set Up Your Project","text":"<p>You can either start from our template or clone the repository directly:</p>"},{"location":"#option-a-use-github-template","title":"Option A: Use GitHub Template","text":"<ol> <li>Go to the Python Starting Project</li> <li>Click the green \"Use this template\" button</li> <li>Choose \"Create a new repository\"</li> <li>Fill in your repository details</li> <li>Clone your new repository:    <pre><code>git clone https://github.com/your-username/your-repo-name.git\ncd your-repo-name\n</code></pre></li> </ol>"},{"location":"#option-b-direct-clone","title":"Option B: Direct Clone","text":"<pre><code>git clone https://github.com/yourusername/python-starting-project.git\ncd python-starting-project\n</code></pre>"},{"location":"#step-5-install-dependencies-and-create-virtual-environment","title":"Step 5: Install Dependencies and Create Virtual Environment","text":"<pre><code>uv sync\n</code></pre>"},{"location":"#step-6-set-up-pre-commit-hooks-all-the-format-linting-testing-etc-tools-that-will-run-automatically-when-you-commit","title":"Step 6: Set Up Pre-commit Hooks (all the format, linting, testing, etc tools that will run automatically when you commit)","text":"<pre><code># Install pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"#step-7-verify-your-setup","title":"Step 7: Verify Your Setup","text":"<pre><code># Run all pre-commit checks\npoe pre\n</code></pre>"},{"location":"#step-8-run-the-sample-application","title":"Step 8: Run the Sample Application","text":"<pre><code># Run the main script\npython -m src.main\n</code></pre> <p>You're all set! Start developing with confidence.</p> <p>\u26a0\ufe0f WARNING: This template configures most tools at their maximum strictness level. It is designed for new projects where you want to follow strict standards from the beginning.</p>"},{"location":"#purpose","title":"Purpose","text":"<p>This project serves as both a starting template and a learning tool for Python development best practices:</p> <ul> <li>Modern Python Tools: Learn to use cutting-edge tools like Ruff, Pyright, and UV</li> <li>Code Quality: Experience best practices for linting, testing, and documentation</li> <li>Project Structure: Learn how to organize a Python project properly</li> <li>CI/CD Integration: See how automated workflows improve code quality</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>For detailed information and guides, check out the project documentation:</p> <ul> <li>Getting Started: Detailed setup and usage instructions</li> <li>Tutorial: Setup Your First Project: Step-by-step tutorial</li> <li>Why: The story behind this project</li> <li>Architecture: Configuration, logging, and project structure</li> <li>Development: Workflow, pre-commit hooks, and best practices</li> <li>API Reference: Detailed code documentation</li> </ul>"},{"location":"#project-status","title":"Project Status","text":"<p>This project is actively maintained and monitored for code quality through various metrics:</p>"},{"location":"#code-quality","title":"Code Quality","text":""},{"location":"#testing-documentation","title":"Testing &amp; Documentation","text":""},{"location":"#code-maintainability","title":"Code Maintainability","text":""},{"location":"#tools","title":"Tools","text":"<p>These badges are updated automatically by our CI/CD pipeline and reflect the current status of the project.</p>"},{"location":"#documentation_1","title":"Documentation","text":"<ul> <li>Getting Started</li> <li>Why This Project</li> <li>Architecture</li> <li>Development</li> <li>API Reference</li> <li>Technologies</li> <li>Learning Path</li> <li>Tutorials</li> <li>Tools Guide</li> </ul>"},{"location":"getting-started/","title":"Python Starting Project","text":"<p>New Documentation Structure</p> <p>This content is being migrated to a more learning-focused structure. See:</p> <ul> <li>Beginner's Guide</li> <li>Setup Tutorial</li> </ul> <p>The original content will remain available until the migration is complete.</p> <p>A comprehensive Python project template with built-in logging, configuration management, and development tools. This template provides a solid foundation for building Python applications with best practices for configuration, logging, code quality, and project structure.</p> <p> </p>"},{"location":"getting-started/#features","title":"Features","text":"<ul> <li>Structured project layout with src-based architecture</li> <li>Logging configuration with console and file output</li> <li>Settings management using pydantic-settings</li> <li>Environment variable support with .env file override capability</li> <li>Lazy loading for improved import performance</li> <li>Comprehensive testing with pytest</li> <li>Code quality tools:<ul> <li>Ruff for linting and formatting</li> <li>Pyright for static type checking</li> <li>Bandit for security checks</li> <li>Vulture for dead code detection</li> <li>Interrogate for docstring coverage</li> <li>Darglint for docstring validation</li> </ul> </li> <li>GitHub Actions for CI/CD with pre-commit checks</li> <li>Comprehensive badge system with dynamic quality indicators</li> <li>Documentation with MkDocs for beautiful, searchable documentation</li> </ul>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>uv for dependency management (recommended)</li> <li>An IDE: either Visual Studio Code or Cursor (recommended for AI-assisted development)</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#important-do-not-skip-these-steps","title":"Important: Do not skip these steps!","text":"<pre><code># Clone the repository\ngit clone https://github.com/yourusername/python-starting-project.git\ncd python-starting-project\n\n# Install dependencies\nuv sync\n\n# Install pre-commit hooks:\nuv venv\npre-commit install\n\n# Run pre-commit hooks to verify everything works:\npoe pre\n</code></pre>"},{"location":"getting-started/#project-structure","title":"Project Structure","text":"<p>The project follows a modular architecture with clear separation of concerns:</p> <pre><code>python-starting-project/\n\u251c\u2500\u2500 src/                  # Main source code\n\u2502   \u251c\u2500\u2500 utils/            # Utility modules\n\u2502   \u2502   \u251c\u2500\u2500 settings.py   # Application settings\n\u2502   \u2502   \u2514\u2500\u2500 logging.py    # Logging configuration\n\u2502   \u251c\u2500\u2500 __init__.py       # Package initialization with lazy loading\n\u2502   \u2514\u2500\u2500 main.py           # Application entry point\n\u251c\u2500\u2500 tests/                # Test directory\n\u2502   \u251c\u2500\u2500 unit/             # Unit tests\n\u2502   \u2514\u2500\u2500 conftest.py       # Pytest configuration\n\u251c\u2500\u2500 docs/                 # Documentation files\n\u2502   \u251c\u2500\u2500 api/              # API reference documentation\n\u2502   \u251c\u2500\u2500 architecture/     # Architecture documentation\n\u2502   \u2514\u2500\u2500 development/      # Development guides\n\u251c\u2500\u2500 .github/              # GitHub configuration\n\u2502   \u2514\u2500\u2500 workflows/        # GitHub Actions workflows\n\u2502       \u2514\u2500\u2500 ci.yml        # CI workflow with dynamic badges\n\u251c\u2500\u2500 .vscode/              # Editor configuration\n\u251c\u2500\u2500 mkdocs.yml            # MkDocs configuration\n\u251c\u2500\u2500 pyproject.toml        # Project configuration\n\u251c\u2500\u2500 .pre-commit-config.yaml # Pre-commit hooks configuration\n\u2514\u2500\u2500 .env.example          # Example environment configuration\n</code></pre>"},{"location":"getting-started/#simplified-workflow","title":"Simplified Workflow","text":"<p>This project is designed to have a minimal learning curve. You only need to know 4 commands for the entire development cycle:</p>"},{"location":"getting-started/#1-uv-sync","title":"1. <code>uv sync</code>","text":"<p>This command installs or updates all project dependencies:</p> <pre><code>uv sync\n</code></pre> <p>When to use it:</p> <ul> <li>When you first clone the repository</li> <li>When dependencies are updated in <code>pyproject.toml</code></li> <li>When switching to a branch with different dependencies</li> </ul>"},{"location":"getting-started/#2-uv-venv","title":"2. <code>uv venv</code>","text":"<p>Same as <code>source .venv/bin/activate</code>, it enters to the context of the virtual environment. and allows you to use the tools installed in the virtual environment.</p> <pre><code>uv venv\n</code></pre>"},{"location":"getting-started/#3-pre-commit-install","title":"3. <code>pre-commit install</code>","text":"<p>This command sets up the pre-commit hooks that automatically check your code quality before each commit:</p> <pre><code>pre-commit install\n</code></pre> <p>When to use it:</p> <ul> <li>Only once after cloning the repository</li> <li>If you need to reinstall the pre-commit hooks</li> </ul>"},{"location":"getting-started/#3-git-add","title":"3. <code>git add</code>","text":"<p>This command stages your changes for commit:</p> <pre><code># Add specific files\ngit add filename.py\n\n# Add all changes\ngit add .\n</code></pre> <p>When to use it:</p> <ul> <li>After making changes you want to commit</li> </ul>"},{"location":"getting-started/#4-git-commit","title":"4. <code>git commit</code>","text":"<p>This command commits your staged changes:</p> <pre><code>git commit -m \"Add new feature\"\n</code></pre> <p>When to use it:</p> <ul> <li>After staging your changes with <code>git add</code></li> <li>The pre-commit hooks will automatically run before the commit is created</li> <li>If any hooks fail, the commit will be aborted until you fix the issues</li> </ul>"},{"location":"getting-started/#complete-workflow-example","title":"Complete Workflow Example","text":"<pre><code># Initial setup (only once)\nuv sync\nuv venv\npre-commit install\n\n# Development cycle (repeat as needed)\n# 1. Make changes to your code\n# 2. Stage changes\ngit add .\n# 3. Commit changes (pre-commit hooks run automatically)\ngit commit -m \"Add new feature\"\n# 4. to run all github hooks without committing use\npoe pre\n</code></pre> <p>That's it! With just these 4 commands, you can handle the entire development workflow while maintaining high code quality standards.</p> <p>For pip Users</p> <p>If you're coming from a traditional pip workflow, here's how commands compare:</p> pip Command UV Equivalent Description <code>pip install -r requirements.txt</code> <code>uv sync</code> Install dependencies <code>pip install package</code> <code>uv add package</code> Install a package <p>Important: This project uses <code>pyproject.toml</code> instead of <code>requirements.txt</code>. Think of it as requirements.txt on steroids:</p> <ul> <li>It defines project metadata, dependencies, dev dependencies, and build configuration in one file</li> <li>It's standardized (PEP 621) and works with any modern Python tooling</li> <li>It supports precise version specifications and dependency groups</li> <li>It's used by the build system, linters, formatters, and other tools</li> </ul> <p>While you could still use pip with this project, you'd miss out on the benefits of modern Python tooling like faster installations, better dependency resolution, and integrated development workflows.</p>"},{"location":"getting-started/#ide-integration","title":"IDE Integration","text":"<p>The project is configured to work with both VSCode and Cursor:</p>"},{"location":"getting-started/#vscode-integration","title":"VSCode Integration","text":"<p>For the best development experience with VSCode:</p> <ol> <li>Open the project in VSCode</li> <li>Install recommended extensions when prompted</li> <li>Use the integrated terminal for running commands</li> <li>Use the built-in debugger for debugging</li> </ol>"},{"location":"getting-started/#cursor-integration","title":"Cursor Integration","text":"<p>Cursor provides all VSCode features plus AI-assisted development:</p> <ol> <li>Open the project in Cursor</li> <li>Cursor will automatically use the project's settings and extensions</li> <li>Enable AI features in Cursor settings, MCP, YOLO MODE, etc.</li> <li>Install ALL the extensions of the project</li> <li>Use AI features to help with code completion, refactoring, and documentation. especially the agent. mnj</li> <li>Use AI features to help with code completion, refactoring, and documentation</li> </ol>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the Architecture documentation</li> <li>Learn about Pre-commit Hooks</li> <li>Check out the API Reference</li> </ul>"},{"location":"why/","title":"Why This Project Exists","text":""},{"location":"why/#tldr","title":"TL;DR","text":"<p>I got tired of setting up new Python projects from scratch every time. It's inefficient. So I created this template with all the best tools already configured. It evolved into a showcase of modern Python development and some lessons I've learned along the way. oh and tools, libraries, and frameworks. and lots of generated ideas written by AI.</p> <p>It has all the cutting-edge tools - Ruff, Pyright, UV, running tests, generating documentation, and CI/CD, and more - working together without conflicts. It includes deep Cursor integration for AI coding, solid I/O practices, automated documentation, and CI/CD.</p> <p>What started as solving a personal frustration became an exploration of how AI and good tooling can make coding more efficient and enjoyable.</p>"},{"location":"why/#the-problem-configuration-overhead","title":"The Problem: Configuration Overhead","text":"<p>Setting up a new project environment is time-consuming. Each time I start something new, I spend hours configuring linters, formatters, test frameworks, documentation, CI/CD pipelines. This repetitive work takes away from actual development.</p> <p>With AI helping me manage multiple projects, this setup overhead became an even bigger bottleneck. I needed to reduce this friction to focus on building meaningful features.</p> <p>I wanted everything preconfigured with best practices ready to go. A template that works immediately. Something that integrates these Python tools - Ruff, Pyright, UV, pytest - without configuration conflicts. Something to handle the boilerplate so I can focus on development.</p> <p>That's exactly what this project is - a starting point that eliminates setup overhead so you can focus on coding.</p>"},{"location":"why/#the-way-forward-my-ai-journey","title":"The way forward: My AI Journey","text":"<p>I haven't been coding for very long. Before AI tools, I struggled with the boilerplate required for complex applications like web apps. When ChatGPT 3.5 was released, it significantly improved my workflow. I could build a simple web app much faster.</p> <p>Since then, the development landscape has expanded rapidly. Not just AI tools but libraries for almost every use case. Each new project presented a learning curve - too many tools, frameworks, and best practices to keep up with. I spent more time on configuration than coding, and when I found working solutions, I reused them across projects.</p> <p>Cursor transformed my development process. The AI-assisted coding increased my productivity substantially. I initiated many projects and developed at a much faster pace, though I still encountered errors requiring manual fixes.</p> <p>My experience with AI coding has evolved - from early ChatGPT to GitHub Copilot, and now to Cursor with Claude. With the newest agents, we're entering a new phase where human-AI collaboration is more integrated.</p> <p>What's notable is that AI generated all this project code - including this documentation. It demonstrates how far these assistants have progressed, enabling the creation of production-ready projects with reduced human input.</p>"},{"location":"why/#the-documentation-ai-connection","title":"The Documentation-AI Connection","text":"<p>An important insight I've gained: familiarizing yourself with documentation for tools you use with AI significantly improves results. While AI models understand code generally, they benefit from specific tool knowledge.</p> <p>When I review documentation and incorporate those specific terms in my prompts, the code quality improves noticeably. For example, after examining Ruff documentation and learning rule codes like <code>E501</code> or <code>F401</code>, I could direct the AI to address specific linting issues more effectively.</p> <p>This creates an effective cycle:</p> <ol> <li>Review documentation for key concepts and terminology</li> <li>Use those terms when prompting the AI</li> <li>Get better results that follow tool-specific best practices</li> <li>Learn from the AI's improved responses</li> <li>Continue with enhanced understanding</li> </ol> <p>You don't need comprehensive knowledge - just enough familiarity to guide the AI properly. It's similar to learning key phrases for travel - basic knowledge improves the experience considerably.</p>"},{"location":"why/#the-workflow-revolution","title":"The Workflow Revolution","text":"<p>As AI tools evolved into agents, my development approach changed significantly. Documentation and code readability became priorities. It makes more sense to have an agent handle repetitive tasks like linting and CI problems rather than doing them manually. I can instruct the agent to document, format, and handle routine tasks.</p> <p>My workflow has shifted considerably. Previously I spent most of my time writing code with less time reviewing. Now this ratio has reversed - I primarily review AI-generated code, provide feedback, and refine prompts. (The exact numbers aren't measured, but the change has been substantial.)</p> <p>Coding has become a collaborative process with AI. I focus on architecture and quality control while AI handles implementation details. This has increased productivity and improved project quality as I can devote more attention to design patterns, edge cases, and user experience.</p> <p>This shift is meaningful - AI can manage code readability and documentation. With proper configuration, AI handles details while I focus on higher-level problems. This represents a new development paradigm: humans handling strategic aspects while AI manages technical implementation.</p>"},{"location":"why/#the-sequential-thinking-breakthrough","title":"The Sequential Thinking Breakthrough","text":"<p>One tool that has been particularly valuable is Sequential Thinking MCP. For serious AI development, it's essential. It enables AI to break down complex problems into manageable steps, consider each carefully, and revise thinking when necessary.</p> <p>The results are significantly better than standard prompting - more thorough, accurate, and reliable. For anyone working with AI agents, Sequential Thinking provides a notable improvement in solution quality.</p>"},{"location":"why/#the-memory-bank-experiment","title":"The Memory Bank Experiment","text":"<p>I've explored other approaches, such as the Cline Memory Bank system. It uses structured documentation as AI \"memory\" - files like <code>projectbrief.md</code>, <code>productContext.md</code>, and <code>activeContext.md</code>.</p> <p>Initially, it showed promise - sometimes performing better than Cursor. The structured context approach worked well for smaller projects. However, as project complexity increased, limitations became apparent. The system became less reliable - the AI would miss important details despite carefully maintained documentation.</p> <p>The core issue is that context quality matters more than size. On complex projects, I even tried switching from Claude to Gemini for its larger context window, but this didn't resolve the problems.</p> <p>In practical development, you don't need to track everything - just the general structure. When specific questions arise, developers typically check the code rather than documentation (which is often outdated).</p>"},{"location":"why/#why-this-approach-works-better","title":"Why This Approach Works Better","text":"<p>Having AI reference documentation during coding isn't the optimal solution. Documentation is important, but there are more efficient ways to maintain it, as demonstrated in this repository.</p> <p>The pyproject.toml configuration and CI workflow automate documentation checks, coverage reporting, and quality metrics. This ensures documentation remains accurate without manual effort. It works particularly well when AI generates the documentation.</p> <p>Code is primary - and this project template addresses the problem effectively:</p> <ul> <li>AI-generated documentation alongside code</li> <li>Clean code through automated tooling</li> <li>Comprehensive quality checks</li> </ul> <p>The process may be somewhat slower at times, and AI occasionally produces errors, but the configured tools provide a safety net. The components work together coherently - something the Memory Bank approach couldn't achieve.</p>"},{"location":"why/#finding-the-right-balance","title":"Finding the Right Balance","text":"<p>This approach has certain trade-offs. It can be slower, and I've disabled some features in my projects to optimize performance. The key insight is that if something impedes progress, you can simply disable it.</p> <p>I've wanted a versatile project template that handles boilerplate while incorporating modern tools. The challenge is that tools like Pyright, Ruff, UV, and pyproject.toml configurations can be difficult to integrate correctly. Without proper configuration, IDE performance suffers.</p> <p>This is the result: a template designed for efficiency and reliability while maintaining functionality. The Python Starting Project combines best practices for configuration, logging, code quality, and project structure.</p>"},{"location":"why/#future-plans-and-contributions","title":"Future Plans and Contributions","text":"<p>I plan to create branches with customized configurations - enabling or disabling specific features for different requirements. For now, this release includes everything I've found valuable in my development work.</p> <p>Contributions, suggestions, and improvements are welcome. If you want to enhance it or adapt it for other languages, please contribute. Collaborative efforts will make this more useful for developers.</p> <p>By the way, I've noticed the AI tends to make my writing more formal than it naturally is. I'm relatively young and typically write more casually, but I've allowed the AI to maintain a somewhat professional tone as it suits this project. There's a real person behind this documentation.</p>"},{"location":"api/","title":"API Reference","text":"<p>This section contains the API reference for the Python Starting Project.</p>"},{"location":"api/#modules","title":"Modules","text":""},{"location":"api/#main","title":"Main","text":"<p>Main module for the application.</p> <p>options: show_root_heading: true show_source: true</p>"},{"location":"api/#src.main.main","title":"<code>main()</code>","text":"<p>Entry point for the application.</p> Source code in <code>src/main.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"Entry point for the application.\"\"\"\n    logger.info(\"Starting %s v%s\", settings.APP_NAME, settings.APP_VERSION)\n\n    # Application logic goes here\n    logger.info(\"Application finished\")\n</code></pre>"},{"location":"api/#utils","title":"Utils","text":"<p>Settings module for the application.</p> <p>This module provides a flexible and type-safe way to manage application settings.</p> <p>options: show_root_heading: true show_source: true</p> <p>Logging module for the application.</p> <p>This module provides a flexible and configurable logging setup.</p> <p>options: show_root_heading: true show_source: true</p>"},{"location":"api/#src.utils.settings.Settings","title":"<code>Settings</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Application settings.</p> <p>Provides a centralized configuration for the application with environment variable support.</p> Source code in <code>src/utils/settings.py</code> <pre><code>class Settings(BaseSettings):\n    \"\"\"Application settings.\n\n    Provides a centralized configuration for the application with environment variable support.\n    \"\"\"\n\n    APP_NAME: str = Field(\n        default=\"Python Starting Project\",\n        description=\"The name of the application.\",\n    )\n    APP_VERSION: str = Field(\n        default=\"0.1.0\",\n        description=\"The version of the application.\",\n    )\n    DEBUG: bool = Field(\n        default=False,\n        description=\"Enable or disable debug mode.\",\n    )\n    LOG_LEVEL: str = Field(\n        default=\"INFO\",\n        description=\"The logging level.\",\n    )\n    LOG_FORMAT: str = Field(\n        default=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        description=\"The log message format.\",\n    )\n    LOG_FILE: str = Field(\n        default=\"logs/app.log\",\n        description=\"Path to the log file.\",\n    )\n\n    # Paths\n    BASE_DIR: Path = Field(\n        default_factory=lambda: Path(__file__),\n        description=\"Base directory of the application.\",\n    )\n    LOG_DIR: Path = Field(\n        default_factory=lambda: Path(\"logs\"),\n        description=\"Directory for log files.\",\n    )\n\n    # Configuration source tracking\n    env_file_found: bool = Field(\n        default=False,\n        description=\"Indicates whether a .env file was found during initialization.\",\n    )\n\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"ignore\",\n    )\n\n    def __init__(self, **kwargs: Any) -&gt; None:  # noqa: ANN401\n        \"\"\"Initialize settings and check for .env file.\n\n        Args:\n            **kwargs: Keyword arguments passed to the parent class constructor\n\n        \"\"\"\n        # Check if .env file exists before initialization\n        env_file_path = Path(\".env\")\n        env_file_exists = env_file_path.exists()\n\n        # Pass to parent constructor\n        super().__init__(**kwargs)\n\n        # Store whether .env file was found\n        self.env_file_found = env_file_exists\n</code></pre>"},{"location":"api/#src.utils.settings.Settings.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Initialize settings and check for .env file.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Keyword arguments passed to the parent class constructor</p> <code>{}</code> Source code in <code>src/utils/settings.py</code> <pre><code>def __init__(self, **kwargs: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Initialize settings and check for .env file.\n\n    Args:\n        **kwargs: Keyword arguments passed to the parent class constructor\n\n    \"\"\"\n    # Check if .env file exists before initialization\n    env_file_path = Path(\".env\")\n    env_file_exists = env_file_path.exists()\n\n    # Pass to parent constructor\n    super().__init__(**kwargs)\n\n    # Store whether .env file was found\n    self.env_file_found = env_file_exists\n</code></pre>"},{"location":"api/#src.utils.logging.get_logger","title":"<code>get_logger(name)</code>","text":"<p>Get a logger for a specific module.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the module.</p> required <p>Returns:</p> Type Description <code>Logger</code> <p>A logger instance.</p> Source code in <code>src/utils/logging.py</code> <pre><code>def get_logger(name: str) -&gt; logging.Logger:\n    \"\"\"Get a logger for a specific module.\n\n    Args:\n        name: The name of the module.\n\n    Returns:\n        A logger instance.\n\n    \"\"\"\n    return logging.getLogger(name)\n</code></pre>"},{"location":"api/#src.utils.logging.setup_logging","title":"<code>setup_logging()</code>","text":"<p>Set up logging configuration.</p> Source code in <code>src/utils/logging.py</code> <pre><code>def setup_logging() -&gt; None:\n    \"\"\"Set up logging configuration.\"\"\"\n    # Create log directory if it doesn't exist\n    log_file = Path(settings.LOG_FILE)\n    log_file.parent.mkdir(parents=True, exist_ok=True)\n\n    # Configure root logger\n    root_logger = logging.getLogger()\n    root_logger.setLevel(settings.LOG_LEVEL)\n\n    # Clear existing handlers\n    for handler in root_logger.handlers[:]:\n        root_logger.removeHandler(handler)\n\n    # Create formatter\n    formatter = logging.Formatter(settings.LOG_FORMAT)\n\n    # Add console handler\n    console_handler = logging.StreamHandler(sys.stdout)\n    console_handler.setFormatter(formatter)\n    root_logger.addHandler(console_handler)\n\n    # Add file handler\n    file_handler = logging.FileHandler(log_file)\n    file_handler.setFormatter(formatter)\n    root_logger.addHandler(file_handler)\n\n    # Log configuration source\n    logger = get_logger(__name__)\n    logger.info(\"Logging initialized at level: %s\", settings.LOG_LEVEL)\n</code></pre>"},{"location":"architecture/","title":"Architecture","text":"<p>This section describes the architectural components of the Python Starting Project template.</p>"},{"location":"architecture/#available-architecture-documentation","title":"Available Architecture Documentation","text":"<ul> <li>Configuration: Learn about the configuration system using pydantic-settings.</li> <li>Logging: Understand how logging is set up for both console and file output.</li> <li>IDE Setup: Learn how to configure your IDE for optimal development experience.</li> <li>Lazy Loading: Understand how lazy loading improves import performance.</li> </ul> <p>These architecture documents provide a deeper understanding of how the project is structured and why certain design decisions were made.</p>"},{"location":"architecture/configuration/","title":"Configuration System","text":"<p>The configuration system is built around the <code>src/utils/settings.py</code> module, which provides a flexible and type-safe way to manage application settings.</p>"},{"location":"architecture/configuration/#features","title":"Features","text":"<ul> <li>Environment Variable Support: Load configuration from environment variables</li> <li>Dotenv Support: Load configuration from <code>.env</code> file (environment variables take precedence if present)</li> <li>Type Validation: Ensure settings have the correct types</li> <li>Default Values: Provide sensible defaults for all settings</li> <li>Directory Creation: Automatically create required directories</li> <li>Pydantic Integration: Uses pydantic-settings for robust configuration management</li> </ul>"},{"location":"architecture/configuration/#project-configuration","title":"Project Configuration","text":"<p>The project uses <code>pyproject.toml</code> for configuration, which includes:</p> <ul> <li>Project Metadata: Name, version, description, and Python version requirements</li> <li>Dependencies: Core dependencies required for the application</li> <li>Development Dependencies: Tools for development, testing, and documentation</li> <li>Tool Configuration: Settings for various development tools</li> </ul>"},{"location":"architecture/configuration/#core-dependencies","title":"Core Dependencies","text":"<p>The project depends on the following core packages:</p> <pre><code>[project]\ndependencies = [\n  \"logging&gt;=0.4.9.6\",\n  \"pydantic-settings&gt;=2.8.1\",\n  \"lazy-loader&gt;=0.4\",\n]\n\n[dependency-groups]\ndev = [\n  \"mdformat&gt;=0.7.22\",\n  \"codespell&gt;=2.4.1\",\n  \"flynt&gt;=1.0.2\",\n  \"mkdocs&gt;=1.6.1\",\n  # ... and many more development dependencies\n]\n</code></pre> <ul> <li>logging: Provides logging functionality</li> <li>pydantic-settings: Used for configuration management with environment variables</li> <li>lazy-loader: Enables lazy loading of modules</li> </ul>"},{"location":"architecture/configuration/#development-tools","title":"Development Tools","text":"<p>The project uses several development tools configured in <code>pyproject.toml</code>:</p> <ul> <li>UV: Fast Python package installer and resolver</li> <li>Ruff: Fast Python linter and formatter</li> <li>Pyright: Static type checker</li> <li>Pre-commit: Git hook scripts</li> <li>Pytest: Testing framework</li> <li>MkDocs: Documentation generator</li> </ul>"},{"location":"architecture/configuration/#tool-configuration","title":"Tool Configuration","text":"<p>The <code>pyproject.toml</code> file includes configuration for:</p> <ul> <li>Ruff: Comprehensive linting and formatting rules</li> <li>Pyright: Static type checking in strict mode</li> <li>UV: Fast Python package installer and dependency management</li> <li>Bandit: Security linting configuration</li> <li>Darglint: Docstring style checking</li> <li>Commitizen: Conventional commit enforcement</li> <li>Interrogate: Docstring coverage checking</li> <li>Vulture: Dead code detection</li> </ul>"},{"location":"architecture/configuration/#usage","title":"Usage","text":"<p>Settings can be accessed throughout the application by importing the <code>settings</code> instance:</p> <pre><code>from utils.settings import settings\n\nprint(f\"Application name: {settings.APP_NAME}\")\nprint(f\"Debug mode: {settings.DEBUG}\")\n</code></pre>"},{"location":"architecture/configuration/#available-settings","title":"Available Settings","text":"Setting Type Default Description <code>APP_NAME</code> <code>str</code> \"Python Starting Project\" The name of the application <code>APP_VERSION</code> <code>str</code> \"0.1.0\" The version of the application <code>DEBUG</code> <code>bool</code> <code>False</code> Enable or disable debug mode <code>LOG_LEVEL</code> <code>str</code> \"INFO\" The logging level <code>LOG_FORMAT</code> <code>str</code> \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" The log message format <code>LOG_FILE</code> <code>str</code> \"logs/app.log\" Path to the log file <code>BASE_DIR</code> <code>Path</code> <code>Path(__file__)</code> Base directory of the application <code>LOG_DIR</code> <code>Path</code> <code>Path(\"logs\")</code> Directory for log files <code>env_file_found</code> <code>bool</code> <code>False</code> Indicates whether a .env file was found during initialization"},{"location":"architecture/configuration/#adding-new-settings","title":"Adding New Settings","text":"<p>To add new settings to your application:</p> <pre><code># Add the setting with its type annotation and default value to the `Settings` class in `src/utils/settings.py`:\nclass Settings(BaseSettings):\n    # Existing settings...\n\n    # New setting\n    NEW_SETTING: str = Field(\n        default=\"default value\",\n        description=\"Description of the new setting\",\n    )\n</code></pre> <pre><code># Add the setting to `.env.example` with a comment explaining its purpose:\n# New setting description\nNEW_SETTING=default value\n</code></pre> <pre><code># Use the setting in your code:\nfrom utils.settings import settings\n\nprint(f\"New setting: {settings.NEW_SETTING}\")\n</code></pre>"},{"location":"architecture/configuration/#development-commands","title":"Development Commands","text":"<p>The project includes several predefined commands that can be run using UV:</p> <pre><code># Install dependencies\nuv sync\n\n# Run linting tools\nuv run ruff check\nuv run ruff format\nuv run pyright\nuv run pre-commit run --all-files\n\n# Run tests with coverage\nuv run pytest -x -n 4 --cov=src --cov-report=xml --fail-under=80 src\n\n# Build documentation\nuv run mkdocs build\nuv run mkdocs serve\n\n# Security checks\nuv run bandit -c pyproject.toml -r src\nuv run safety check\nuv run vulture src --min-confidence 80\n</code></pre>"},{"location":"architecture/ide-setup/","title":"IDE Setup","text":"<p>This project is optimized for development with Visual Studio Code, providing a powerful and flexible environment for Python development. Cursor is built on VSCode but adds AI-powered features that can enhance productivity.</p>"},{"location":"architecture/ide-setup/#editor-configuration","title":"Editor Configuration","text":"<p>The project includes pre-configured settings that work with both VSCode and Cursor:</p>"},{"location":"architecture/ide-setup/#1-code-quality-tools-integration","title":"1. Code Quality Tools Integration","text":"<p>The <code>.vscode/settings.json</code> file configures the editor to work seamlessly with the project's code quality tools:</p> <pre><code>{\n  \"editor.formatOnSave\": true,\n  \"python.analysis.typeCheckingMode\": \"strict\",\n  \"files.exclude\": {\n    \"**/.git\": true,\n    \"**/node_modules\": true,\n    \"**/.ruff_cache\": true,\n    \"**/__pycache__\": true,\n    \"**/.pytest_cache\": true,\n    \"**/.venv\": true,\n    \"**/dist\": true,\n    \"**/.history\": true,\n    \"**/*.pyi\": true,\n    \"**/coverage.xml\": true,\n    \"**/.coverage\": true\n  },\n  \"ruff.enable\": true,\n  \"ruff.organizeImports\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.ruff\": \"explicit\",\n    \"source.organizeImports.ruff\": \"explicit\"\n  },\n  \"python.testing.pytestEnabled\": true,\n  \"python.analysis.diagnosticMode\": \"workspace\",\n  \"python.analysis.autoImportCompletions\": true\n}\n</code></pre> <p>These settings provide:</p> <ul> <li>Automatic formatting on save</li> <li>Strict type checking</li> <li>File exclusion patterns for cleaner workspace</li> <li>Ruff linting and formatting configuration</li> <li>Pytest integration</li> <li>Visual guide for line length</li> </ul>"},{"location":"architecture/ide-setup/#2-recommended-extensions","title":"2. Recommended Extensions","text":"<p>The <code>.vscode/extensions.json</code> file recommends several extensions that enhance the development experience:</p> <pre><code>{\n  \"recommendations\": [\n    \"njpwerner.autodocstring\",\n    \"usernamehw.errorlens\",\n    \"tamasfe.even-better-toml\",\n    \"visualstudioexptteam.vscodeintellicode\",\n    \"visualstudioexptteam.intellicode-api-usage-examples\",\n    \"yzhang.markdown-all-in-one\",\n    \"bierner.markdown-mermaid\",\n    \"ms-python.vscode-pylance\",\n    \"ninoseki.vscode-pylens\",\n    \"ms-python.python\",\n    \"ms-python.debugpy\",\n    \"kevinrose.vsc-python-indent\",\n    \"mgesbert.python-path\",\n    \"charliermarsh.ruff\",\n    \"redhat.vscode-yaml\",\n    \"eamodio.gitlens\",\n    \"anysphere.pyright\"\n  ]\n}\n</code></pre>"},{"location":"architecture/ide-setup/#3-debugging-configuration","title":"3. Debugging Configuration","text":"<p>The <code>.vscode/launch.json</code> file provides a pre-configured debugging setup for the application:</p> <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Main\",\n      \"type\": \"debugpy\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/src/main.py\",\n      \"envFile\": \"${workspaceFolder}/.env\",\n      \"console\": \"integratedTerminal\",\n      \"cwd\": \"${workspaceFolder}\",\n      \"env\": {\n        \"PYTHONPATH\": \"${workspaceFolder}\"\n      }\n    }\n  ]\n}\n</code></pre> <p>This configuration allows you to:</p> <ul> <li>Debug the main application with F5</li> <li>Load environment variables from .env file</li> <li>Use the integrated terminal for input/output</li> <li>Set the Python path to include the project root</li> </ul>"},{"location":"architecture/ide-setup/#vscode-setup","title":"VSCode Setup","text":""},{"location":"architecture/ide-setup/#getting-started-with-vscode","title":"Getting Started with VSCode","text":"<ol> <li>Install Visual Studio Code</li> <li>Open the project folder in VSCode</li> <li>When prompted, install the recommended extensions</li> <li>VSCode will automatically use the project's settings</li> </ol>"},{"location":"architecture/ide-setup/#key-vscode-features","title":"Key VSCode Features","text":"<ul> <li>Integrated Terminal: Run commands directly from the editor</li> <li>Debugging: Set breakpoints and step through code</li> <li>Extensions: Customize your environment with extensions</li> </ul>"},{"location":"architecture/ide-setup/#source-control-with-vscode","title":"Source Control with VSCode","text":"<p>VSCode's built-in source control features make it easy to track changes, review code, and manage your Git repository. This is especially valuable when working with AI-generated code changes, as it provides a clear view of what has been modified.</p>"},{"location":"architecture/ide-setup/#accessing-source-control","title":"Accessing Source Control","text":"<p>The Source Control view can be accessed by:</p> <ul> <li>Clicking the Source Control icon in the Activity Bar (looks like a branch)</li> <li>Using the keyboard shortcut <code>Ctrl+Shift+G</code> (Windows/Linux) or <code>Cmd+Shift+G</code> (Mac)</li> </ul>"},{"location":"architecture/ide-setup/#key-source-control-features","title":"Key Source Control Features","text":"<ol> <li> <p>Changes View:</p> <ul> <li>Shows all modified, added, and deleted files</li> <li>Provides a clear overview of what has changed in your project</li> <li>Allows you to stage individual files or all changes at once</li> </ul> </li> <li> <p>Diff Viewer:</p> <ul> <li>Click on any modified file to see a side-by-side comparison</li> <li>Clearly highlights what has been added, changed, or removed</li> <li>Makes reviewing AI-generated code changes much easier</li> <li>Allows you to accept or reject changes at a granular level</li> </ul> </li> <li> <p>Commit Management:</p> <ul> <li>Write commit messages and commit changes directly from the editor</li> <li>View commit history and browse previous versions</li> <li>Create and switch between branches</li> </ul> </li> <li> <p>Integration with GitHub:</p> <ul> <li>Push and pull changes to/from remote repositories</li> <li>Create and review pull requests</li> <li>Manage issues</li> </ul> </li> </ol>"},{"location":"architecture/ide-setup/#best-practices-for-source-control","title":"Best Practices for Source Control","text":"<ul> <li>Review Changes Frequently: Get in the habit of checking the Source Control panel after making changes or running AI tools</li> <li>Use Meaningful Commit Messages: Write clear, descriptive commit messages that explain what changed and why</li> <li>Commit Small, Related Changes: Make small, focused commits rather than large, sweeping changes</li> <li>Review Diffs Before Committing: Always review the diff view before committing to ensure you understand all changes</li> </ul>"},{"location":"architecture/ide-setup/#using-source-control-with-ai-generated-code","title":"Using Source Control with AI-Generated Code","text":"<p>When working with AI-generated code:</p> <ol> <li>After the AI makes changes, open the Source Control panel to see all modified files</li> <li>Click on each file to review the changes in the diff viewer</li> <li>Verify that the changes match your expectations and make any necessary adjustments</li> <li>Stage and commit the changes with a descriptive message</li> </ol> <p>This workflow ensures you maintain full control over your codebase while benefiting from AI assistance.</p>"},{"location":"architecture/ide-setup/#common-features","title":"Common Features","text":"<p>The project is configured to provide:</p>"},{"location":"architecture/ide-setup/#automatic-formatting","title":"Automatic Formatting","text":"<p>The project is configured to automatically format code on save using Ruff, ensuring consistent code style throughout the project.</p>"},{"location":"architecture/ide-setup/#type-checking","title":"Type Checking","text":"<p>Pyright is configured for strict type checking, helping to catch type-related errors early in the development process.</p>"},{"location":"architecture/ide-setup/#linting","title":"Linting","text":"<p>Ruff is configured to lint the code, identifying potential issues and enforcing coding standards.</p>"},{"location":"architecture/ide-setup/#debugging","title":"Debugging","text":"<p>The project includes a launch configuration for debugging Python code, making it easy to set breakpoints and step through code.</p>"},{"location":"architecture/ide-setup/#code-aware-documentation","title":"Code-Aware Documentation","text":"<p>This project uses MkDocs with several extensions that make documentation code-aware, providing rich features for displaying and interacting with code:</p>"},{"location":"architecture/ide-setup/#1-syntax-highlighting","title":"1. Syntax Highlighting","text":"<p>Code blocks are automatically syntax-highlighted using Pygments, supporting a wide range of programming languages:</p> <pre><code>def main() -&gt; None:\n    \"\"\"Entry point for the application.\"\"\"\n    # Initialize logging\n    setup_logging()\n\n    logger = logging.getLogger(__name__)\n    logger.info(\"Starting %s v%s\", settings.APP_NAME, settings.APP_VERSION)\n    logger.debug(\"Debug mode is %s\", \"enabled\" if settings.DEBUG else \"disabled\")\n\n    # Application logic goes here\n    logger.info(\"Application finished\")\n    logger.debug(\"Debug mode is %s\", \"enabled\" if settings.DEBUG else \"disabled\")\n</code></pre>"},{"location":"architecture/ide-setup/#2-code-annotations","title":"2. Code Annotations","text":"<p>You can add annotations to your code blocks to explain specific parts:</p> <pre><code>class Settings(BaseSettings):  # (1)!\n    \"\"\"Application settings.\"\"\"\n\n    APP_NAME: str = Field(  # (2)!\n        default=\"Python Starting Project\",\n        description=\"The name of the application.\",\n    )\n    APP_VERSION: str = Field(\n        default=\"0.1.0\",\n        description=\"The version of the application.\",\n    )\n    DEBUG: bool = Field(\n        default=False,\n        description=\"Enable or disable debug mode.\",\n    )\n    LOG_LEVEL: str = Field(  # (3)!\n        default=\"INFO\",\n        description=\"The logging level.\",\n    )\n    LOG_FORMAT: str = Field(\n        default=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        description=\"The log message format.\",\n    )\n    LOG_FILE: str = Field(\n        default=\"logs/app.log\",\n        description=\"Path to the log file.\",\n    )\n\n    # Paths\n    BASE_DIR: Path = Field(\n        default_factory=lambda: Path(__file__),\n        description=\"Base directory of the application.\",\n    )\n    LOG_DIR: Path = Field(  # (4)!\n        default_factory=lambda: Path(\"logs\"),\n        description=\"Directory for log files.\",\n    )\n\n    model_config = SettingsConfigDict(env_file=\".env\", env_file_encoding=\"utf-8\")  # (5)!\n</code></pre> <ol> <li>Uses Pydantic's BaseSettings for environment variable loading and validation</li> <li>Default application name that can be overridden via environment variables</li> <li>Default log level is INFO, can be changed to DEBUG for more verbose logging</li> <li>Uses a factory function to create the logs directory path</li> <li>Configuration for loading settings from .env file with UTF-8 encoding</li> </ol>"},{"location":"architecture/ide-setup/#3-advanced-code-block-features","title":"3. Advanced Code Block Features","text":"<p>The documentation supports several advanced code block features:</p> <ul> <li>Copy Button: Each code block has a copy button for easy copying</li> <li>Line Numbers: Add line numbers to code blocks for reference</li> <li>Line Highlighting: Highlight specific lines to draw attention</li> <li>Code Block Titles: Add titles to code blocks for context</li> <li>External File Embedding: Include code from external files</li> </ul> <p>Example with line numbers and highlighting:</p> <pre><code>def setup_logging() -&gt; None:\n    \"\"\"Set up logging configuration.\"\"\"\n    # Create log directory if it doesn't exist\n    log_file = Path(settings.LOG_FILE)\n    log_file.parent.mkdir(parents=True, exist_ok=True)\n\n    # Configure root logger\n    root_logger = logging.getLogger()\n    root_logger.setLevel(settings.LOG_LEVEL)\n\n    # Clear existing handlers\n    for handler in root_logger.handlers[:]:\n        root_logger.removeHandler(handler)\n\n    # Create formatter\n    formatter = logging.Formatter(settings.LOG_FORMAT)\n</code></pre>"},{"location":"architecture/ide-setup/#4-api-documentation-with-mkdocstrings","title":"4. API Documentation with mkdocstrings","text":"<p>The project uses mkdocstrings to automatically generate API documentation from Python docstrings. Here's how it's used in our API documentation:</p> <pre><code>### Utils\n\n::: src.utils.settings\n    options:\n      show_root_heading: true\n      show_source: true\n\n::: src.utils.logging\n    options:\n      show_root_heading: true\n      show_source: true\n</code></pre> <p>This renders the complete documentation for the settings and logging modules, including all functions, classes, and their docstrings.</p>"},{"location":"architecture/ide-setup/#custom-tasks","title":"Custom Tasks","text":"<p>The project includes several custom tasks that can be run from either editor:</p> <ol> <li>Open the Command Palette (<code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code>)</li> <li>Type \"Tasks: Run Task\"</li> <li>Select one of the available tasks:<ul> <li>Run Tests</li> <li>Build Documentation</li> <li>Lint Code</li> <li>Format Code</li> </ul> </li> </ol>"},{"location":"architecture/ide-setup/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>Here are some useful keyboard shortcuts for working with Python in both editors:</p> <ul> <li><code>F5</code>: Start debugging</li> <li><code>Ctrl+Shift+B</code> or <code>Cmd+Shift+B</code>: Run build task</li> <li><code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code>: Open Command Palette</li> <li><code>Ctrl+Space</code> or <code>Cmd+Space</code>: Trigger suggestions</li> <li><code>F12</code>: Go to definition</li> <li><code>Alt+F12</code> or <code>Option+F12</code>: Peek definition</li> <li><code>Shift+F12</code>: Find all references</li> </ul>"},{"location":"architecture/ide-setup/#best-practices","title":"Best Practices","text":""},{"location":"architecture/ide-setup/#using-ai-features-cursor","title":"Using AI Features (Cursor)","text":"<ol> <li> <p>Use AI Suggestions Wisely</p> <ul> <li>Review AI-generated code for correctness</li> <li>Understand suggested changes before applying</li> <li>Use AI as a tool, not a replacement for understanding</li> </ul> </li> <li> <p>Documentation</p> <ul> <li>Let AI help generate initial documentation</li> <li>Review and enhance AI-generated content</li> <li>Keep documentation up-to-date with code changes</li> </ul> </li> <li> <p>Code Quality</p> <ul> <li>Use AI to maintain consistent code style</li> <li>Leverage AI for complex refactoring</li> <li>Run automated tests after AI-suggested changes</li> </ul> </li> </ol>"},{"location":"architecture/ide-setup/#additional-resources","title":"Additional Resources","text":"<ul> <li>VSCode Python Tutorial</li> <li>Python in VSCode</li> <li>Debugging Python</li> <li>Cursor Documentation</li> </ul>"},{"location":"architecture/ide-setup/#model-context-protocol-mcp-configuration","title":"Model Context Protocol (MCP) Configuration","text":"<p>This project supports the Model Context Protocol (MCP), which enhances AI-assisted development by providing specialized tools for complex tasks. MCPs allow AI models to break down problems into steps, maintain context, and perform specialized operations.</p>"},{"location":"architecture/ide-setup/#what-is-mcp","title":"What is MCP?","text":"<p>Model Context Protocol (MCP) is a framework that enables AI models to:</p> <ul> <li>Process complex tasks through structured thinking</li> <li>Maintain context across multiple steps</li> <li>Access specialized tools and capabilities</li> <li>Provide more accurate and reliable results</li> </ul>"},{"location":"architecture/ide-setup/#mcp-configuration","title":"MCP Configuration","text":"<p>The project includes MCP configuration in the <code>.cursor/mcp.json</code> file:</p> <pre><code>{\n  \"mcpServers\": {\n    \"sequential-thinking\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-sequential-thinking\"\n      ]\n    },\n    \"fetch\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-server-fetch\"\n      ]\n    }\n  }\n}\n</code></pre> <p>This configuration enables two MCP servers:</p> <ol> <li>sequential-thinking: Helps break down complex problems into manageable steps</li> <li>fetch: Allows the AI to retrieve information from the internet</li> </ol>"},{"location":"architecture/ide-setup/#using-mcps","title":"Using MCPs","text":"<p>When working with AI tools that support MCP:</p> <ol> <li>The AI will automatically use the appropriate MCP when needed</li> <li>For long-running operations or multi-step processes, you may see the AI thinking through steps</li> <li>When the AI is using an MCP and needs your input to continue, simply respond with \"continue\"</li> <li>For fetch operations, the AI may retrieve information from the internet to provide more accurate responses</li> </ol>"},{"location":"architecture/ide-setup/#global-mcp-rules","title":"Global MCP Rules","text":"<p>You can define global MCP rules using the <code>@global.mdc</code> directive in your prompts. This allows you to:</p> <ul> <li>Specify how the AI should approach problems</li> <li>Define constraints or requirements for the AI's responses</li> <li>Set preferences for how MCPs should be used</li> </ul> <p>For example:</p> <pre><code>@global.mdc Use sequential thinking for complex problems and fetch for retrieving up-to-date information\n</code></pre>"},{"location":"architecture/ide-setup/#enabling-mcps","title":"Enabling MCPs","text":"<p>To ensure MCPs are enabled:</p> <ol> <li>Make sure the <code>.cursor/mcp.json</code> file exists in your project</li> <li>Install the required dependencies:     <pre><code>npm install -g @modelcontextprotocol/server-sequential-thinking\npip install mcp-server-fetch\n</code></pre></li> <li>When working with AI tools, verify they have access to the MCP configuration</li> </ol>"},{"location":"architecture/ide-setup/#ai-enhanced-development-with-cursor","title":"AI-Enhanced Development with Cursor","text":"<p>For developers interested in AI-assisted development, Cursor provides an enhanced coding experience built on top of VSCode.</p>"},{"location":"architecture/ide-setup/#getting-started-with-cursor","title":"Getting Started with Cursor","text":"<ol> <li>Install Cursor</li> <li>Open the project folder in Cursor:     <pre><code>cursor .\n</code></pre></li> <li>Cursor will automatically use the same settings and extensions as VSCode</li> <li>Let Cursor's AI agent analyze your codebase</li> </ol>"},{"location":"architecture/ide-setup/#ai-assisted-development-features","title":"AI-Assisted Development Features","text":"<p>Cursor provides several AI-powered features that significantly improve the development experience:</p>"},{"location":"architecture/ide-setup/#1-real-time-code-quality-improvements","title":"1. Real-Time Code Quality Improvements","text":"<ul> <li>Automatic Error Detection and Fixing: Cursor's AI agent identifies and suggests fixes for code issues in real-time</li> <li>Smart Linting: Beyond traditional linting, the AI understands context and suggests semantic improvements</li> <li>Type Inference: Assists with type annotations and catches type-related issues early</li> </ul>"},{"location":"architecture/ide-setup/#2-code-generation-and-completion","title":"2. Code Generation and Completion","text":"<ul> <li>Contextual Code Generation: Suggests complete functions and classes based on your codebase</li> <li>Intelligent Autocomplete: Provides context-aware code completions</li> <li>Docstring Generation: Automatically generates comprehensive docstrings</li> </ul>"},{"location":"architecture/ide-setup/#3-refactoring-assistance","title":"3. Refactoring Assistance","text":"<ul> <li>Smart Refactoring: Suggests code improvements and refactoring opportunities</li> <li>Code Organization: Helps maintain clean code structure</li> <li>Import Management: Automatically organizes and optimizes imports</li> </ul>"},{"location":"architecture/ide-setup/#mcp-integration-in-cursor","title":"MCP Integration in Cursor","text":"<p>Cursor has built-in support for Model Context Protocol (MCP), making it particularly powerful for complex development tasks. When using Cursor:</p> <ol> <li>The AI automatically leverages MCPs when appropriate</li> <li>You can see the AI's thought process through sequential thinking</li> <li>For long-running operations, simply type \"continue\" when prompted</li> <li>The fetch MCP allows the AI to retrieve up-to-date information from the internet</li> </ol> <p>This integration makes Cursor especially valuable for tackling complex development challenges and staying current with the latest programming practices.</p>"},{"location":"architecture/lazy-loading/","title":"Lazy Loading","text":"<p>The project uses <code>lazy_loader</code> and <code>mkinit</code> to implement lazy loading of modules, which improves import performance by only loading modules when they are actually used.</p>"},{"location":"architecture/lazy-loading/#features","title":"Features","text":"<ul> <li>Improved Startup Time: Modules are only imported when actually used</li> <li>Preserved Type Hints: Type hints are preserved through <code>.pyi</code> stub files</li> <li>Automatic Generation: <code>__init__.py</code> files are automatically generated</li> <li>Pre-commit Integration: Imports are kept up-to-date with pre-commit hooks</li> </ul>"},{"location":"architecture/lazy-loading/#how-it-works","title":"How It Works","text":"<p>Lazy loading works by replacing direct imports with proxy objects that only import the actual module when accessed. This is done using the <code>lazy_loader</code> package.</p> <p>The <code>mkinit</code> tool automatically generates <code>__init__.py</code> and <code>__init__.pyi</code> files with the appropriate lazy loading imports.</p>"},{"location":"architecture/lazy-loading/#usage","title":"Usage","text":"<p>When you create a new module, you don't need to manually update the <code>__init__.py</code> files. Instead, the pre-commit hook will automatically run <code>mkinit</code> to update them.</p> <p>To manually update the <code>__init__.py</code> files:</p> <pre><code>uv run mkinit src --relative --lazy_loader_typed --recursive -w\n</code></pre>"},{"location":"architecture/lazy-loading/#example","title":"Example","text":"<p>Here's an example of how lazy loading works:</p> <pre><code># In __init__.py\n# Original import without lazy loading\nfrom .module1 import function1\nfrom .module2 import function2\n\n# When this module is imported, both module1 and module2 are loaded immediately.\n</code></pre> <pre><code># with lazy loading\n# In __init__.py (generated by mkinit)\nimport lazy_loader\n\n\n__getattr__, __dir__, __all__ = lazy_loader.attach_stub(__name__, __file__)\n\n__all__ = ['function1', 'function2', 'module1', 'module2']\n\n# When this module is imported, neither module1 nor module2 are loaded\n# They will only be loaded when function1 or function2 are actually used\n</code></pre>"},{"location":"architecture/lazy-loading/#benefits","title":"Benefits","text":"<ul> <li>Faster Application Startup: Only load what you need when you need it</li> <li>Reduced Memory Usage: Don't load modules that aren't used</li> <li>Circular Import Prevention: Lazy loading can help prevent circular import issues</li> <li>Cleaner Code: No need to use complex import workarounds</li> </ul>"},{"location":"architecture/lazy-loading/#type-checking","title":"Type Checking","text":"<p>To ensure type checking works correctly with lazy loading, <code>mkinit</code> generates <code>.pyi</code> stub files alongside the <code>__init__.py</code> files. These stub files contain the type information for the lazy-loaded modules.</p>"},{"location":"architecture/lazy-loading/#ide-integration-with-cursor","title":"IDE Integration with Cursor","text":""},{"location":"architecture/lazy-loading/#generated-files-and-ai-assisted-development","title":"Generated Files and AI-Assisted Development","text":"<p>The lazy loading system generates two types of files:</p> <ol> <li><code>__init__.py</code>: Contains the lazy loading implementation</li> <li><code>__init__.pyi</code>: Contains type hints for static type checkers</li> </ol> <p>These files are automatically generated and maintained by the pre-commit hooks. While you shouldn't need to edit them manually, Cursor's AI capabilities help by:</p> <ul> <li>Automatically generating and updating imports</li> <li>Suggesting optimal lazy loading patterns</li> <li>Detecting potential import performance issues</li> <li>Helping refactor code for better module organization</li> </ul> <p>For more information about IDE integration and settings, see IDE Setup.</p>"},{"location":"architecture/logging/","title":"Logging System","text":"<p>The logging system is configured in <code>src/utils/logging.py</code>, which provides a flexible and configurable logging setup for your application.</p>"},{"location":"architecture/logging/#features","title":"Features","text":"<ul> <li>Console and File Logging: Log to both console and file</li> <li>Configurable Log Levels: Set log levels via settings</li> <li>Automatic Directory Creation: Create log directories if they don't exist</li> <li>Structured Logging: Consistent log format across the application</li> <li>Module-specific Loggers: Get loggers for specific modules</li> </ul>"},{"location":"architecture/logging/#usage","title":"Usage","text":"<p>To use logging in your application:</p> <pre><code>from utils.logging import setup_logging, get_logger\n\n# Initialize logging\nsetup_logging()\n\n# Get a logger for your module\nlogger = get_logger(__name__)\n\n# Log messages at different levels\nlogger.debug(\"Debug message\")\nlogger.info(\"Info message\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error message\")\nlogger.critical(\"Critical message\")\n</code></pre>"},{"location":"architecture/logging/#configuration","title":"Configuration","text":"<p>The logging system can be configured through the following settings:</p> Setting Type Default Description <code>LOG_LEVEL</code> <code>str</code> \"INFO\" The logging level <code>LOG_FORMAT</code> <code>str</code> \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" The log message format <code>LOG_FILE</code> <code>str</code> \"logs/app.log\" Path to the log file"},{"location":"architecture/logging/#customizing-logging","title":"Customizing Logging","text":"<p>To customize logging for your application:</p>"},{"location":"architecture/logging/#modify-the-log-format-level-or-handlers-in-srcutilsloggingpy","title":"Modify the log format, level, or handlers in <code>src/utils/logging.py</code>:","text":"<pre><code>def setup_logging() -&gt; None:\n    \"\"\"Set up logging configuration.\"\"\"\n    # Create custom formatter\n    formatter = logging.Formatter(settings.LOG_FORMAT)\n\n    # Add custom handlers\n    # ...\n</code></pre>"},{"location":"architecture/logging/#add-custom-log-filters-or-formatters-as-needed","title":"Add custom log filters or formatters as needed:","text":"<pre><code>class CustomFilter(logging.Filter):\n    \"\"\"Custom log filter.\"\"\"\n\n    def filter(self, record: logging.LogRecord) -&gt; bool:\n        \"\"\"Filter log records.\"\"\"\n        # Custom filtering logic\n        return True\n</code></pre>"},{"location":"architecture/logging/#configure-component-specific-loggers-using-the-get_logger-function","title":"Configure component-specific loggers using the <code>get_logger</code> function:","text":"<pre><code># Get a logger for a specific component\nlogger = get_logger(\"component_name\")\n\n# Set component-specific log level\nlogger.setLevel(logging.DEBUG)\n</code></pre>"},{"location":"development/","title":"Development","text":"<p>This section provides guidance on the development workflow and practices for the Python Starting Project template.</p>"},{"location":"development/#available-development-documentation","title":"Available Development Documentation","text":"<ul> <li>Pre-commit Hooks: Learn about the pre-commit hooks that automate code quality checks.</li> <li>Workflow: Understand the comprehensive development workflow for this project.</li> <li>Simplified Workflow: Learn the minimal set of commands needed for daily development.</li> </ul> <p>These development documents help you understand how to work effectively with this project template and maintain high code quality standards.</p>"},{"location":"development/pre-commit-hooks/","title":"Pre-commit Hooks","text":"<p>This project uses pre-commit to run a series of checks on your code before committing. These hooks help maintain code quality, security, and consistency across the project.</p>"},{"location":"development/pre-commit-hooks/#installation","title":"Installation","text":"<p>Pre-commit hooks are installed automatically when you run:</p> <pre><code>uv sync\npre-commit install\n</code></pre>"},{"location":"development/pre-commit-hooks/#local-environment-integration","title":"Local Environment Integration","text":"<p>This project is configured to use your local uv environment for running pre-commit hooks instead of creating separate virtual environments for each hook. This approach:</p> <ul> <li>Makes hooks run faster by avoiding environment creation overhead</li> <li>Ensures hooks use the same dependencies as your project</li> <li>Provides consistent behavior between manual runs and pre-commit hooks</li> </ul> <p>The configuration uses:</p> <ul> <li><code>default_language_version: python: system</code> to use your system Python</li> <li><code>language: system</code> for local hooks</li> <li><code>uv run</code> prefix for commands to ensure they use your uv environment</li> </ul>"},{"location":"development/pre-commit-hooks/#available-hooks","title":"Available Hooks","text":""},{"location":"development/pre-commit-hooks/#code-quality","title":"Code Quality","text":""},{"location":"development/pre-commit-hooks/#ruff","title":"Ruff","text":"<p>Ruff is a fast Python linter and formatter written in Rust.</p> <ul> <li>Purpose: Lints and formats Python code</li> <li>Configuration: Configured in <code>pyproject.toml</code> under <code>[tool.ruff]</code></li> <li>Command: <code>poe ruff</code></li> </ul>"},{"location":"development/pre-commit-hooks/#vulture","title":"Vulture","text":"<p>Vulture finds unused code in Python programs.</p> <ul> <li>Purpose: Identifies dead code (unused functions, classes, variables)</li> <li>Configuration: Configured in <code>pyproject.toml</code> under <code>[tool.vulture]</code></li> <li>Command: <code>poe vulture</code></li> <li>Badge: </li> </ul>"},{"location":"development/pre-commit-hooks/#radon","title":"Radon","text":"<p>Radon analyzes code complexity.</p> <ul> <li>Purpose: Computes cyclomatic complexity to identify overly complex functions</li> <li>Configuration: Configured via command-line arguments in <code>.pre-commit-config.yaml</code></li> <li>Command: <code>poe radon</code></li> </ul>"},{"location":"development/pre-commit-hooks/#pyupgrade","title":"PyUpgrade","text":"<p>PyUpgrade automatically upgrades Python syntax.</p> <ul> <li>Purpose: Updates Python syntax to use newer language features</li> <li>Command: <code>poe pyupgrade</code></li> </ul>"},{"location":"development/pre-commit-hooks/#flynt","title":"Flynt","text":"<p>Flynt converts old string formatting to f-strings.</p> <ul> <li>Purpose: Modernizes string formatting</li> <li>Command: <code>poe flynt</code></li> </ul>"},{"location":"development/pre-commit-hooks/#documentation","title":"Documentation","text":""},{"location":"development/pre-commit-hooks/#interrogate","title":"Interrogate","text":"<p>Interrogate checks docstring coverage.</p> <ul> <li>Purpose: Ensures code is properly documented</li> <li>Configuration: Configured in <code>pyproject.toml</code> under <code>[tool.interrogate]</code></li> <li>Command: <code>poe interrogate</code></li> <li>Badge: </li> </ul>"},{"location":"development/pre-commit-hooks/#darglint","title":"Darglint","text":"<p>Darglint checks that docstring arguments match function signatures.</p> <ul> <li>Purpose: Ensures docstrings accurately reflect function parameters and return values</li> <li>Configuration: Configured in <code>pyproject.toml</code> under <code>[tool.darglint]</code></li> <li>Command: Not available as a direct command</li> </ul>"},{"location":"development/pre-commit-hooks/#mdformat","title":"MDFormat","text":"<p>MDFormat formats Markdown files.</p> <ul> <li>Purpose: Ensures consistent Markdown formatting</li> <li>Command: Not available as a direct command</li> </ul>"},{"location":"development/pre-commit-hooks/#security","title":"Security","text":""},{"location":"development/pre-commit-hooks/#bandit","title":"Bandit","text":"<p>Bandit is a security linter for Python code.</p> <ul> <li>Purpose: Finds common security issues in Python code</li> <li>Configuration: Configured in <code>pyproject.toml</code> under <code>[tool.bandit]</code></li> <li>Command: <code>poe bandit</code></li> <li>Badge: </li> </ul>"},{"location":"development/pre-commit-hooks/#gitleaks","title":"Gitleaks","text":"<p>Gitleaks detects hardcoded secrets.</p> <ul> <li>Purpose: Prevents committing sensitive information</li> <li>Command: Not available as a direct command</li> </ul>"},{"location":"development/pre-commit-hooks/#infrastructure","title":"Infrastructure","text":""},{"location":"development/pre-commit-hooks/#actionlint","title":"Actionlint","text":"<p>Actionlint lints GitHub Actions workflows.</p> <ul> <li>Purpose: Validates GitHub Actions workflow files</li> <li>Command: Not available as a direct command</li> </ul>"},{"location":"development/pre-commit-hooks/#shellcheck","title":"Shellcheck","text":"<p>Shellcheck lints shell scripts.</p> <ul> <li>Purpose: Finds bugs in shell scripts</li> <li>Command: Not available as a direct command</li> </ul>"},{"location":"development/pre-commit-hooks/#commitizen","title":"Commitizen","text":"<p>Commitizen enforces conventional commit message format.</p> <ul> <li>Purpose: Standardizes commit messages for better changelog generation</li> <li>Configuration: Configured in <code>pyproject.toml</code> under <code>[tool.commitizen]</code></li> <li>Command: Not available as a direct command</li> <li>Badge: </li> </ul>"},{"location":"development/pre-commit-hooks/#mkinit","title":"MkInit","text":"<p>MkInit generates <code>__init__.py</code> files.</p> <ul> <li>Purpose: Automatically creates <code>__init__.py</code> files with lazy loading</li> <li>Command: <code>poe mkinit</code></li> </ul>"},{"location":"development/pre-commit-hooks/#running-all-hooks","title":"Running All Hooks","text":"<p>To run all pre-commit hooks on all files:</p> <pre><code>poe pre-commit\n</code></pre> <p>This command uses <code>uv</code> to ensure all hooks run in your project's environment with the correct dependencies. If you're not using <code>uv</code> or want to use the Poetry equivalent:</p> <pre><code>poe pre-commit\n</code></pre>"},{"location":"development/pre-commit-hooks/#continuous-integration","title":"Continuous Integration","text":"<p>This project uses GitHub Actions to run pre-commit hooks in CI/CD pipelines. The workflow is defined in <code>.github/workflows/pre-commit.yml</code> and:</p> <ol> <li>Runs on every pull request and push to the main branch</li> <li>Uses uv for dependency management following Astral's best practices</li> <li>Installs all project dependencies</li> <li>Runs all pre-commit hooks on all files</li> </ol> <p>This ensures that all code meets quality standards before being merged. The workflow configuration:</p> <pre><code>name: Pre-commit Checks\n\non:\n  pull_request:\n  push:\n    branches: [main]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Install uv\n        uses: astral-sh/setup-uv@v5\n        with:\n          enable-cache: true\n          cache-dependency-glob: pyproject.toml\n\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version-file: pyproject.toml\n\n      - name: Install dependencies\n        run: uv sync --all-extras --dev\n\n      - name: Run pre-commit hooks\n        run: poe pre-commit\n</code></pre>"},{"location":"development/pre-commit-hooks/#skipping-hooks","title":"Skipping Hooks","text":"<p>In rare cases, you may need to skip pre-commit hooks:</p> <pre><code>git commit --no-verify -m \"Your commit message\"\n</code></pre> <p>However, this is discouraged and should only be used in exceptional circumstances.</p>"},{"location":"development/pre-commit-hooks/#adding-new-hooks","title":"Adding New Hooks","text":"<p>To add a new pre-commit hook:</p> <ol> <li>Add the hook configuration to <code>.pre-commit-config.yaml</code></li> <li>Add any necessary dependencies to <code>pyproject.toml</code> under <code>[dependency-groups.dev]</code></li> <li>Add any tool-specific configuration to <code>pyproject.toml</code></li> <li>Run <code>uv sync</code> to install the new dependencies</li> <li>Run <code>pre-commit install</code> to update the hooks</li> </ol>"},{"location":"development/simplified-workflow/","title":"Simplified Workflow","text":"<p>This project is designed to have a minimal learning curve. You only need to know 4 commands for the entire development cycle.</p>"},{"location":"development/simplified-workflow/#complete-workflow-example","title":"Complete Workflow Example","text":"<pre><code># Initial setup (only once)\nuv sync\nuv run pre-commit install\n\n# Development cycle (repeat as needed)\npoe pre\n\n# Commit your changes\ngit add .\ngit commit -m \"Your message\"\ngit push\n</code></pre>"},{"location":"development/simplified-workflow/#what-happens-behind-the-scenes","title":"What Happens Behind the Scenes","text":"<p>When you run <code>git commit</code>, the pre-commit hooks automatically:</p> <ol> <li>Format your code using Ruff</li> <li>Lint your code to check for errors and style issues</li> <li>Check types using Pyright</li> <li>Detect security issues using Bandit</li> <li>Find dead code using Vulture</li> <li>Verify docstring coverage using Interrogate</li> <li>Measure code complexity using Radon and Xenon</li> </ol> <p>If any of these checks fail, the commit is aborted, and you'll see error messages explaining what needs to be fixed.</p>"},{"location":"development/simplified-workflow/#benefits-of-this-workflow","title":"Benefits of This Workflow","text":"<ul> <li>Minimal learning curve - just 4 commands to remember</li> <li>Consistent code quality - automated checks ensure high standards</li> <li>Fast feedback loop - issues are caught before they're committed</li> <li>Reduced review cycles - fewer issues to fix during code review</li> <li>Better collaboration - everyone follows the same standards</li> </ul>"},{"location":"development/simplified-workflow/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/simplified-workflow/#pre-commit-hooks-failing","title":"Pre-commit Hooks Failing","text":"<p>If your commit fails due to pre-commit hooks:</p> <ol> <li>Read the error messages to understand what failed</li> <li>Fix the issues in your code</li> <li>Run <code>git add .</code> to stage the fixes</li> <li>Try committing again with <code>git commit -m \"Your message\"</code></li> </ol>"},{"location":"development/simplified-workflow/#skipping-pre-commit-hooks-not-recommended","title":"Skipping Pre-commit Hooks (Not Recommended)","text":"<p>In rare cases, you might need to bypass the pre-commit hooks:</p> <pre><code>git commit -m \"Your message\" --no-verify\n</code></pre> <p>Warning: This should only be used in exceptional circumstances, as it bypasses all quality checks.</p>"},{"location":"development/simplified-workflow/#updating-pre-commit-hooks","title":"Updating Pre-commit Hooks","text":"<p>To update your pre-commit hooks to the latest versions:</p> <pre><code>uv run pre-commit autoupdate\n</code></pre>"},{"location":"development/simplified-workflow/#next-steps","title":"Next Steps","text":"<p>For more detailed information about the pre-commit hooks and what they check for, see Pre-commit Hooks.</p>"},{"location":"development/workflow/","title":"Development Workflow","text":"<p>This document outlines the recommended development workflow for contributing to this project. Following these guidelines ensures consistency and quality across the codebase.</p>"},{"location":"development/workflow/#overview","title":"Overview","text":"<p>Our development workflow is designed to:</p> <ul> <li>Maintain high code quality</li> <li>Ensure consistent code style</li> <li>Prevent bugs and issues before they reach production</li> <li>Streamline the development process</li> <li>Facilitate collaboration between team members</li> </ul>"},{"location":"development/workflow/#setup","title":"Setup","text":"<p>Before you begin development, ensure you have:</p> <ol> <li>Forked and cloned the repository</li> <li>Set up your development environment as described in Getting Started</li> <li>Installed pre-commit hooks with <code>uv run pre-commit install</code></li> <li>Familiarized yourself with the project structure</li> </ol>"},{"location":"development/workflow/#development-workflow_1","title":"Development Workflow","text":"<p>When making changes:</p> <ol> <li>Follow the project's code style guidelines</li> <li>Write tests for new functionality</li> <li>Update documentation as needed</li> <li>Keep commits small and focused</li> <li>Use meaningful commit messages</li> </ol>"},{"location":"development/workflow/#3-run-tests-locally","title":"3. Run Tests Locally","text":"<p>Before submitting your changes, run tests locally:</p> <pre><code># Run all tests\npoe pre\n</code></pre>"},{"location":"development/workflow/#continuous-integration","title":"Continuous Integration","text":"<p>Our CI pipeline automatically:</p> <ol> <li>Runs tests on all PRs</li> <li>Checks code quality</li> <li>Verifies documentation builds</li> <li>Ensures all pre-commit hooks pass</li> </ol>"},{"location":"development/workflow/#release-process","title":"Release Process","text":"<p>Releases are managed by maintainers and follow these steps:</p> <ol> <li>Version bump according to Semantic Versioning</li> <li>Changelog update</li> <li>Tag creation</li> <li>Release build and deployment</li> </ol>"},{"location":"development/workflow/#best-practices","title":"Best Practices","text":""},{"location":"development/workflow/#code-quality","title":"Code Quality","text":"<ul> <li>Write clean, readable code</li> <li>Follow the principle of least surprise</li> <li>Keep functions small and focused</li> <li>Use meaningful variable and function names</li> <li>Add comments for complex logic</li> </ul>"},{"location":"development/workflow/#testing","title":"Testing","text":"<ul> <li>Write tests for all new features</li> <li>Maintain high test coverage</li> <li>Test edge cases</li> <li>Use parameterized tests for similar test cases</li> <li>Mock external dependencies</li> </ul>"},{"location":"development/workflow/#documentation","title":"Documentation","text":"<ul> <li>Update documentation for API changes</li> <li>Add examples for new features</li> <li>Keep README and other docs up to date</li> <li>Document complex algorithms and decisions</li> </ul>"},{"location":"development/workflow/#git-practices","title":"Git Practices","text":"<ul> <li>Keep commits atomic and focused</li> <li>Write descriptive commit messages</li> <li>Rebase feature branches on main regularly</li> <li>Squash commits before merging if needed</li> </ul>"},{"location":"development/workflow/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/workflow/#pre-commit-hooks-failing","title":"Pre-commit Hooks Failing","text":"<p>If pre-commit hooks fail:</p> <ol> <li>Read the error message carefully</li> <li>Fix the issues locally</li> <li>Stage the changes</li> <li>Try committing again</li> </ol> <p>If you need to bypass hooks temporarily:</p> <pre><code>git commit -m \"your message\" --no-verify  # (1)\n</code></pre> <ol> <li>This bypasses pre-commit hooks, but should only be used in exceptional cases</li> </ol>"},{"location":"development/workflow/#merge-conflicts","title":"Merge Conflicts","text":"<p>When encountering merge conflicts:</p> <pre><code>git checkout main  # (1)\ngit pull  # (2)\ngit checkout your-branch  # (3)\ngit rebase main  # (4)\n# Resolve conflicts\ngit add .  # (5)\ngit rebase --continue  # (6)\ngit push --force-with-lease origin your-branch  # (7)\n</code></pre> <ol> <li>Switch to the main branch</li> <li>Pull the latest changes</li> <li>Switch back to your feature branch</li> <li>Rebase your branch on main</li> <li>Stage resolved conflicts</li> <li>Continue the rebase process</li> <li>Force push with lease for safety</li> </ol>"},{"location":"development/workflow/#resources","title":"Resources","text":"<ul> <li>Git Documentation</li> <li>Conventional Commits</li> <li>Semantic Versioning</li> <li>Pre-commit Documentation</li> <li>GitHub Flow</li> </ul>"},{"location":"learning-path/","title":"Learning Path","text":"<p>The learning path section provides guided learning materials organized by skill level. Choose the path that best matches your experience level:</p> <ul> <li>Beginner's Guide: Perfect for those new to this project template or Python development in general.</li> <li>Intermediate Topics: For developers who understand the basics and want to learn more advanced customization.</li> <li>Advanced Techniques: For experienced developers looking to extend and optimize the project template.</li> </ul> <p>Choose a path to begin your learning journey.</p>"},{"location":"learning-path/advanced-techniques/","title":"Advanced Techniques - Extending and Optimizing Your Project","text":"<p>Est. time to complete: 1.5 hours</p>"},{"location":"learning-path/advanced-techniques/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to extend the project template for specialized use cases</li> <li>Performance optimization techniques</li> <li>Integration with CI/CD pipelines</li> <li>Advanced testing strategies</li> <li>Creating custom tools and hooks</li> </ul>"},{"location":"learning-path/advanced-techniques/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed the Intermediate Topics guide</li> <li>Experience with at least one medium-sized project using this template</li> <li>Understanding of Python packaging and deployment</li> </ul>"},{"location":"learning-path/advanced-techniques/#key-concepts","title":"Key Concepts","text":"<p>This is a placeholder. Content will be extracted from various existing documentation sources.</p>"},{"location":"learning-path/advanced-techniques/#performance-optimization","title":"Performance Optimization","text":"<p>This is a placeholder. Will add content about optimizing project performance</p>"},{"location":"learning-path/advanced-techniques/#cicd-integration","title":"CI/CD Integration","text":"<p>This is a placeholder. Will add content about integrating with CI/CD pipelines</p>"},{"location":"learning-path/advanced-techniques/#custom-tool-development","title":"Custom Tool Development","text":"<p>This is a placeholder. Will add content about developing custom tools and hooks</p>"},{"location":"learning-path/advanced-techniques/#advanced-testing-patterns","title":"Advanced Testing Patterns","text":"<p>This is a placeholder. Will add content about advanced testing strategies</p>"},{"location":"learning-path/advanced-techniques/#practical-application","title":"Practical Application","text":"<p>This is a placeholder. Will add practical examples of advanced techniques</p>"},{"location":"learning-path/advanced-techniques/#check-your-understanding","title":"Check Your Understanding","text":"<p>This is a placeholder. Will add knowledge check questions</p>"},{"location":"learning-path/advanced-techniques/#next-steps","title":"Next Steps","text":"<ul> <li>[Project-specific guides to be added]</li> <li>[Contributing to the project]</li> <li>[Creating your own project templates]</li> </ul>"},{"location":"learning-path/beginners-guide/","title":"Beginner's Guide - Getting Started with Python Template","text":"<p>Est. time to complete: 30 minutes</p>"},{"location":"learning-path/beginners-guide/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to set up a new Python project using this template</li> <li>The basics of the project structure and organization</li> <li>How to use the essential tools for your development workflow</li> </ul>"},{"location":"learning-path/beginners-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic familiarity with Python</li> <li>Python 3.11+ installed on your system</li> <li>Basic command-line knowledge</li> </ul>"},{"location":"learning-path/beginners-guide/#key-concepts","title":"Key Concepts","text":"<p>This is a placeholder. Content will be migrated from getting-started.md, architecture/ide-setup.md, and development/simplified-workflow.md</p>"},{"location":"learning-path/beginners-guide/#the-minimal-workflow","title":"The Minimal Workflow","text":"<p>This is a placeholder. Content will be migrated from getting-started.md and simplified-workflow.md</p>"},{"location":"learning-path/beginners-guide/#understanding-the-project-structure","title":"Understanding the Project Structure","text":"<p>This is a placeholder. Content will be migrated from getting-started.md</p>"},{"location":"learning-path/beginners-guide/#practical-application","title":"Practical Application","text":"<p>This is a placeholder. Will add step-by-step examples of basic usage</p>"},{"location":"learning-path/beginners-guide/#check-your-understanding","title":"Check Your Understanding","text":"<p>This is a placeholder. Will add knowledge check questions</p>"},{"location":"learning-path/beginners-guide/#next-steps","title":"Next Steps","text":"<ul> <li>Intermediate Topics</li> <li>Setup Tutorial</li> <li>Development Workflow</li> </ul>"},{"location":"learning-path/intermediate-topics/","title":"Intermediate Topics - Advanced Usage and Customization","text":"<p>Est. time to complete: 1 hour</p>"},{"location":"learning-path/intermediate-topics/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to customize the project for specific use cases</li> <li>Advanced configuration options for the development tools</li> <li>Techniques for extending the project structure</li> <li>Best practices for managing dependencies</li> </ul>"},{"location":"learning-path/intermediate-topics/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed the Beginner's Guide</li> <li>Set up at least one project using the template</li> <li>Familiarity with Python packaging concepts</li> </ul>"},{"location":"learning-path/intermediate-topics/#key-concepts","title":"Key Concepts","text":"<p>This is a placeholder. Content will be extracted from various existing documentation sources.</p>"},{"location":"learning-path/intermediate-topics/#advanced-configuration","title":"Advanced Configuration","text":"<p>This is a placeholder. Will add content about advanced configuration options from architecture/configuration.md</p>"},{"location":"learning-path/intermediate-topics/#dependency-management","title":"Dependency Management","text":"<p>This is a placeholder. Will add content about managing project dependencies</p>"},{"location":"learning-path/intermediate-topics/#customizing-workflows","title":"Customizing Workflows","text":"<p>This is a placeholder. Will add content about customizing pre-commit hooks and workflow from development/workflow.md</p>"},{"location":"learning-path/intermediate-topics/#practical-application","title":"Practical Application","text":"<p>This is a placeholder. Will add practical examples of customization and extension</p>"},{"location":"learning-path/intermediate-topics/#check-your-understanding","title":"Check Your Understanding","text":"<p>This is a placeholder. Will add knowledge check questions</p>"},{"location":"learning-path/intermediate-topics/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced Techniques</li> <li>Adding a Feature Tutorial</li> <li>Testing Your Code</li> </ul>"},{"location":"technologies/","title":"Technologies","text":"<p>This section provides documentation for the various technologies and tools used in this project. Each page includes information about what the tool does, how it's configured in this project, and how to use it effectively.</p>"},{"location":"technologies/#package-management","title":"Package Management","text":"<ul> <li>uv - Fast Python package installer and resolver</li> <li>hatchling - Modern Python project build backend</li> </ul>"},{"location":"technologies/#project-structure","title":"Project Structure","text":"<ul> <li>hatchling - Modern Python project build backend</li> <li>lazy-loader - Deferred module loading for Python</li> <li>pydantic-settings - Settings management for Python</li> </ul>"},{"location":"technologies/#code-analysis","title":"Code Analysis","text":"<ul> <li>pyright - Static type checker for Python</li> <li>bandit - Security-focused static analyzer</li> <li>vulture - Dead code detector</li> <li>shellcheck-py - Shell script linter for Python</li> </ul>"},{"location":"technologies/#code-quality","title":"Code Quality","text":"<ul> <li>ruff - Fast Python linter and formatter</li> <li>flynt - Python string format converter</li> <li>pyupgrade - Python syntax upgrader</li> <li>mkinit - Python <code>__init__.py</code> generator</li> <li>commitizen - Standardized commit messages</li> <li>darglint - Docstring argument linter</li> <li>codespell - Spell checker for code</li> <li>mdformat - Markdown formatter</li> <li>interrogate - Docstring coverage checker</li> <li>radon - Code complexity analyzer</li> <li>xenon - Code maintainability checker</li> </ul>"},{"location":"technologies/#documentation","title":"Documentation","text":"<ul> <li>mkdocs - Project documentation generator</li> <li>mkdocs-material - Material theme for MkDocs</li> </ul>"},{"location":"technologies/#task-running","title":"Task Running","text":"<ul> <li>poethepoet - Task runner for Python projects</li> </ul>"},{"location":"technologies/#testing","title":"Testing","text":"<ul> <li>pytest - Python testing framework</li> <li>pytest-cov - Code coverage for pytest</li> <li>pytest-asyncio - Testing asynchronous code with pytest</li> <li>pytest-xdist - Distributed testing with pytest</li> </ul>"},{"location":"technologies/#version-control","title":"Version Control","text":"<ul> <li>pre-commit - Git hooks framework</li> <li>git - Distributed version control system</li> </ul>"},{"location":"technologies/#how-to-use-this-documentation","title":"How to Use This Documentation","text":"<p>Each technology page follows a consistent structure:</p> <ol> <li>Overview - A brief description of what the tool does and its key features</li> <li>Installation - How to install the tool in this project</li> <li>How It's Used in This Project - Specific ways the tool is utilized</li> <li>Configuration in This Project - How the tool is configured</li> <li>Basic Usage - Common commands and usage patterns</li> <li>Examples - Practical examples of using the tool</li> <li>Best Practices - Recommended approaches when using the tool</li> <li>Resources - Links to official documentation and helpful resources</li> </ol> <p>For a more comprehensive understanding of how these technologies work together, see the Development Workflow documentation.</p>"},{"location":"technologies/code-analysis/bandit/","title":"Bandit - Security Linter for Python","text":"<p>Bandit is a security linter for Python code, designed to find common security issues and vulnerabilities in your codebase.</p>"},{"location":"technologies/code-analysis/bandit/#overview","title":"Overview","text":"<p>Bandit scans Python code for common security issues such as:</p> <ul> <li>Hardcoded passwords and secrets</li> <li>SQL injection vulnerabilities</li> <li>Command injection vulnerabilities</li> <li>Insecure use of cryptographic functions</li> <li>Use of potentially dangerous functions</li> <li>Insecure file permissions</li> <li>And many other security concerns</li> </ul> <p>It works by parsing the abstract syntax tree (AST) of Python files and running a series of plugins that look for specific patterns associated with security issues.</p>"},{"location":"technologies/code-analysis/bandit/#installation","title":"Installation","text":"<p>Bandit is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install bandit\n</code></pre>"},{"location":"technologies/code-analysis/bandit/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Bandit is used to:</p> <ol> <li>Identify potential security vulnerabilities in the codebase</li> <li>Enforce security best practices</li> <li>Prevent common security mistakes</li> <li>Run as part of the pre-commit hooks and CI/CD pipeline</li> </ol>"},{"location":"technologies/code-analysis/bandit/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Bandit is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.bandit]\nexclude_dirs = [\"tests\", \".venv\", \".git\"]\nskips = [\"B101\"]                          # Skip assert statements warning\n</code></pre> <p>This configuration:</p> <ul> <li>Excludes test directories and virtual environments from scanning</li> <li>Skips the B101 check (use of assert statements), which is often a false positive in test code</li> </ul> <p>Bandit is also configured as a poethepoet task:</p> <pre><code>[tool.poe.tasks]\nbandit = \"bandit -c pyproject.toml -r src --exclude tests,.venv,.git\"\n</code></pre>"},{"location":"technologies/code-analysis/bandit/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/code-analysis/bandit/#running-bandit","title":"Running Bandit","text":"<p>To run Bandit on the project:</p> <pre><code># Run via poethepoet\nuv run poe bandit\n\n# Run directly\nuv run bandit -c pyproject.toml -r src\n</code></pre>"},{"location":"technologies/code-analysis/bandit/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Scan a specific file\nuv run bandit path/to/file.py\n\n# Scan a directory recursively\nuv run bandit -r path/to/directory\n\n# Specify severity level\nuv run bandit -r src -l high\n\n# Specify confidence level\nuv run bandit -r src -c medium\n\n# Generate a report\nuv run bandit -r src -f json -o bandit-report.json\n</code></pre>"},{"location":"technologies/code-analysis/bandit/#common-security-issues","title":"Common Security Issues","text":""},{"location":"technologies/code-analysis/bandit/#b101-use-of-assert-statements","title":"B101: Use of assert statements","text":"<pre><code># Potentially problematic (assertions can be disabled with -O)\nassert user.is_authenticated()\n\n# Better approach\nif not user.is_authenticated():\n    raise PermissionError(\"User not authenticated\")\n</code></pre>"},{"location":"technologies/code-analysis/bandit/#b102-use-of-exec","title":"B102: Use of exec","text":"<pre><code># Dangerous\nexec(user_input)\n\n# Better approach\n# Avoid exec entirely, use safer alternatives\n</code></pre>"},{"location":"technologies/code-analysis/bandit/#b103-setting-permissive-file-permissions","title":"B103: Setting permissive file permissions","text":"<pre><code># Insecure\nopen(\"sensitive.txt\", \"w\").write(\"secret\")\n\n# More secure\nimport os\n\nwith open(\"sensitive.txt\", \"w\") as f:\n    os.chmod(\"sensitive.txt\", 0o600)  # Owner read/write only\n    f.write(\"secret\")\n</code></pre>"},{"location":"technologies/code-analysis/bandit/#b104-b107-hardcoded-passwords-and-secrets","title":"B104-B107: Hardcoded passwords and secrets","text":"<pre><code># Insecure\npassword = \"hardcoded_password\"\n\n# Better approach\nimport os\n\npassword = os.environ.get(\"PASSWORD\")\n</code></pre>"},{"location":"technologies/code-analysis/bandit/#b301-b315-use-of-insecure-functions","title":"B301-B315: Use of insecure functions","text":"<pre><code># Insecure\nimport pickle\n\ndata = pickle.loads(user_input)  # Arbitrary code execution risk\n\n# Better approach\nimport json\n\ndata = json.loads(user_input)\n</code></pre>"},{"location":"technologies/code-analysis/bandit/#best-practices","title":"Best Practices","text":"<ol> <li>Run Bandit regularly: Include Bandit in your pre-commit hooks and CI/CD pipeline.</li> <li>Address high-severity issues immediately: High-severity issues with high confidence should be fixed as soon as possible.</li> <li>Review false positives: Some issues flagged by Bandit may be false positives. Review them carefully and add skips only when necessary.</li> <li>Use context-specific configurations: Different parts of your codebase may need different security checks.</li> <li>Keep Bandit updated: Security tools should be kept up to date to catch the latest known vulnerabilities.</li> </ol>"},{"location":"technologies/code-analysis/bandit/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technologies/code-analysis/bandit/#common-issues","title":"Common Issues","text":""},{"location":"technologies/code-analysis/bandit/#too-many-false-positives","title":"Too Many False Positives","text":"<p>If you're getting too many false positives:</p> <ol> <li>Review the issues to ensure they're actually false positives</li> <li>Add specific skips for the relevant checks in <code>pyproject.toml</code></li> <li>Use inline skips for specific lines: <code># nosec</code> or <code># nosec B101</code></li> </ol>"},{"location":"technologies/code-analysis/bandit/#integration-with-other-tools","title":"Integration with Other Tools","text":"<p>If you're having issues integrating Bandit with other tools:</p> <ol> <li>Ensure you're using compatible versions</li> <li>Check that your configuration files are correctly formatted</li> <li>Try running Bandit directly to isolate the issue</li> </ol>"},{"location":"technologies/code-analysis/bandit/#resources","title":"Resources","text":"<ul> <li>Bandit Documentation</li> <li>Bandit GitHub Repository</li> <li>OWASP Python Security Project</li> <li>Common Security Issues in Python</li> </ul>"},{"location":"technologies/code-analysis/pyright/","title":"Pyright - Static Type Checker","text":"<p>Pyright is a fast, accurate static type checker for Python, designed to catch type errors before runtime. It's built by Microsoft and is the type checking engine behind Pylance, the Python language server for VS Code.</p>"},{"location":"technologies/code-analysis/pyright/#overview","title":"Overview","text":"<p>Pyright analyzes Python code without running it, using type annotations and type inference to detect potential type errors. It's designed to be:</p> <ul> <li>Fast and scalable, even for large codebases</li> <li>Highly configurable to match your project's needs</li> <li>Compatible with PEP 484, 526, 544, 561, and other typing-related PEPs</li> <li>Usable as a standalone tool or as a VS Code extension</li> </ul>"},{"location":"technologies/code-analysis/pyright/#installation","title":"Installation","text":"<p>Pyright is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install pyright\n</code></pre>"},{"location":"technologies/code-analysis/pyright/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Pyright is used to:</p> <ol> <li>Verify type correctness of the codebase</li> <li>Catch potential type errors before runtime</li> <li>Enforce type safety standards</li> <li>Provide type information for IDE features</li> </ol> <p>It's configured to run in strict mode, which enforces comprehensive type checking.</p>"},{"location":"technologies/code-analysis/pyright/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Pyright is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.pyright]\nexclude = [\n  \"**/__init__.py\",\n]\ninclude = [\"src\", \"tests\"]\npythonVersion = \"3.11\"\nreportUnknownParameterType = \"none\"\nreportUnknownMemberType = \"none\"\nreportUnknownVariableType = \"none\"\nreportUnknownArgumentType = \"none\"\ntypeCheckingMode = \"strict\"\n</code></pre> <p>This configuration:</p> <ul> <li>Excludes <code>__init__.py</code> files from type checking</li> <li>Includes only the <code>src</code> and <code>tests</code> directories</li> <li>Specifies Python 3.11 as the target version</li> <li>Disables some specific error reports that might be too noisy</li> <li>Enables strict type checking mode</li> </ul>"},{"location":"technologies/code-analysis/pyright/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/code-analysis/pyright/#running-pyright","title":"Running Pyright","text":"<p>To run Pyright on the project:</p> <pre><code># Run via poethepoet\nuv run poe pyright\n\n# Run directly\nuv run pyright\n</code></pre>"},{"location":"technologies/code-analysis/pyright/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Check specific files or directories\nuv run pyright src/specific_module.py\n\n# Show verbose output\nuv run pyright --verbose\n\n# Generate a stats file\nuv run pyright --stats\n\n# Use a specific Python version\nuv run pyright --pythonversion 3.11\n\n# Watch for changes\nuv run pyright --watch\n</code></pre>"},{"location":"technologies/code-analysis/pyright/#type-annotation-basics","title":"Type Annotation Basics","text":""},{"location":"technologies/code-analysis/pyright/#variable-annotations","title":"Variable Annotations","text":"<pre><code># Variable annotations\nname: str = \"John\"\nage: int = 30\nis_active: bool = True\n</code></pre>"},{"location":"technologies/code-analysis/pyright/#function-annotations","title":"Function Annotations","text":"<pre><code># Function with type annotations\ndef greet(name: str) -&gt; str:\n    return f\"Hello, {name}!\"\n\n\n# Function with optional parameters\ndef greet_optional(name: str, title: str | None = None) -&gt; str:\n    if title:\n        return f\"Hello, {title} {name}!\"\n    return f\"Hello, {name}!\"\n</code></pre>"},{"location":"technologies/code-analysis/pyright/#class-annotations","title":"Class Annotations","text":"<pre><code># Class with type annotations\nclass User:\n    name: str\n    age: int\n\n    def __init__(self, name: str, age: int) -&gt; None:\n        self.name = name\n        self.age = age\n\n    def is_adult(self) -&gt; bool:\n        return self.age &gt;= 18\n</code></pre>"},{"location":"technologies/code-analysis/pyright/#best-practices","title":"Best Practices","text":"<ol> <li>Add type annotations to public APIs: At minimum, annotate function parameters and return types for public functions and methods.</li> <li>Use type aliases for complex types: Create type aliases for complex types to improve readability.</li> <li>Leverage Union types for flexibility: Use Union types (e.g., <code>str | None</code>) for parameters that can accept multiple types.</li> <li>Use TypedDict for dictionary structures: Define TypedDict classes for dictionaries with specific structures.</li> <li>Add Generic types for containers: Use Generic types for collections to specify contained types.</li> <li>Gradually add types: Start with the most critical parts of your codebase and gradually add types to the rest.</li> </ol>"},{"location":"technologies/code-analysis/pyright/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technologies/code-analysis/pyright/#common-issues","title":"Common Issues","text":""},{"location":"technologies/code-analysis/pyright/#type-errors-in-third-party-libraries","title":"Type Errors in Third-Party Libraries","text":"<p>If you get type errors from third-party libraries:</p> <ol> <li>Check if type stubs are available: <code>uv pip install types-package-name</code></li> <li>Add the library to the exclude list in <code>pyproject.toml</code></li> <li>Use <code># type: ignore</code> comments for specific imports</li> </ol>"},{"location":"technologies/code-analysis/pyright/#cannot-find-module-errors","title":"\"Cannot find module\" Errors","text":"<p>If Pyright can't find a module:</p> <ol> <li>Ensure the module is installed</li> <li>Check your project structure</li> <li>Add the module to the Python path in your configuration</li> </ol>"},{"location":"technologies/code-analysis/pyright/#type-is-unknown-errors","title":"\"Type is unknown\" Errors","text":"<p>If you get \"type is unknown\" errors:</p> <ol> <li>Add type annotations to the relevant variables or functions</li> <li>Use <code>Any</code> as a last resort for truly dynamic types</li> <li>Configure specific \"reportUnknown*\" settings in <code>pyproject.toml</code></li> </ol>"},{"location":"technologies/code-analysis/pyright/#resources","title":"Resources","text":"<ul> <li>Pyright Documentation</li> <li>Python Type Hints Documentation</li> <li>PEP 484 - Type Hints</li> <li>mypy Type System Cheat Sheet (also applicable to Pyright)</li> </ul>"},{"location":"technologies/code-analysis/shellcheck-py/","title":"Shellcheck-py - Shell Script Linter for Python","text":"<p>Shellcheck-py is a Python wrapper for ShellCheck, a static analysis tool for shell scripts that finds bugs, style issues, and suspicious constructs in your shell scripts.</p>"},{"location":"technologies/code-analysis/shellcheck-py/#overview","title":"Overview","text":"<p>Shellcheck-py helps improve shell script quality by:</p> <ul> <li>Finding and fixing common shell script bugs</li> <li>Identifying potential security issues</li> <li>Suggesting style improvements</li> <li>Detecting portability issues between different shell types</li> <li>Providing clear explanations for each issue</li> <li>Integrating with Python projects and pre-commit hooks</li> </ul>"},{"location":"technologies/code-analysis/shellcheck-py/#installation","title":"Installation","text":"<p>Shellcheck-py is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install shellcheck-py\n</code></pre>"},{"location":"technologies/code-analysis/shellcheck-py/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Shellcheck-py is used to:</p> <ol> <li>Validate shell scripts in the repository</li> <li>Ensure shell scripts follow best practices</li> <li>Prevent common shell scripting bugs</li> <li>Run as part of the pre-commit hooks and CI/CD pipeline</li> </ol>"},{"location":"technologies/code-analysis/shellcheck-py/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Shellcheck-py is configured in the <code>.pre-commit-config.yaml</code> file:</p> <pre><code>  - repo: https://github.com/shellcheck-py/shellcheck-py\n    rev: v0.9.0.5\n    hooks:\n      - id: shellcheck\n        args: [--severity=warning]\n</code></pre> <p>This configuration:</p> <ul> <li>Runs shellcheck on all shell scripts</li> <li>Reports issues with severity level \"warning\" or higher</li> </ul>"},{"location":"technologies/code-analysis/shellcheck-py/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/code-analysis/shellcheck-py/#running-shellcheck","title":"Running Shellcheck","text":"<p>To run Shellcheck on shell scripts:</p> <pre><code># Run on a specific script\nuv run shellcheck scripts/setup.sh\n\n# Run on all shell scripts in a directory\nuv run shellcheck scripts/*.sh\n</code></pre>"},{"location":"technologies/code-analysis/shellcheck-py/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Specify shell dialect\nuv run shellcheck --shell=bash scripts/setup.sh\n\n# Set minimum severity level\nuv run shellcheck --severity=warning scripts/setup.sh\n\n# Include specific error codes\nuv run shellcheck --include=SC2086,SC2046 scripts/setup.sh\n\n# Exclude specific error codes\nuv run shellcheck --exclude=SC2086,SC2046 scripts/setup.sh\n</code></pre>"},{"location":"technologies/code-analysis/shellcheck-py/#examples","title":"Examples","text":""},{"location":"technologies/code-analysis/shellcheck-py/#common-issues-detected","title":"Common Issues Detected","text":"<pre><code># Double quote to prevent globbing and word splitting\necho $variable  # Warning: SC2086\n\n# Correct version\necho \"$variable\"\n\n# Useless echo with cat\ncat file.txt | grep pattern  # Warning: SC2002\n\n# Correct version\ngrep pattern file.txt\n\n# Command injection vulnerability\neval \"command $user_input\"  # Error: SC2048\n\n# Correct version (still be careful with user input)\neval \"command ${user_input@Q}\"\n</code></pre>"},{"location":"technologies/code-analysis/shellcheck-py/#severity-levels","title":"Severity Levels","text":"<p>Shellcheck uses different severity levels for issues:</p> <ol> <li>Error: Severe issues that are likely to cause incorrect behavior</li> <li>Warning: Issues that may cause problems in certain situations</li> <li>Info: Suggestions for better practices</li> <li>Style: Style recommendations</li> </ol>"},{"location":"technologies/code-analysis/shellcheck-py/#common-error-codes","title":"Common Error Codes","text":"Code Description SC1000s Shell parser issues SC2000s Common shell script issues SC2086 Double quote to prevent globbing and word splitting SC2046 Quote to prevent word splitting/globbing SC2164 Use `cd ... SC2016 Single quotes don't expand variables SC2034 Variable appears unused SC2155 Declare and assign separately for better error handling SC3000s Shell-specific issues (bash, dash, ksh)"},{"location":"technologies/code-analysis/shellcheck-py/#best-practices","title":"Best Practices","text":"<ol> <li>Fix all errors: Address all error-level issues before committing.</li> <li>Review warnings: Most warnings should be fixed unless there's a good reason not to.</li> <li>Use shellcheck directives: Use <code># shellcheck disable=SC2086</code> for intentional exceptions.</li> <li>Document exceptions: When disabling checks, add a comment explaining why.</li> <li>Run regularly: Include shellcheck in your pre-commit hooks.</li> <li>Learn from issues: Use shellcheck as a learning tool to improve your shell scripting skills.</li> </ol>"},{"location":"technologies/code-analysis/shellcheck-py/#resources","title":"Resources","text":"<ul> <li>Shellcheck Documentation</li> <li>Shellcheck-py Repository</li> <li>Shell Scripting Best Practices</li> <li>Common Shell Script Issues</li> </ul>"},{"location":"technologies/code-analysis/vulture/","title":"Vulture - Dead Code Detector","text":"<p>Vulture is a tool that finds unused code in Python programs. It helps you identify and remove dead code, which can improve maintainability, reduce complexity, and decrease the size of your codebase.</p>"},{"location":"technologies/code-analysis/vulture/#overview","title":"Overview","text":"<p>Vulture works by analyzing your Python code and identifying:</p> <ul> <li>Unused classes and functions</li> <li>Unused variables and imports</li> <li>Unreachable code</li> <li>Unused attributes and properties</li> </ul> <p>By detecting and removing dead code, you can:</p> <ul> <li>Improve code maintainability</li> <li>Reduce cognitive load when reading code</li> <li>Decrease the size of your codebase</li> <li>Prevent bugs caused by outdated, unused code</li> </ul>"},{"location":"technologies/code-analysis/vulture/#installation","title":"Installation","text":"<p>Vulture is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install vulture\n</code></pre>"},{"location":"technologies/code-analysis/vulture/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Vulture is used to:</p> <ol> <li>Identify unused code in the codebase</li> <li>Maintain code quality by removing dead code</li> <li>Run as part of the pre-commit hooks and CI/CD pipeline</li> </ol>"},{"location":"technologies/code-analysis/vulture/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Vulture is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.vulture]\nexclude = [\"tests\", \".venv\", \".git\"]\nignore_names = [\"setUp\", \"tearDown\", \"test_*\"]\nmin_confidence = 80\n</code></pre> <p>This configuration:</p> <ul> <li>Excludes test directories and virtual environments from scanning</li> <li>Ignores common test method names</li> <li>Sets a minimum confidence threshold of 80%</li> </ul> <p>Vulture is also configured as a poethepoet task:</p> <pre><code>[tool.poe.tasks]\nvulture = \"vulture src --min-confidence 80\"\n</code></pre>"},{"location":"technologies/code-analysis/vulture/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/code-analysis/vulture/#running-vulture","title":"Running Vulture","text":"<p>To run Vulture on the project:</p> <pre><code># Run via poethepoet\nuv run poe vulture\n\n# Run directly\nuv run vulture src --min-confidence 80\n</code></pre>"},{"location":"technologies/code-analysis/vulture/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Scan a specific file\nuv run vulture path/to/file.py\n\n# Scan a directory\nuv run vulture path/to/directory\n\n# Set minimum confidence threshold\nuv run vulture src --min-confidence 90\n\n# Exclude specific paths\nuv run vulture src --exclude tests/,examples/\n\n# Make paths absolute\nuv run vulture src --make-whitelist\n</code></pre>"},{"location":"technologies/code-analysis/vulture/#understanding-vulture-results","title":"Understanding Vulture Results","text":"<p>Vulture reports unused code with a confidence percentage. The higher the percentage, the more confident Vulture is that the code is unused.</p> <p>Example output:</p> <pre><code>path/to/file.py:10: unused function 'unused_function' (90% confidence)\npath/to/file.py:20: unused variable 'unused_var' (60% confidence)\npath/to/file.py:30: unused import 'unused_import' (90% confidence)\n</code></pre>"},{"location":"technologies/code-analysis/vulture/#handling-false-positives","title":"Handling False Positives","text":"<p>Vulture may report false positives for code that is actually used. There are several ways to handle this:</p>"},{"location":"technologies/code-analysis/vulture/#1-using-whitelists","title":"1. Using Whitelists","text":"<p>Create a whitelist file (e.g., <code>vulture_whitelist.py</code>) with dummy definitions for code that should be ignored:</p> <pre><code># vulture_whitelist.py\nfrom path.to.module import actually_used_function\n\n# This is a false positive, it's actually used via introspection\nactually_used_function = None\n</code></pre> <p>Then run Vulture with the whitelist:</p> <pre><code>uv run vulture src vulture_whitelist.py\n</code></pre>"},{"location":"technologies/code-analysis/vulture/#2-using-inline-comments","title":"2. Using Inline Comments","text":"<p>Add <code># noqa</code> comments to lines that should be ignored:</p> <pre><code>unused_looking_but_actually_used = SomeClass()  # noqa\n</code></pre>"},{"location":"technologies/code-analysis/vulture/#3-adjusting-confidence-threshold","title":"3. Adjusting Confidence Threshold","text":"<p>Lower the confidence threshold to reduce false positives:</p> <pre><code>uv run vulture src --min-confidence 70\n</code></pre>"},{"location":"technologies/code-analysis/vulture/#best-practices","title":"Best Practices","text":"<ol> <li>Run Vulture regularly: Include Vulture in your pre-commit hooks and CI/CD pipeline.</li> <li>Start with a high confidence threshold: Begin with a high threshold (e.g., 90%) and gradually lower it as you clean up obvious dead code.</li> <li>Maintain a whitelist: Keep a whitelist of false positives to avoid repeatedly flagging the same code.</li> <li>Verify before removing: Always verify that code is truly unused before removing it, especially for public APIs.</li> <li>Consider dynamic usage: Remember that code might be used dynamically (e.g., through introspection or imports in rarely-run code paths).</li> </ol>"},{"location":"technologies/code-analysis/vulture/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technologies/code-analysis/vulture/#common-issues","title":"Common Issues","text":""},{"location":"technologies/code-analysis/vulture/#too-many-false-positives","title":"Too Many False Positives","text":"<p>If you're getting too many false positives:</p> <ol> <li>Increase the minimum confidence threshold</li> <li>Add more entries to your whitelist</li> <li>Use more specific exclude patterns</li> </ol>"},{"location":"technologies/code-analysis/vulture/#missing-dead-code","title":"Missing Dead Code","text":"<p>If Vulture is missing dead code:</p> <ol> <li>Ensure you're scanning all relevant directories</li> <li>Lower the confidence threshold</li> <li>Check if the code is being imported or used dynamically</li> </ol>"},{"location":"technologies/code-analysis/vulture/#resources","title":"Resources","text":"<ul> <li>Vulture Documentation</li> <li>Python Dead Code Elimination</li> <li>Code Quality Best Practices</li> </ul>"},{"location":"technologies/code-quality/codespell/","title":"Codespell - Spell Checker","text":"<p>Codespell is a tool that checks for common misspellings in text files. It's designed to catch spelling errors that might be missed by traditional spell checkers, especially in code and documentation.</p>"},{"location":"technologies/code-quality/codespell/#overview","title":"Overview","text":"<p>Codespell helps improve the quality of your codebase by:</p> <ul> <li>Finding and fixing common spelling mistakes</li> <li>Checking multiple file types (Python, Markdown, text, etc.)</li> <li>Supporting custom dictionaries for project-specific terms</li> <li>Integrating with pre-commit hooks for automated checks</li> </ul>"},{"location":"technologies/code-quality/codespell/#installation","title":"Installation","text":"<p>Codespell is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install codespell\n</code></pre>"},{"location":"technologies/code-quality/codespell/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Codespell is used to:</p> <ol> <li>Check for spelling errors in all project files</li> <li>Run automatically as a pre-commit hook</li> <li>Ensure consistent spelling in documentation and code comments</li> </ol>"},{"location":"technologies/code-quality/codespell/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Codespell is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.codespell]\nskip = \"*.json,*.csv,*.pyc,*.min.js,node_modules/*,build/*,dist/*\"\nignore-words-list = \"crate,hist,ro,while\"\n</code></pre> <p>This configuration:</p> <ul> <li>Skips checking certain file types and directories</li> <li>Ignores specific words that might be flagged incorrectly</li> <li>Runs on all other files in the project</li> </ul>"},{"location":"technologies/code-quality/codespell/#basic-usage","title":"Basic Usage","text":"<p>To run Codespell on the project:</p> <pre><code># Run on the entire project\nuv run codespell\n\n# Run on specific files or directories\nuv run codespell src/ docs/ README.md\n</code></pre>"},{"location":"technologies/code-quality/codespell/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Check with a custom dictionary\nuv run codespell --dictionary=./custom_dictionary.txt\n\n# Write corrections directly to files\nuv run codespell --write-changes\n\n# Show only certain types of errors\nuv run codespell --quiet-level=2\n\n# Ignore specific words\nuv run codespell --ignore-words-list=\"crate,hist,ro\"\n</code></pre>"},{"location":"technologies/code-quality/codespell/#detecting-spelling-errors","title":"Detecting Spelling Errors","text":"<p>Here's an example of what codespell output might look like:</p> <pre><code>$ uv run codespell src/\nsrc/module.py:10: definitely -&gt; definitely\nsrc/utils.py:25: receive -&gt; receive\ndocs/README.md:15: occurred -&gt; occurred\n</code></pre>"},{"location":"technologies/code-quality/codespell/#correcting-spelling-errors","title":"Correcting Spelling Errors","text":"<p>Example of checking and correcting:</p> <pre><code># Check and show suggestions without making changes\n$ uv run codespell src/module.py\nsrc/module.py:10: definitely -&gt; definitely\n\n# Apply corrections automatically\n$ uv run codespell --write-changes src/module.py\nsrc/module.py:10: definitely -&gt; definitely\n</code></pre>"},{"location":"technologies/code-quality/codespell/#common-misspellings","title":"Common Misspellings","text":"<p>Here are some common misspellings that Codespell catches:</p> Common Typo Correct Spelling accommodate accommodate achieve achieve address address argument argument believe believe consensus consensus definitely definitely dependency dependency existence existence occurred occurred receive receive separate separate successful successful"},{"location":"technologies/code-quality/codespell/#best-practices","title":"Best Practices","text":"<ol> <li>Run regularly: Include Codespell in your pre-commit hooks</li> <li>Customize for your project: Add project-specific terms to the ignore list</li> <li>Fix spelling errors promptly: Correct spelling errors as soon as they're detected</li> <li>Use with other tools: Combine with other linting tools for comprehensive code quality</li> <li>Update dictionaries: Keep custom dictionaries updated with domain-specific terminology</li> </ol>"},{"location":"technologies/code-quality/codespell/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technologies/code-quality/codespell/#false-positives","title":"False Positives","text":"<p>If Codespell flags words that are actually correct:</p> <ol> <li>Add them to the <code>ignore-words-list</code> in your configuration</li> <li>Create a custom dictionary file with words to ignore</li> </ol>"},{"location":"technologies/code-quality/codespell/#performance-issues","title":"Performance Issues","text":"<p>For large codebases:</p> <ol> <li>Use the <code>skip</code> option to exclude large generated files or binary files</li> <li>Run Codespell only on changed files during development</li> </ol>"},{"location":"technologies/code-quality/codespell/#resources","title":"Resources","text":"<ul> <li>Codespell GitHub Repository</li> <li>Pre-commit Hook Configuration</li> </ul>"},{"location":"technologies/code-quality/commitizen/","title":"Commitizen - Standardized Commit Messages","text":"<p>Commitizen is a tool that helps standardize commit messages following the Conventional Commits specification, making your Git history more readable and useful.</p>"},{"location":"technologies/code-quality/commitizen/#overview","title":"Overview","text":"<p>Commitizen provides a command-line interface that guides you through creating properly formatted commit messages. It helps:</p> <ul> <li>Enforce a consistent commit message format</li> <li>Generate changelogs automatically</li> <li>Simplify semantic versioning</li> <li>Improve collaboration through clear commit intentions</li> <li>Make Git history more readable and useful</li> </ul>"},{"location":"technologies/code-quality/commitizen/#installation","title":"Installation","text":"<p>Commitizen is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install commitizen\n</code></pre>"},{"location":"technologies/code-quality/commitizen/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Commitizen is used to:</p> <ol> <li>Standardize commit messages following the Conventional Commits specification</li> <li>Enforce commit message format through pre-commit hooks</li> <li>Facilitate automatic changelog generation</li> <li>Support semantic versioning</li> </ol>"},{"location":"technologies/code-quality/commitizen/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Commitizen is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.commitizen]\nname = \"cz_conventional_commits\"\nversion = \"0.1.0\"\ntag_format = \"v$version\"\n</code></pre>"},{"location":"technologies/code-quality/commitizen/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/code-quality/commitizen/#creating-a-commit-with-commitizen","title":"Creating a Commit with Commitizen","text":"<p>Instead of using <code>git commit</code> directly, use:</p> <pre><code># Interactive commit creation\nuv run cz commit\n\n# Or the shorter alias\nuv run cz c\n</code></pre> <p>This will guide you through a series of prompts:</p> <ol> <li>Select the type of change (feat, fix, docs, etc.)</li> <li>Enter the scope (optional)</li> <li>Write a short description</li> <li>Provide a longer description (optional)</li> <li>Indicate breaking changes (optional)</li> <li>Reference issues (optional)</li> </ol>"},{"location":"technologies/code-quality/commitizen/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Commit with a message directly\nuv run cz commit -m \"feat: add new feature\"\n\n# Commit all changes\nuv run cz commit -a\n\n# Check if the last commit message follows the convention\nuv run cz check --rev-range HEAD~1..HEAD\n</code></pre>"},{"location":"technologies/code-quality/commitizen/#examples","title":"Examples","text":""},{"location":"technologies/code-quality/commitizen/#conventional-commit-format","title":"Conventional Commit Format","text":"<pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre>"},{"location":"technologies/code-quality/commitizen/#sample-commit-messages","title":"Sample Commit Messages","text":"<pre><code>feat(auth): add OAuth2 authentication\n\nImplement OAuth2 authentication flow with Google and GitHub providers.\n\nBREAKING CHANGE: The previous authentication system is no longer supported.\nRefs: #123\n</code></pre> <pre><code>fix(api): correct response status code for invalid requests\n\nThe API was returning 500 instead of 400 for invalid requests.\n</code></pre> <pre><code>docs: update installation instructions\n\nUpdate installation instructions to include the new uv package manager.\n</code></pre>"},{"location":"technologies/code-quality/commitizen/#best-practices","title":"Best Practices","text":"<ol> <li>Be specific in your commit messages: Clearly describe what changes were made and why.</li> <li>Use appropriate types: Choose the correct type (feat, fix, docs, etc.) for your changes.</li> <li>Include scope when relevant: Specify which part of the codebase was affected.</li> <li>Reference issues: Link commits to related issues or pull requests.</li> <li>Keep descriptions concise: Aim for 50-72 characters in the summary line.</li> <li>Use imperative mood: Write \"add feature\" instead of \"added feature\" or \"adds feature\".</li> </ol>"},{"location":"technologies/code-quality/commitizen/#commit-types","title":"Commit Types","text":"Type Description <code>feat</code> A new feature <code>fix</code> A bug fix <code>docs</code> Documentation changes <code>style</code> Code style changes (formatting, missing semi-colons) <code>refactor</code> Code changes that neither fix bugs nor add features <code>perf</code> Performance improvements <code>test</code> Adding or correcting tests <code>build</code> Changes to build system or dependencies <code>ci</code> Changes to CI configuration <code>chore</code> Other changes that don't modify src or test files"},{"location":"technologies/code-quality/commitizen/#resources","title":"Resources","text":"<ul> <li>Commitizen Documentation</li> <li>Conventional Commits Specification</li> <li>Semantic Versioning</li> </ul>"},{"location":"technologies/code-quality/darglint/","title":"Darglint - Docstring Argument Linter","text":"<p>Darglint is a Python docstring linter that checks whether a docstring's description matches the actual function/method parameters and return values.</p>"},{"location":"technologies/code-quality/darglint/#overview","title":"Overview","text":"<p>Darglint helps ensure that your docstrings accurately reflect your code by:</p> <ul> <li>Verifying that all function parameters are documented</li> <li>Checking that documented parameters actually exist in the function signature</li> <li>Ensuring return values are properly documented</li> <li>Supporting multiple docstring styles (Google, Sphinx, Numpy)</li> <li>Integrating with other linting tools</li> </ul>"},{"location":"technologies/code-quality/darglint/#installation","title":"Installation","text":"<p>Darglint is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install darglint\n</code></pre>"},{"location":"technologies/code-quality/darglint/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Darglint is used to:</p> <ol> <li>Ensure docstrings accurately document function parameters and return values</li> <li>Maintain consistency between code and documentation</li> <li>Run as part of the pre-commit hooks and CI/CD pipeline</li> <li>Improve code quality and maintainability</li> </ol>"},{"location":"technologies/code-quality/darglint/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Darglint is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.darglint]\ndocstring_style = \"google\"\nstrictness = \"short\"\n</code></pre> <p>This configuration specifies:</p> <ul> <li>Using Google-style docstrings</li> <li>\"Short\" strictness level, which requires documenting parameters and return values but is lenient on descriptions</li> </ul>"},{"location":"technologies/code-quality/darglint/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/code-quality/darglint/#running-darglint","title":"Running Darglint","text":"<p>To run Darglint on the project:</p> <pre><code># Run on a specific file\nuv run darglint src/your_module.py\n\n# Run on all Python files in a directory\nuv run darglint src/\n</code></pre>"},{"location":"technologies/code-quality/darglint/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Specify docstring style\nuv run darglint --docstring-style=sphinx src/your_module.py\n\n# Set strictness level\nuv run darglint --strictness=full src/your_module.py\n\n# Enable/disable specific error codes\nuv run darglint --enable=DAR101,DAR102 src/your_module.py\nuv run darglint --disable=DAR003 src/your_module.py\n</code></pre>"},{"location":"technologies/code-quality/darglint/#examples","title":"Examples","text":""},{"location":"technologies/code-quality/darglint/#google-style-docstring-passing","title":"Google-style Docstring (Passing)","text":"<pre><code>def add_numbers(a: int, b: int) -&gt; int:\n    \"\"\"Add two numbers and return the result.\n\n    Args:\n        a: The first number.\n        b: The second number.\n\n    Returns:\n        The sum of a and b.\n    \"\"\"\n    return a + b\n</code></pre>"},{"location":"technologies/code-quality/darglint/#google-style-docstring-failing","title":"Google-style Docstring (Failing)","text":"<pre><code>def add_numbers(a: int, b: int) -&gt; int:\n    \"\"\"Add two numbers and return the result.\n\n    Args:\n        a: The first number.\n        c: This parameter doesn't exist!  # Darglint will flag this\n\n    # Missing documentation for parameter 'b'\n    # Missing Returns section\n    \"\"\"\n    return a + b\n</code></pre>"},{"location":"technologies/code-quality/darglint/#error-codes","title":"Error Codes","text":"Code Description DAR001 Missing parameter in docstring DAR002 Excess parameter in docstring DAR003 Missing return in docstring DAR004 Excess return in docstring DAR101 Missing parameter description in docstring DAR102 Excess parameter description in docstring DAR103 Missing return description in docstring DAR104 Excess return description in docstring DAR201 Missing \"Yields\" in docstring for generator function DAR202 Excess \"Yields\" in docstring for non-generator function DAR301 Missing \"Raises\" in docstring for function that raises DAR302 Excess \"Raises\" in docstring for function that doesn't raise"},{"location":"technologies/code-quality/darglint/#best-practices","title":"Best Practices","text":"<ol> <li>Keep docstrings up to date: Update docstrings whenever you change function signatures.</li> <li>Be consistent with style: Choose one docstring style (Google, Sphinx, or Numpy) and stick with it.</li> <li>Document all parameters: Include descriptions for all function parameters.</li> <li>Document return values: Always specify what your function returns.</li> <li>Document exceptions: Use the \"Raises\" section to document exceptions your function might raise.</li> <li>Run Darglint regularly: Include Darglint in your pre-commit hooks to catch issues early.</li> </ol>"},{"location":"technologies/code-quality/darglint/#resources","title":"Resources","text":"<ul> <li>Darglint Documentation</li> <li>Google Python Style Guide</li> <li>Sphinx Documentation</li> <li>NumPy Docstring Guide</li> </ul>"},{"location":"technologies/code-quality/flynt/","title":"Flynt - String Formatting Converter","text":"<p>Flynt is a tool that automatically converts old-style Python string formatting to f-strings, which are more readable and efficient.</p>"},{"location":"technologies/code-quality/flynt/#overview","title":"Overview","text":"<p>Flynt scans your Python code for string formatting patterns like <code>.format()</code> and <code>%</code> formatting and converts them to modern f-strings. This improves:</p> <ul> <li>Code readability</li> <li>Performance (f-strings are faster)</li> <li>Maintainability</li> </ul>"},{"location":"technologies/code-quality/flynt/#installation","title":"Installation","text":"<p>Flynt is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install flynt\n</code></pre>"},{"location":"technologies/code-quality/flynt/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Flynt is used to:</p> <ol> <li>Automatically convert old-style string formatting to f-strings</li> <li>Maintain consistent string formatting across the codebase</li> <li>Run as part of the pre-commit hooks and CI/CD pipeline</li> </ol>"},{"location":"technologies/code-quality/flynt/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Flynt is configured as a poethepoet task:</p> <pre><code>[tool.poe.tasks]\nflynt = \"flynt --aggressive --fail-on-change --quiet src tests\"\n</code></pre> <p>This configuration:</p> <ul> <li>Uses aggressive mode to convert more string formats</li> <li>Fails if changes are needed (useful for CI)</li> <li>Runs quietly to reduce output noise</li> <li>Targets both src and tests directories</li> </ul>"},{"location":"technologies/code-quality/flynt/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/code-quality/flynt/#running-flynt","title":"Running Flynt","text":"<p>To run Flynt on the project:</p> <pre><code># Run via poethepoet\nuv run poe flynt\n\n# Run directly\nuv run flynt --aggressive src tests\n</code></pre>"},{"location":"technologies/code-quality/flynt/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Convert a specific file\nuv run flynt path/to/file.py\n\n# Show diffs of changes\nuv run flynt --dry-run src\n\n# Transform multiline strings\nuv run flynt --transform-concats src\n\n# Exclude specific files\nuv run flynt --exclude \"*/migrations/*\" src\n</code></pre>"},{"location":"technologies/code-quality/flynt/#examples","title":"Examples","text":""},{"location":"technologies/code-quality/flynt/#before-and-after-examples","title":"Before and After Examples","text":""},{"location":"technologies/code-quality/flynt/#format-style","title":".format() Style","text":"<p>Before:</p> <pre><code>name = \"World\"\ngreeting = \"Hello, {}!\".format(name)\n</code></pre> <p>After:</p> <pre><code>name = \"World\"\ngreeting = f\"Hello, {name}!\"\n</code></pre>"},{"location":"technologies/code-quality/flynt/#style","title":"% Style","text":"<p>Before:</p> <pre><code>name = \"World\"\ngreeting = \"Hello, %s!\" % name\n</code></pre> <p>After:</p> <pre><code>name = \"World\"\ngreeting = f\"Hello, {name}!\"\n</code></pre>"},{"location":"technologies/code-quality/flynt/#best-practices","title":"Best Practices","text":"<ol> <li>Run Flynt regularly: Include Flynt in your pre-commit hooks to ensure consistent string formatting.</li> <li>Use f-strings for new code: Write new code using f-strings directly.</li> <li>Review conversions: Some complex string formatting might need manual review after conversion.</li> <li>Combine with other formatting tools: Use Flynt alongside tools like Ruff for comprehensive code formatting.</li> </ol>"},{"location":"technologies/code-quality/flynt/#resources","title":"Resources","text":"<ul> <li>Flynt Documentation</li> <li>PEP 498 - Literal String Interpolation</li> <li>Python f-strings Guide</li> </ul>"},{"location":"technologies/code-quality/interrogate/","title":"Interrogate - Docstring Coverage Checker","text":"<p>Interrogate is a Python tool that checks your codebase for missing docstrings, helping you maintain comprehensive documentation across your project.</p>"},{"location":"technologies/code-quality/interrogate/#overview","title":"Overview","text":"<p>Interrogate helps improve code documentation by:</p> <ul> <li>Measuring docstring coverage in your codebase</li> <li>Identifying modules, classes, methods, and functions missing docstrings</li> <li>Generating detailed reports on documentation status</li> <li>Supporting various output formats (terminal, badge, etc.)</li> <li>Integrating with CI/CD pipelines and pre-commit hooks</li> <li>Allowing customization through configuration options</li> </ul>"},{"location":"technologies/code-quality/interrogate/#installation","title":"Installation","text":"<p>Interrogate is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install interrogate\n</code></pre>"},{"location":"technologies/code-quality/interrogate/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Interrogate is used to:</p> <ol> <li>Ensure all modules, classes, methods, and functions have docstrings</li> <li>Maintain a high level of documentation coverage</li> <li>Run as part of the pre-commit hooks and CI/CD pipeline</li> <li>Generate coverage reports for documentation quality assessment</li> </ol>"},{"location":"technologies/code-quality/interrogate/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Interrogate is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.interrogate]\nignore-init-method = true                    # (1)\nignore-init-module = true\nignore-magic = true\nignore-semiprivate = true\nignore-private = true\nignore-property-decorators = true\nignore-module = true\nignore-nested-functions = true\nignore-nested-classes = true\nfail-under = 95                              # (2)\nexclude = [\"tests\", \"docs\", \"build\", \"dist\"] # (3)\nverbose = 1\nquiet = false\nwhitelist-regex = []\ncolor = true\n</code></pre> <ol> <li>Ignores special methods that typically don't need docstrings</li> <li>Requires at least 95% docstring coverage to pass</li> <li>Excludes test files, documentation, and build artifacts from analysis</li> </ol> <p>This configuration:</p> <ul> <li>Ignores certain types of methods and modules that typically don't need docstrings</li> <li>Requires at least 95% docstring coverage</li> <li>Excludes test files, documentation, and build artifacts</li> <li>Enables colored output for better readability</li> </ul>"},{"location":"technologies/code-quality/interrogate/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/code-quality/interrogate/#running-interrogate","title":"Running Interrogate","text":"<p>To run Interrogate on the project:</p> Using poe tasks <p><code>bash linenums=\"1\"     # Run via poethepoet     uv run poe docstring-check</code></p> Using direct commands <p>```bash linenums=\"1\" # Run on the entire project uv run interrogate src/</p> <pre><code># Run with detailed output\nuv run interrogate -v src/\n\n# Generate a badge for README\nuv run interrogate -v -b src/\n```\n</code></pre>"},{"location":"technologies/code-quality/interrogate/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Set minimum coverage threshold\nuv run interrogate --fail-under=90 src/\n\n# Exclude specific directories\nuv run interrogate --exclude=\"tests,docs\" src/\n\n# Generate a badge\nuv run interrogate --badge src/\n\n# Output results as JSON\nuv run interrogate --output-format=json src/\n</code></pre>"},{"location":"technologies/code-quality/interrogate/#examples","title":"Examples","text":""},{"location":"technologies/code-quality/interrogate/#terminal-output","title":"Terminal Output","text":"<pre><code>RESULT: PASSED (minimum: 95.0%, actual: 98.7%)\n\nsrc/your_package/__init__.py: 100.0%\nsrc/your_package/module1.py: 100.0%\nsrc/your_package/module2.py: 95.5%\nsrc/your_package/utils.py: 100.0%\n\nTOTAL: 98.7%\n</code></pre>"},{"location":"technologies/code-quality/interrogate/#badge-generation","title":"Badge Generation","text":"<pre><code>$ uv run interrogate -b src/\nRESULT: PASSED (minimum: 95.0%, actual: 98.7%)\nWrote badge to: ./interrogate_badge.svg\n</code></pre>"},{"location":"technologies/code-quality/interrogate/#coverage-levels","title":"Coverage Levels","text":"<p>Interrogate measures docstring coverage at different levels:</p> <ol> <li>Module-level: Docstrings at the top of Python files</li> <li>Class-level: Docstrings for class definitions</li> <li>Method/Function-level: Docstrings for methods and functions</li> <li>Nested-level: Docstrings for nested classes and functions (if configured)</li> </ol>"},{"location":"technologies/code-quality/interrogate/#best-practices","title":"Best Practices","text":"<ol> <li>Write docstrings for all public APIs: Ensure all public classes, methods, and functions have docstrings.</li> <li>Use a consistent docstring style: Follow a standard format like Google, NumPy, or reStructuredText.</li> <li>Include examples in docstrings: Add examples to show how to use the code.</li> <li>Document parameters and return values: Clearly describe inputs and outputs.</li> <li>Set appropriate coverage thresholds: Start with a reasonable threshold and gradually increase it.</li> <li>Run regularly: Include Interrogate in your pre-commit hooks to maintain documentation quality.</li> <li>Add badges to README: Display docstring coverage badges in your project README.</li> </ol>"},{"location":"technologies/code-quality/interrogate/#docstring-formats","title":"Docstring Formats","text":"<p>Interrogate works with any docstring format, including:</p> Google Style <p>```python linenums=\"1\" def function(param1, param2): \"\"\"Summary line. # (1)</p> <pre><code>    Extended description.  # (2)\n\n    Args:  # (3)\n        param1: Description of param1\n        param2: Description of param2\n\n    Returns:  # (4)\n        Description of return value\n    \"\"\"\n    return result\n```\n\n1. Start with a concise summary\n2. Add more details if needed\n3. Document all parameters\n4. Document return values\n</code></pre> NumPy Style <p>```python linenums=\"1\" def function(param1, param2): \"\"\" Summary line.</p> <pre><code>    Extended description.\n\n    Parameters\n    ----------\n    param1 : type\n        Description of param1\n    param2 : type\n        Description of param2\n\n    Returns\n    -------\n    type\n        Description of return value\n    \"\"\"\n    return result\n```\n</code></pre> reStructuredText Style <p>```python linenums=\"1\" def function(param1, param2): \"\"\"Summary line.</p> <pre><code>    Extended description.\n\n    :param param1: Description of param1\n    :param param2: Description of param2\n    :return: Description of return value\n    \"\"\"\n    return result\n```\n</code></pre>"},{"location":"technologies/code-quality/interrogate/#resources","title":"Resources","text":"<ul> <li>Interrogate Documentation</li> <li>PEP 257 - Docstring Conventions</li> <li>Google Python Style Guide - Docstrings</li> <li>NumPy Docstring Guide</li> </ul>"},{"location":"technologies/code-quality/mdformat/","title":"MDFormat - Markdown Formatter","text":"<p>MDFormat is an opinionated Markdown formatter that automatically formats Markdown files to a consistent style, improving readability and maintainability.</p>"},{"location":"technologies/code-quality/mdformat/#overview","title":"Overview","text":"<p>MDFormat helps maintain consistent Markdown formatting by:</p> <ul> <li>Enforcing a consistent style across all Markdown files</li> <li>Automatically fixing formatting issues</li> <li>Supporting various Markdown extensions and flavors</li> <li>Integrating with pre-commit hooks and CI/CD pipelines</li> <li>Providing plugins for additional formatting rules</li> </ul>"},{"location":"technologies/code-quality/mdformat/#installation","title":"Installation","text":"<p>MDFormat is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install mdformat\n</code></pre>"},{"location":"technologies/code-quality/mdformat/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, MDFormat is used to:</p> <ol> <li>Ensure consistent formatting across all Markdown documentation</li> <li>Automatically fix formatting issues in documentation files</li> <li>Run as part of the pre-commit hooks and CI/CD pipeline</li> <li>Maintain professional and readable documentation</li> </ol>"},{"location":"technologies/code-quality/mdformat/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>MDFormat is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.mdformat]\nnumber = true\n</code></pre> <p>This configuration enables automatic numbering of ordered lists.</p>"},{"location":"technologies/code-quality/mdformat/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/code-quality/mdformat/#running-mdformat","title":"Running MDFormat","text":"<p>To run MDFormat on the project:</p> <pre><code># Format a single file\nuv run mdformat docs/README.md\n\n# Format multiple files\nuv run mdformat docs/*.md\n\n# Format and check if files would be changed\nuv run mdformat --check docs/*.md\n</code></pre>"},{"location":"technologies/code-quality/mdformat/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Check files without modifying them\nuv run mdformat --check docs/*.md\n\n# Enable specific plugins\nuv run mdformat --wrap=80 --number docs/README.md\n\n# Format with specific extensions\nuv run mdformat --enable-extensions=tables,footnotes docs/README.md\n</code></pre>"},{"location":"technologies/code-quality/mdformat/#examples","title":"Examples","text":""},{"location":"technologies/code-quality/mdformat/#before-formatting","title":"Before Formatting","text":"<pre><code># My Document\n\nThis is a paragraph with  extra  spaces.\n\n* Unordered list item 1\n* Unordered list item 2\n  * Nested item\n\n1. First item\n1. Second item\n1. Third item\n</code></pre>"},{"location":"technologies/code-quality/mdformat/#after-formatting","title":"After Formatting","text":"<pre><code># My Document\n\nThis is a paragraph with extra spaces.\n\n- Unordered list item 1\n- Unordered list item 2\n  - Nested item\n\n1. First item\n2. Second item\n3. Third item\n</code></pre>"},{"location":"technologies/code-quality/mdformat/#formatting-rules","title":"Formatting Rules","text":"<p>MDFormat applies several formatting rules:</p> <ol> <li>Consistent headings: Uses ATX-style headings (<code>#</code> syntax)</li> <li>List formatting: Standardizes list markers (<code>-</code> for unordered lists)</li> <li>Whitespace: Removes trailing whitespace and ensures consistent spacing</li> <li>Line breaks: Normalizes line breaks</li> <li>List numbering: Correctly numbers ordered lists (when enabled)</li> <li>Table formatting: Aligns table columns (with extensions)</li> <li>Code blocks: Ensures proper fencing for code blocks</li> </ol>"},{"location":"technologies/code-quality/mdformat/#best-practices","title":"Best Practices","text":"<ol> <li>Run MDFormat regularly: Include it in your pre-commit hooks to maintain consistent formatting.</li> <li>Format before committing: Run MDFormat on documentation files before committing changes.</li> <li>Use with other Markdown tools: Combine with Markdown linters for comprehensive documentation quality.</li> <li>Enable relevant extensions: Use extensions that match your Markdown flavor (e.g., GitHub Flavored Markdown).</li> <li>Check formatting in CI: Verify Markdown formatting as part of your CI pipeline.</li> </ol>"},{"location":"technologies/code-quality/mdformat/#resources","title":"Resources","text":"<ul> <li>MDFormat Documentation</li> <li>Markdown Guide</li> <li>GitHub Flavored Markdown Spec</li> <li>CommonMark Spec</li> </ul>"},{"location":"technologies/code-quality/mkinit/","title":"Mkinit - Python <code>__init__.py</code> Generator","text":"<p>Mkinit is a tool that automatically generates or updates <code>__init__.py</code> files for Python packages, making imports cleaner and more maintainable.</p>"},{"location":"technologies/code-quality/mkinit/#overview","title":"Overview","text":"<p>Mkinit scans Python modules in a package and automatically generates appropriate import statements for the <code>__init__.py</code> file. This helps:</p> <ul> <li>Maintain consistent and up-to-date package exports</li> <li>Reduce manual work when adding new modules to a package</li> <li>Ensure proper package structure and imports</li> <li>Simplify import statements for users of your package</li> </ul>"},{"location":"technologies/code-quality/mkinit/#installation","title":"Installation","text":"<p>Mkinit is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install mkinit\n</code></pre>"},{"location":"technologies/code-quality/mkinit/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Mkinit is used to:</p> <ol> <li>Automatically generate and update <code>__init__.py</code> files</li> <li>Ensure consistent package exports</li> <li>Simplify the package structure for users</li> <li>Run as part of the development workflow</li> </ol>"},{"location":"technologies/code-quality/mkinit/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Mkinit is configured as a poethepoet task:</p> <pre><code>[tool.poe.tasks]\nmkinit = \"mkinit\"\n</code></pre>"},{"location":"technologies/code-quality/mkinit/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/code-quality/mkinit/#running-mkinit","title":"Running Mkinit","text":"<p>To run Mkinit on the project:</p> <pre><code># Run via poethepoet\nuv run poe mkinit\n\n# Run directly on a specific package\nuv run mkinit src/your_package\n</code></pre>"},{"location":"technologies/code-quality/mkinit/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Generate __init__.py with explicit imports\nuv run mkinit --nomodo src/your_package\n\n# Generate __init__.py with __all__ statements\nuv run mkinit --all src/your_package\n\n# Specify a custom pattern for modules to include\nuv run mkinit --pattern=\"*.py\" src/your_package\n\n# Dry run (show what would be generated without writing files)\nuv run mkinit --dry src/your_package\n</code></pre>"},{"location":"technologies/code-quality/mkinit/#examples","title":"Examples","text":""},{"location":"technologies/code-quality/mkinit/#generated-__init__py-file","title":"Generated <code>__init__.py</code> File","text":"<p>For a package structure like:</p> <pre><code>src/your_package/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 module1.py\n\u251c\u2500\u2500 module2.py\n\u2514\u2500\u2500 subpackage/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 module3.py\n</code></pre> <p>Mkinit might generate an <code>__init__.py</code> like:</p> <pre><code># -*- coding: utf-8 -*-\n\"\"\"\nPackage: your_package\n\"\"\"\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nfrom your_package import subpackage\nfrom your_package.module1 import Function1, Class1\nfrom your_package.module2 import Function2, Class2\n\n__all__ = [\"subpackage\", \"Function1\", \"Class1\", \"Function2\", \"Class2\"]\n</code></pre>"},{"location":"technologies/code-quality/mkinit/#using-static-imports","title":"Using Static Imports","text":"<p>You can also use Mkinit with static imports:</p> <pre><code># -*- coding: utf-8 -*-\n\"\"\"\nPackage: your_package\n\"\"\"\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\n# &lt;AUTOGEN_INIT&gt;\nfrom your_package import subpackage\nfrom your_package.module1 import Function1, Class1\nfrom your_package.module2 import Function2, Class2\n# &lt;/AUTOGEN_INIT&gt;\n</code></pre>"},{"location":"technologies/code-quality/mkinit/#best-practices","title":"Best Practices","text":"<ol> <li>Run Mkinit after adding new modules: Update your <code>__init__.py</code> files whenever you add new modules or classes.</li> <li>Use with version control: Always commit the generated <code>__init__.py</code> files to your repository.</li> <li>Consider explicit imports: For better IDE support, use explicit imports rather than wildcard imports.</li> <li>Add custom imports: You can add custom imports outside the autogenerated section.</li> <li>Document your package structure: Use the generated <code>__init__.py</code> files as a reference for your package structure.</li> </ol>"},{"location":"technologies/code-quality/mkinit/#resources","title":"Resources","text":"<ul> <li>Mkinit Documentation</li> <li>Python Packaging Guide</li> <li>Import System in Python</li> </ul>"},{"location":"technologies/code-quality/pyupgrade/","title":"Pyupgrade - Python Syntax Upgrader","text":"<p>Pyupgrade is a tool that automatically upgrades your Python syntax to newer versions, helping you take advantage of modern Python features.</p>"},{"location":"technologies/code-quality/pyupgrade/#overview","title":"Overview","text":"<p>Pyupgrade scans your Python code for outdated syntax patterns and upgrades them to use newer Python features. It helps:</p> <ul> <li>Modernize your codebase</li> <li>Improve code readability</li> <li>Take advantage of performance improvements in newer Python syntax</li> <li>Maintain compatibility with specified Python versions</li> </ul>"},{"location":"technologies/code-quality/pyupgrade/#installation","title":"Installation","text":"<p>Pyupgrade is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install pyupgrade\n</code></pre>"},{"location":"technologies/code-quality/pyupgrade/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Pyupgrade is used to:</p> <ol> <li>Automatically upgrade Python syntax to Python 3.11+</li> <li>Maintain modern Python syntax across the codebase</li> <li>Run as part of the pre-commit hooks and CI/CD pipeline</li> </ol>"},{"location":"technologies/code-quality/pyupgrade/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Pyupgrade is configured as a poethepoet task:</p> <pre><code>[tool.poe.tasks]\npyupgrade = \"pyupgrade --py311-plus\"\n</code></pre> <p>This configuration specifies that the code should be upgraded to use Python 3.11+ syntax.</p>"},{"location":"technologies/code-quality/pyupgrade/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/code-quality/pyupgrade/#running-pyupgrade","title":"Running Pyupgrade","text":"<p>To run Pyupgrade on the project:</p> <pre><code># Run via poethepoet\nuv run poe pyupgrade\n\n# Run directly\nuv run pyupgrade --py311-plus src/**/*.py\n</code></pre>"},{"location":"technologies/code-quality/pyupgrade/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Specify Python version\nuv run pyupgrade --py39-plus src/**/*.py\n\n# Keep specific syntax unchanged\nuv run pyupgrade --keep-percent-format src/**/*.py\n\n# Run on specific files\nuv run pyupgrade path/to/file.py\n</code></pre>"},{"location":"technologies/code-quality/pyupgrade/#examples","title":"Examples","text":""},{"location":"technologies/code-quality/pyupgrade/#syntax-upgrades","title":"Syntax Upgrades","text":""},{"location":"technologies/code-quality/pyupgrade/#dictionary-unpacking","title":"Dictionary Unpacking","text":"<p>Before:</p> <pre><code>dict1 = {\"a\": 1, \"b\": 2}\ndict2 = {\"c\": 3, \"d\": 4}\ncombined = dict(list(dict1.items()) + list(dict2.items()))\n</code></pre> <p>After:</p> <pre><code>dict1 = {\"a\": 1, \"b\": 2}\ndict2 = {\"c\": 3, \"d\": 4}\ncombined = {**dict1, **dict2}\n</code></pre>"},{"location":"technologies/code-quality/pyupgrade/#f-strings","title":"f-strings","text":"<p>Before:</p> <pre><code>name = \"World\"\ngreeting = \"Hello, {}!\".format(name)\n</code></pre> <p>After:</p> <pre><code>name = \"World\"\ngreeting = f\"Hello, {name}!\"\n</code></pre>"},{"location":"technologies/code-quality/pyupgrade/#type-annotations","title":"Type Annotations","text":"<p>Before:</p> <pre><code>from typing import List, Dict, Optional\n\nnames: List[str] = [\"Alice\", \"Bob\"]\nages: Dict[str, int] = {\"Alice\": 30, \"Bob\": 25}\nmaybe_name: Optional[str] = None\n</code></pre> <p>After:</p> <pre><code>names: list[str] = [\"Alice\", \"Bob\"]\nages: dict[str, int] = {\"Alice\": 30, \"Bob\": 25}\nmaybe_name: str | None = None\n</code></pre>"},{"location":"technologies/code-quality/pyupgrade/#best-practices","title":"Best Practices","text":"<ol> <li>Run Pyupgrade regularly: Include Pyupgrade in your pre-commit hooks to ensure consistent syntax.</li> <li>Specify the correct Python version: Use the appropriate <code>--pyXX-plus</code> flag for your project's minimum Python version.</li> <li>Combine with other tools: Use Pyupgrade alongside tools like Ruff and Flynt for comprehensive code modernization.</li> <li>Review changes: Some syntax upgrades might change behavior in subtle ways, so review changes carefully.</li> </ol>"},{"location":"technologies/code-quality/pyupgrade/#resources","title":"Resources","text":"<ul> <li>Pyupgrade Documentation</li> <li>Python 3.11 What's New</li> <li>Python Type Hints</li> </ul>"},{"location":"technologies/code-quality/radon/","title":"Radon - Code Complexity Analyzer","text":"<p>Radon is a Python tool that computes various metrics from source code, helping you identify complex, hard-to-maintain code that might need refactoring.</p>"},{"location":"technologies/code-quality/radon/#overview","title":"Overview","text":"<p>Radon helps improve code quality by:</p> <ul> <li>Calculating cyclomatic complexity of functions and methods</li> <li>Computing raw metrics (LOC, SLOC, comments, etc.)</li> <li>Analyzing Halstead metrics for cognitive complexity</li> <li>Measuring maintainability index</li> <li>Identifying code that might be difficult to understand or test</li> <li>Integrating with CI/CD pipelines and pre-commit hooks</li> </ul>"},{"location":"technologies/code-quality/radon/#installation","title":"Installation","text":"<p>Radon is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install radon\n</code></pre>"},{"location":"technologies/code-quality/radon/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Radon is used to:</p> <ol> <li>Identify overly complex functions and methods</li> <li>Maintain reasonable complexity levels across the codebase</li> <li>Run as part of the pre-commit hooks and CI/CD pipeline</li> <li>Guide refactoring efforts to improve code maintainability</li> </ol>"},{"location":"technologies/code-quality/radon/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Radon is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.radon]\nexclude = [\"tests/*\", \"docs/*\", \"build/*\", \"dist/*\"]\n</code></pre> <p>And as a poethepoet task:</p> <pre><code>[tool.poe.tasks]\nradon = \"radon cc src/ -a -nc\"\n</code></pre> <p>This configuration:</p> <ul> <li>Excludes test files, documentation, and build artifacts</li> <li>Analyzes cyclomatic complexity in the src directory</li> <li>Shows complexity for all functions (-a)</li> <li>Uses no color output (-nc) for CI compatibility</li> </ul>"},{"location":"technologies/code-quality/radon/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/code-quality/radon/#running-radon","title":"Running Radon","text":"<p>To run Radon on the project:</p> Using poe tasks <p><code>bash linenums=\"1\"     # Run via poethepoet     uv run poe radon</code></p> Using direct commands <p>```bash linenums=\"1\" # Run cyclomatic complexity analysis directly uv run radon cc src/</p> <pre><code># Run raw metrics analysis\nuv run radon raw src/\n\n# Run maintainability index analysis\nuv run radon mi src/\n\n# Run Halstead metrics analysis\nuv run radon hal src/\n```\n</code></pre>"},{"location":"technologies/code-quality/radon/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Show complexity for all functions (not just those exceeding threshold)\nuv run radon cc -a src/\n\n# Set complexity threshold (A-F)\nuv run radon cc -nc --min=B src/\n\n# Sort by complexity\nuv run radon cc -s src/\n\n# Show average complexity\nuv run radon cc --average src/\n\n# Exclude specific files or directories\nuv run radon cc --exclude \"tests/*,docs/*\" src/\n</code></pre>"},{"location":"technologies/code-quality/radon/#examples","title":"Examples","text":""},{"location":"technologies/code-quality/radon/#cyclomatic-complexity-output","title":"Cyclomatic Complexity Output","text":"<pre><code>src/your_package/module.py\n    F 24:0 complex_function - F (15)\n    C 10:0 ComplexClass - A (5)\n        M 12:4 simple_method - A (1)\n        M 18:4 complex_method - C (7)\n</code></pre>"},{"location":"technologies/code-quality/radon/#maintainability-index-output","title":"Maintainability Index Output","text":"<pre><code>src/your_package/module.py - A (100.00)\nsrc/your_package/complex.py - C (65.32)\n</code></pre>"},{"location":"technologies/code-quality/radon/#complexity-ranks","title":"Complexity Ranks","text":"<p>Radon uses letter grades to rank complexity:</p> Rank Complexity Risk A 1-5 Low - simple block B 6-10 Low - well structured and stable C 11-20 Moderate - slightly complex D 21-30 More than moderate - more complex E 31-40 High - complex, alarming F 41+ Very high - error-prone, unstable"},{"location":"technologies/code-quality/radon/#metrics-explained","title":"Metrics Explained","text":""},{"location":"technologies/code-quality/radon/#cyclomatic-complexity-cc","title":"Cyclomatic Complexity (CC)","text":"<p>Measures the number of linearly independent paths through a program's source code. Higher values indicate more complex code that is harder to test and maintain.</p>"},{"location":"technologies/code-quality/radon/#maintainability-index-mi","title":"Maintainability Index (MI)","text":"<p>A composite metric based on cyclomatic complexity, lines of code, and Halstead volume. Higher values (0-100) indicate more maintainable code.</p>"},{"location":"technologies/code-quality/radon/#raw-metrics","title":"Raw Metrics","text":"<ul> <li>LOC: Lines of Code (total)</li> <li>SLOC: Source Lines of Code (excluding comments and blank lines)</li> <li>LLOC: Logical Lines of Code</li> <li>COMMENTS: Comment Lines</li> <li>MULTI: Multi-line strings</li> <li>BLANK: Blank lines</li> </ul>"},{"location":"technologies/code-quality/radon/#halstead-metrics","title":"Halstead Metrics","text":"<ul> <li>h1: Number of distinct operators</li> <li>h2: Number of distinct operands</li> <li>N1: Total number of operators</li> <li>N2: Total number of operands</li> <li>vocabulary: h1 + h2</li> <li>length: N1 + N2</li> <li>volume: length * log2(vocabulary)</li> <li>difficulty: (h1/2) * (N2/h2)</li> <li>effort: difficulty * volume</li> </ul>"},{"location":"technologies/code-quality/radon/#best-practices","title":"Best Practices","text":"<ol> <li>Keep functions simple: Aim for cyclomatic complexity below 10 (A-B rank).</li> <li>Refactor complex code: Break down functions with high complexity.</li> <li>Write unit tests: Complex functions need thorough testing.</li> <li>Set thresholds in CI: Fail builds if complexity exceeds acceptable levels.</li> <li>Monitor trends: Track complexity metrics over time to prevent degradation.</li> <li>Use with other tools: Combine with tools like Ruff and Xenon for comprehensive quality checks.</li> <li>Focus on hotspots: Prioritize refactoring the most complex parts of your codebase.</li> </ol>"},{"location":"technologies/code-quality/radon/#refactoring-strategies","title":"Refactoring Strategies","text":"<p>When Radon identifies complex code, consider these refactoring strategies:</p> Extract Method <p>```python linenums=\"1\" # Before refactoring def complex_function(data): # Process data processed = [] for item in data: # Complex processing logic (10+ lines) processed.append(result)</p> <pre><code>    # More complex logic (10+ lines)\n    return final_result\n\n# After refactoring\ndef complex_function(data):\n    processed = process_data(data)\n    return calculate_result(processed)\n\ndef process_data(data):\n    processed = []\n    for item in data:\n        # Complex processing logic (10+ lines)\n        processed.append(result)\n    return processed\n\ndef calculate_result(processed):\n    # More complex logic (10+ lines)\n    return final_result\n```\n</code></pre> Replace Conditionals <p>```python linenums=\"1\" # Before refactoring (complex if/else chain) def get_discount(customer_type, order_total): if customer_type == 'regular': if order_total &lt; 100: return 0 elif order_total &lt; 500: return 0.05 else: return 0.1 elif customer_type == 'premium': if order_total &lt; 100: return 0.1 elif order_total &lt; 500: return 0.15 else: return 0.2 else: # new customer if order_total &lt; 100: return 0 elif order_total &lt; 500: return 0.02 else: return 0.05</p> <pre><code># After refactoring (strategy pattern)\ndiscount_rules = {\n    'regular': {\n        'base': 0,\n        'mid': 0.05,\n        'high': 0.1,\n    },\n    'premium': {\n        'base': 0.1,\n        'mid': 0.15,\n        'high': 0.2,\n    },\n    'new': {\n        'base': 0,\n        'mid': 0.02,\n        'high': 0.05,\n    }\n}\n\ndef get_discount(customer_type, order_total):\n    if customer_type not in discount_rules:\n        customer_type = 'new'\n\n    if order_total &lt; 100:\n        tier = 'base'\n    elif order_total &lt; 500:\n        tier = 'mid'\n    else:\n        tier = 'high'\n\n    return discount_rules[customer_type][tier]\n```\n</code></pre>"},{"location":"technologies/code-quality/radon/#resources","title":"Resources","text":"<ul> <li>Radon Documentation</li> <li>Cyclomatic Complexity Explained</li> <li>Halstead Complexity Measures</li> <li>Maintainability Index</li> </ul>"},{"location":"technologies/code-quality/ruff/","title":"Ruff - Fast Python Linter and Formatter","text":"<p>Ruff is an extremely fast Python linter and formatter, written in Rust. It combines the functionality of many Python linting and formatting tools into a single, high-performance package.</p>"},{"location":"technologies/code-quality/ruff/#overview","title":"Overview","text":"<p>Ruff provides:</p> <ul> <li>Linting capabilities similar to flake8, pylint, and many other linters</li> <li>Code formatting similar to black</li> <li>Import sorting similar to isort</li> <li>Automatic code fixes for many issues</li> <li>Extensible rule system with over 700 built-in rules</li> <li>Blazing fast performance (10-100x faster than other tools)</li> </ul>"},{"location":"technologies/code-quality/ruff/#installation","title":"Installation","text":"<p>Ruff is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install ruff\n</code></pre>"},{"location":"technologies/code-quality/ruff/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Ruff is used for:</p> <ol> <li>Linting Python code to catch errors and enforce style</li> <li>Formatting code to maintain consistent style</li> <li>Sorting imports</li> <li>Automatically fixing common issues</li> <li>Running as part of the pre-commit hooks and CI/CD pipeline</li> </ol>"},{"location":"technologies/code-quality/ruff/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Ruff is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.ruff]\nexclude = [\n  \".bzr\",\n  \".direnv\",\n  \".eggs\",\n  \".git\",\n  \".git-rewrite\",\n  \".hg\",\n  \".ipynb_checkpoints\",\n  \".mypy_cache\",\n  \".nox\",\n  \".pants.d\",\n  \".pyenv\",\n  \".pytest_cache\",\n  \".pytype\",\n  \".ruff_cache\",\n  \".svn\",\n  \".tox\",\n  \".venv\",\n  \".vscode\",\n  \"__pypackages__\",\n  \"_build\",\n  \"buck-out\",\n  \"build\",\n  \"dist\",\n  \"node_modules\",\n  \"site-packages\",\n  \"venv\",\n  \"__init__.py\",\n]\n\nfix = true\nline-length = 120\nsrc = [\"src\"]\ntarget-version = \"py311\"\n\n[tool.ruff.format]\ndocstring-code-format = true\ndocstring-code-line-length = \"dynamic\"\nindent-style = \"space\"\nline-ending = \"auto\"\nquote-style = \"double\"\nskip-magic-trailing-comma = false\n\n[tool.ruff.lint]\nextend-ignore = [\n  \"E203\",   # Not PEP8 compliant and black insert space around slice\n  \"E501\",   # Line too long. Disable it to allow long lines of comments\n  \"D401\",   # First line should be in imperative mood\n  \"D203\",   # Removed incompatible rule (keep D211 instead)\n  \"D213\",   # Removed incompatible rule (keep D212 instead)\n  \"COM812\", # Removed rule that may conflict with formatter\n  \"F811\",   # Redefined variable from import\n  \"ISC001\",\n  \"BLE001\",\n  \"PGH\",\n  \"C901\",   # Too complex\n  \"PLR\",\n  \"TRY300\",\n]\nextend-select = [\n  \"ALL\",\n]\n\n[tool.ruff.lint.per-file-ignores]\n\"__init__.py\" = [\"D104\"] # Allow __init__.py stuff\n\"tests/**/*.py\" = [\n  \"S101\",\n  \"ARG001\",\n  \"FBT001\",\n] # Allow assert statements in tests, unused function arguments, and boolean positional arguments\n</code></pre> <p>Ruff is also configured as poethepoet tasks:</p> <pre><code>[tool.poe.tasks]\nruff = \"ruff check\"\nruff-format = \"ruff format\"\n</code></pre>"},{"location":"technologies/code-quality/ruff/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/code-quality/ruff/#running-ruff-linter","title":"Running Ruff Linter","text":"<p>To run Ruff linter on the project:</p> <pre><code># Run via poethepoet\nuv run poe ruff-check\n\n# Run directly\nuv run ruff check\n</code></pre>"},{"location":"technologies/code-quality/ruff/#running-ruff-formatter","title":"Running Ruff Formatter","text":"<p>To format code with Ruff:</p> <pre><code># Run via poethepoet\nuv run poe ruff-format\n\n# Run directly\nuv run ruff format\n</code></pre>"},{"location":"technologies/code-quality/ruff/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Check specific files or directories\nuv run ruff check path/to/file.py\n\n# Format specific files or directories\nuv run ruff format path/to/file.py\n\n# Fix issues automatically\nuv run ruff check --fix\n\n# Show error codes\nuv run ruff check --show-fixes\n\n# Select specific rule categories\nuv run ruff check --select E,F,W\n\n# Ignore specific rule categories\nuv run ruff check --ignore E501,F401\n</code></pre>"},{"location":"technologies/code-quality/ruff/#understanding-ruff-rules","title":"Understanding Ruff Rules","text":"<p>Ruff includes rules from many different linters, each with its own prefix:</p> <ul> <li><code>E</code>, <code>F</code>, <code>W</code>: flake8 errors, fatal errors, and warnings</li> <li><code>I</code>: isort import sorting</li> <li><code>N</code>: pep8-naming</li> <li><code>D</code>: pydocstyle</li> <li><code>UP</code>: pyupgrade</li> <li><code>B</code>: flake8-bugbear</li> <li><code>C</code>: flake8-comprehensions</li> <li><code>SIM</code>: flake8-simplify</li> <li><code>ARG</code>: flake8-unused-arguments</li> <li><code>PTH</code>: flake8-use-pathlib</li> <li><code>ERA</code>: eradicate</li> <li><code>PD</code>: pandas-vet</li> <li><code>PL</code>: Pylint</li> <li><code>TRY</code>: tryceratops</li> <li><code>RUF</code>: Ruff-specific rules</li> </ul> <p>And many more. See the Ruff documentation for a complete list.</p>"},{"location":"technologies/code-quality/ruff/#best-practices","title":"Best Practices","text":"<ol> <li>Run Ruff before committing: Use pre-commit hooks to run Ruff automatically.</li> <li>Use <code>--fix</code> for automatic fixes: Let Ruff fix simple issues automatically.</li> <li>Customize rules for your project: Adjust the rule set to match your project's needs.</li> <li>Use per-file ignores for special cases: Some files may need different rules.</li> <li>Keep configuration in pyproject.toml: Centralize all tool configurations in one file.</li> <li>Update Ruff regularly: Newer versions often include performance improvements and new rules.</li> </ol>"},{"location":"technologies/code-quality/ruff/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technologies/code-quality/ruff/#common-issues","title":"Common Issues","text":""},{"location":"technologies/code-quality/ruff/#too-many-errors","title":"Too Many Errors","text":"<p>If you're getting too many errors when first adding Ruff:</p> <ol> <li>Start with a smaller rule set: <code>--select E,F,W</code></li> <li>Gradually add more rules as you fix issues</li> <li>Use <code>--fix</code> to automatically fix simple issues</li> <li>Add specific ignores for rules that don't apply to your project</li> </ol>"},{"location":"technologies/code-quality/ruff/#conflicts-with-other-tools","title":"Conflicts with Other Tools","text":"<p>If Ruff conflicts with other tools:</p> <ol> <li>Consider replacing the other tools with Ruff</li> <li>Adjust Ruff's configuration to match the other tools</li> <li>Use per-file ignores to handle special cases</li> </ol>"},{"location":"technologies/code-quality/ruff/#performance-issues","title":"Performance Issues","text":"<p>If Ruff is running slowly (which is rare):</p> <ol> <li>Exclude large directories that don't need linting</li> <li>Use a more specific file selection</li> <li>Update to the latest version of Ruff</li> </ol>"},{"location":"technologies/code-quality/ruff/#resources","title":"Resources","text":"<ul> <li>Ruff Documentation</li> <li>Ruff Rules Reference</li> <li>Ruff GitHub Repository</li> <li>Migrating from Other Linters</li> </ul>"},{"location":"technologies/code-quality/xenon/","title":"Xenon - Code Maintainability Checker","text":"<p>Xenon is a Python tool that monitors code complexity using Radon, enforcing thresholds to ensure your codebase remains maintainable.</p>"},{"location":"technologies/code-quality/xenon/#overview","title":"Overview","text":"<p>Xenon helps maintain code quality by:</p> <ul> <li>Enforcing complexity thresholds for your codebase</li> <li>Preventing overly complex code from being merged</li> <li>Monitoring code maintainability over time</li> <li>Integrating with CI/CD pipelines and pre-commit hooks</li> <li>Building on Radon's complexity metrics</li> <li>Providing a simple pass/fail result for automated checks</li> </ul>"},{"location":"technologies/code-quality/xenon/#installation","title":"Installation","text":"<p>Xenon is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install xenon\n</code></pre>"},{"location":"technologies/code-quality/xenon/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Xenon is used to:</p> <ol> <li>Enforce maximum complexity thresholds</li> <li>Prevent code quality degradation over time</li> <li>Run as part of the pre-commit hooks and CI/CD pipeline</li> <li>Ensure maintainable code across the codebase</li> </ol>"},{"location":"technologies/code-quality/xenon/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Xenon is configured as a poethepoet task:</p> <pre><code>[tool.poe.tasks]\nxenon = \"xenon --max-absolute B --max-modules B --max-average A src\"\n</code></pre> <p>This configuration:</p> <ul> <li>Sets maximum absolute complexity to rank B (6-10)</li> <li>Sets maximum module complexity to rank B (6-10)</li> <li>Sets maximum average complexity to rank A (1-5)</li> <li>Analyzes code in the src directory</li> </ul>"},{"location":"technologies/code-quality/xenon/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/code-quality/xenon/#running-xenon","title":"Running Xenon","text":"<p>To run Xenon on the project:</p> Using poe tasks <p><code>bash linenums=\"1\"     # Run via poethepoet     uv run poe xenon</code></p> Using direct commands <p><code>bash linenums=\"1\"     # Run directly with thresholds     uv run xenon --max-absolute B --max-modules B --max-average A src/</code></p>"},{"location":"technologies/code-quality/xenon/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Set maximum absolute complexity (A-F)\nuv run xenon --max-absolute C src/\n\n# Set maximum module complexity (A-F)\nuv run xenon --max-modules C src/\n\n# Set maximum average complexity (A-F)\nuv run xenon --max-average B src/\n\n# Exclude specific files or directories\nuv run xenon --exclude \"tests/*,docs/*\" src/\n\n# Increase verbosity\nuv run xenon -v src/\n</code></pre>"},{"location":"technologies/code-quality/xenon/#examples","title":"Examples","text":""},{"location":"technologies/code-quality/xenon/#passing-check","title":"Passing Check","text":"<pre><code>$ uv run xenon --max-absolute B --max-modules B --max-average A src/\nAbsolute: B (6.0)\nModules: A (3.42)\nAverage: A (3.42)\n\nNo thresholds exceeded\n</code></pre>"},{"location":"technologies/code-quality/xenon/#failing-check","title":"Failing Check","text":"<pre><code>$ uv run xenon --max-absolute B --max-modules B --max-average A src/\nAbsolute: C (12.0)\nModules: B (7.5)\nAverage: A (4.2)\n\nThe following thresholds were exceeded:\n  Absolute complexity: C &gt; B\n</code></pre>"},{"location":"technologies/code-quality/xenon/#complexity-thresholds","title":"Complexity Thresholds","text":"<p>Xenon uses Radon's letter grades to rank complexity:</p> Rank Complexity Risk A 1-5 Low - simple block B 6-10 Low - well structured and stable C 11-20 Moderate - slightly complex D 21-30 More than moderate - more complex E 31-40 High - complex, alarming F 41+ Very high - error-prone, unstable"},{"location":"technologies/code-quality/xenon/#metrics-explained","title":"Metrics Explained","text":"<p>Xenon checks three different complexity metrics:</p> <ol> <li>Absolute Complexity: The highest complexity of any single function or method in the codebase</li> <li>Module Complexity: The highest average complexity of any module in the codebase</li> <li>Average Complexity: The average complexity across all functions and methods in the codebase</li> </ol>"},{"location":"technologies/code-quality/xenon/#best-practices","title":"Best Practices","text":"<ol> <li>Start with reasonable thresholds: Begin with moderate thresholds (C or D) and gradually tighten them.</li> <li>Focus on absolute complexity first: Prioritize fixing the most complex functions.</li> <li>Use with Radon: Use Radon to identify specific complex functions that Xenon flags.</li> <li>Include in CI pipeline: Make Xenon part of your continuous integration checks.</li> <li>Gradually improve thresholds: As you refactor, gradually lower thresholds to prevent regression.</li> <li>Document exceptions: If certain complex functions can't be simplified, document why.</li> <li>Balance strictness with practicality: Very strict thresholds (all A's) might be impractical for some codebases.</li> </ol>"},{"location":"technologies/code-quality/xenon/#integration-with-cicd","title":"Integration with CI/CD","text":""},{"location":"technologies/code-quality/xenon/#github-actions-example","title":"GitHub Actions Example","text":"<pre><code>  - name: Check code complexity\n    run: |\n      uv pip install xenon\n      xenon --max-absolute B --max-modules B --max-average A src/\n</code></pre>"},{"location":"technologies/code-quality/xenon/#pre-commit-hook-example","title":"Pre-commit Hook Example","text":"<pre><code>  - repo: local\n    hooks:\n      - id: xenon\n        name: xenon\n        entry: xenon --max-absolute B --max-modules B --max-average A\n        language: python\n        types: [python]\n        additional_dependencies: [xenon]\n</code></pre>"},{"location":"technologies/code-quality/xenon/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technologies/code-quality/xenon/#common-issues","title":"Common Issues","text":""},{"location":"technologies/code-quality/xenon/#too-strict-thresholds","title":"Too Strict Thresholds","text":"<p>If Xenon consistently fails with your current thresholds:</p> <ol> <li>Use Radon to identify the most complex parts of your code</li> <li>Refactor those parts to reduce complexity</li> <li>If refactoring isn't feasible, consider slightly relaxing thresholds</li> </ol>"},{"location":"technologies/code-quality/xenon/#false-positives","title":"False Positives","text":"<p>Some complex code might be unavoidably complex due to the problem domain:</p> <ol> <li>Consider excluding specific files from analysis</li> <li>Document why the complexity is necessary</li> <li>Ensure complex code is well-tested and documented</li> </ol>"},{"location":"technologies/code-quality/xenon/#resources","title":"Resources","text":"<ul> <li>Xenon Documentation</li> <li>Radon Documentation</li> <li>Cyclomatic Complexity Explained</li> <li>Refactoring Techniques</li> </ul>"},{"location":"technologies/documentation/","title":"Documentation Tools","text":"<p>This section covers the documentation tools used in this project to ensure comprehensive and high-quality documentation.</p>"},{"location":"technologies/documentation/#overview","title":"Overview","text":"<p>Documentation is a critical aspect of any software project. Good documentation helps users understand how to use the software, assists developers in maintaining and extending the codebase, and serves as a reference for future development.</p> <p>This project uses several tools to maintain high-quality documentation:</p> <ol> <li>MkDocs: A fast, simple static site generator for building project documentation</li> <li>MkDocs Material: A modern theme for MkDocs that provides a responsive and feature-rich documentation experience</li> <li>MkDocstrings: A plugin for MkDocs that generates API documentation from Python docstrings</li> </ol>"},{"location":"technologies/documentation/#documentation-structure","title":"Documentation Structure","text":"<p>The documentation for this project is organized as follows:</p> <ul> <li>Getting Started: Instructions for setting up and running the project</li> <li>Architecture: Overview of the project's architecture and design decisions</li> <li>Development: Guidelines for contributing to the project</li> <li>API Reference: Automatically generated API documentation</li> <li>Technologies: Documentation for the various technologies used in the project</li> </ul>"},{"location":"technologies/documentation/#documentation-tools_1","title":"Documentation Tools","text":""},{"location":"technologies/documentation/#content-generation","title":"Content Generation","text":"<ul> <li>MkDocs: Static site generator for building the documentation website</li> <li>MkDocs Material: Theme for MkDocs that provides a modern and responsive design</li> <li>MkDocstrings: Plugin for generating API documentation from docstrings</li> </ul>"},{"location":"technologies/documentation/#code-quality","title":"Code Quality","text":"<ul> <li>Interrogate: Tool for checking docstring coverage in Python code</li> <li>Darglint: Tool for checking that docstrings match the actual function/method signatures</li> <li>MDFormat: Markdown formatter to ensure consistent formatting of documentation files</li> </ul>"},{"location":"technologies/documentation/#best-practices","title":"Best Practices","text":"<ol> <li>Document as you code: Write documentation alongside your code, not as an afterthought</li> <li>Keep documentation up-to-date: Update documentation when code changes</li> <li>Use consistent style: Follow a consistent style throughout the documentation</li> <li>Include examples: Provide examples to illustrate how to use the code</li> <li>Use admonitions for important information: Highlight warnings, notes, and tips</li> <li>Test documentation: Ensure code examples in documentation work as expected</li> <li>Get feedback: Ask others to review your documentation for clarity and completeness</li> </ol>"},{"location":"technologies/documentation/#resources","title":"Resources","text":"<ul> <li>MkDocs Documentation</li> <li>Material for MkDocs Documentation</li> <li>MkDocstrings Documentation</li> <li>Google Python Style Guide - Docstrings</li> </ul>"},{"location":"technologies/documentation/mkdocs/","title":"MkDocs - Documentation Generator","text":"<p>MkDocs is a fast, simple, and beautiful static site generator designed for building project documentation. It uses Markdown files to create a professional documentation website with minimal configuration.</p>"},{"location":"technologies/documentation/mkdocs/#overview","title":"Overview","text":"<p>MkDocs provides the following features:</p> <ul> <li>Simple and intuitive project structure</li> <li>Markdown-based content creation</li> <li>Live preview development server</li> <li>Multiple themes including Material for MkDocs</li> <li>Customizable navigation</li> <li>Full-text search capability</li> <li>Easy deployment to GitHub Pages or other hosting</li> <li>Plugin system for extended functionality</li> <li>Code highlighting</li> <li>Table of contents generation</li> </ul>"},{"location":"technologies/documentation/mkdocs/#installation","title":"Installation","text":"<p>MkDocs is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install mkdocs\n</code></pre>"},{"location":"technologies/documentation/mkdocs/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, MkDocs is used to:</p> <ol> <li>Generate the project documentation website</li> <li>Provide a searchable interface for documentation</li> <li>Organize documentation in a logical structure</li> <li>Enable easy navigation between documentation sections</li> <li>Facilitate documentation updates alongside code changes</li> </ol>"},{"location":"technologies/documentation/mkdocs/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>MkDocs is configured in the <code>mkdocs.yml</code> file at the root of the project:</p> <pre><code>site_name: Python Starting Project\nsite_description: A modern Python project template with best practices\nsite_author: Your Name\nsite_url: https://example.com/\n\ntheme:\n  name: material  # (1)\n  features:\n    - navigation.instant\n    - navigation.tracking\n    - navigation.indexes\n    - navigation.top\n    - search.highlight\n    - search.share\n    - content.code.copy  # (2)\n\nplugins:\n  - search\n  - mkdocstrings:  # (3)\n      handlers:\n        python:\n          options:\n            show_source: true\n\nmarkdown_extensions:  # (4)\n  - pymdownx.highlight\n  - pymdownx.superfences\n  - pymdownx.inlinehilite\n  - pymdownx.tabbed\n  - pymdownx.critic\n  - admonition\n  - toc:\n      permalink: true\n\nnav:\n  - Home: index.md\n  - Getting Started: getting-started.md\n  - Overview: overview.md\n  - Development:\n      - Workflow: development/workflow.md\n      - Pre-commit Hooks: development/pre-commit-hooks.md\n  - Technologies:\n      - Package Management:\n          - UV: technologies/package-management/uv.md\n      - Code Quality:\n          - Ruff: technologies/code-quality/ruff.md\n  - API Reference: api/\n</code></pre> <ol> <li>Material theme provides a modern, responsive design</li> <li>Adds copy buttons to all code blocks</li> <li>MkDocstrings plugin generates API documentation from docstrings</li> <li>Markdown extensions enhance the basic Markdown syntax</li> </ol>"},{"location":"technologies/documentation/mkdocs/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/documentation/mkdocs/#project-structure","title":"Project Structure","text":"<p>A typical MkDocs project structure:</p> <pre><code>my-project/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 getting-started.md\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"technologies/documentation/mkdocs/#running-the-documentation-server","title":"Running the Documentation Server","text":"<p>To preview the documentation locally:</p> Using poe tasks <p>```bash linenums=\"1\" # Start the development server uv run poe docs-serve</p> <pre><code># Build the static site\nuv run poe docs-build\n\n# Deploy to GitHub Pages\nuv run poe docs-deploy\n```\n</code></pre> Using direct commands <p>```bash linenums=\"1\" # Start the development server uv run mkdocs serve</p> <pre><code># Build the static site\nuv run mkdocs build\n\n# Deploy to GitHub Pages\nuv run mkdocs gh-deploy\n```\n</code></pre>"},{"location":"technologies/documentation/mkdocs/#creating-documentation","title":"Creating Documentation","text":""},{"location":"technologies/documentation/mkdocs/#basic-markdown","title":"Basic Markdown","text":"<p>MkDocs uses standard Markdown syntax:</p> <pre><code># Page Title\n\n## Section\n\nThis is a paragraph with **bold** and *italic* text.\n\n- List item 1\n- List item 2\n\n1. Numbered item 1\n2. Numbered item 2\n\n[Link text](https://example.com)\n\n![Image alt text](image.png)\n</code></pre>"},{"location":"technologies/documentation/mkdocs/#code-blocks","title":"Code Blocks","text":"Basic Code Block <p><code>markdown linenums=\"1\"     ```python     def hello_world():         print(\"Hello, world!\")     ```</code></p> With Line Numbers <p><code>markdown linenums=\"1\"     ```python linenums=\"1\"     def hello_world():         print(\"Hello, world!\")     ```</code></p> With Annotations <p>````markdown linenums=\"1\" <code>python     def hello_world():  # (1)         print(\"Hello, world!\")  # (2)</code></p> <pre><code>1. Function definition\n2. Print statement that outputs \"Hello, world!\"\n````\n</code></pre>"},{"location":"technologies/documentation/mkdocs/#admonitions","title":"Admonitions","text":"<pre><code>!!! note \"Custom Title\"\n    This is a note admonition with a custom title.\n\n!!! warning\n    This is a warning admonition.\n\n!!! tip\n    This is a tip admonition.\n</code></pre>"},{"location":"technologies/documentation/mkdocs/#best-practices","title":"Best Practices","text":"<ol> <li>Organize documentation logically: Structure your documentation in a way that makes sense for users.</li> <li>Keep documentation up-to-date: Update documentation when code changes.</li> <li>Use descriptive page titles: Make it easy for users to find what they're looking for.</li> <li>Include examples: Provide code examples and use cases.</li> <li>Use admonitions for important information: Highlight warnings, notes, and tips.</li> <li>Add screenshots when helpful: Visual aids can improve understanding.</li> <li>Maintain a consistent style: Use a consistent writing style throughout.</li> <li>Link related content: Cross-reference related documentation.</li> <li>Test documentation: Ensure code examples work and instructions are accurate.</li> <li>Get feedback: Ask users for feedback on documentation clarity.</li> </ol>"},{"location":"technologies/documentation/mkdocs/#advanced-features","title":"Advanced Features","text":""},{"location":"technologies/documentation/mkdocs/#custom-themes","title":"Custom Themes","text":"<p>Create a custom theme:</p> <pre><code>mkdocs/\n\u251c\u2500\u2500 custom_theme/\n\u2502   \u251c\u2500\u2500 main.html\n\u2502   \u2514\u2500\u2500 css/\n\u2502       \u2514\u2500\u2500 style.css\n</code></pre> <p>Configure in <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  name:\n  custom_dir: mkdocs/custom_theme/\n</code></pre>"},{"location":"technologies/documentation/mkdocs/#plugins","title":"Plugins","text":"<p>Add plugins to extend functionality:</p> <pre><code>plugins:\n  - search\n  - minify:  # (1)\n      minify_html: true\n  - git-revision-date-localized:  # (2)\n      type: date\n</code></pre> <ol> <li>Minifies HTML output for faster loading</li> <li>Adds last updated dates to pages based on git history</li> </ol>"},{"location":"technologies/documentation/mkdocs/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technologies/documentation/mkdocs/#common-issues","title":"Common Issues","text":""},{"location":"technologies/documentation/mkdocs/#navigation-not-updating","title":"Navigation Not Updating","text":"<p>If navigation isn't updating:</p> <ol> <li>Check the <code>nav</code> section in <code>mkdocs.yml</code></li> <li>Ensure file paths are correct</li> <li>Restart the development server</li> </ol>"},{"location":"technologies/documentation/mkdocs/#build-errors","title":"Build Errors","text":"<p>If you encounter build errors:</p> <ol> <li>Check for syntax errors in Markdown files</li> <li>Verify that all linked files exist</li> <li>Check for configuration errors in <code>mkdocs.yml</code></li> </ol>"},{"location":"technologies/documentation/mkdocs/#search-not-working","title":"Search Not Working","text":"<p>If search isn't working:</p> <ol> <li>Ensure the search plugin is enabled</li> <li>Rebuild the documentation</li> <li>Check for JavaScript errors in the browser console</li> </ol>"},{"location":"technologies/documentation/mkdocs/#resources","title":"Resources","text":"<ul> <li>MkDocs Documentation</li> <li>Material for MkDocs</li> <li>Markdown Guide</li> <li>MkDocs Plugins</li> <li>MkDocs Themes</li> </ul>"},{"location":"technologies/documentation/mkdocstrings/","title":"MkDocstrings - API Documentation Generator","text":"<p>MkDocstrings is a powerful MkDocs plugin that automatically generates API documentation from your Python docstrings, enabling seamless integration of code documentation into your project's documentation site.</p>"},{"location":"technologies/documentation/mkdocstrings/#overview","title":"Overview","text":"<p>MkDocstrings enhances your documentation by:</p> <ul> <li>Automatically generating API documentation from docstrings</li> <li>Supporting multiple docstring styles (Google, NumPy, reStructuredText)</li> <li>Providing cross-references between documentation pages</li> <li>Enabling customizable rendering of docstrings</li> <li>Supporting multiple programming languages (primarily Python)</li> <li>Integrating seamlessly with MkDocs and MkDocs Material</li> <li>Reducing documentation maintenance overhead</li> </ul>"},{"location":"technologies/documentation/mkdocstrings/#installation","title":"Installation","text":"<p>MkDocstrings is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install mkdocstrings[python]\n</code></pre>"},{"location":"technologies/documentation/mkdocstrings/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, MkDocstrings is used to:</p> <ol> <li>Generate comprehensive API documentation from Python docstrings</li> <li>Maintain consistency between code and documentation</li> <li>Provide detailed function, class, and module documentation</li> <li>Reduce manual documentation effort</li> <li>Ensure documentation stays up-to-date with code changes</li> </ol>"},{"location":"technologies/documentation/mkdocstrings/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>MkDocstrings is configured in the <code>mkdocs.yml</code> file:</p> <pre><code>plugins:\n  - mkdocstrings:\n      handlers:\n        python:\n          options:\n            show_source: true\n            show_bases: true\n            show_signature: true\n            heading_level: 2\n            docstring_style: google\n            docstring_section_style: spacy\n            members_order: source\n            show_category_heading: true\n            show_if_no_docstring: false\n</code></pre> <ol> <li>Enables the MkDocstrings plugin</li> <li>Configures the Python handler</li> <li>Shows source code in documentation</li> <li>Uses Google-style docstrings</li> </ol>"},{"location":"technologies/documentation/mkdocstrings/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/documentation/mkdocstrings/#documenting-code","title":"Documenting Code","text":"<p>Write docstrings in your Python code:</p> <pre><code>def calculate_area(length: float, width: float) -&gt; float:\n    \"\"\"Calculate the area of a rectangle.\n\n    Args:\n        length: The length of the rectangle.\n        width: The width of the rectangle.\n\n    Returns:\n        The area of the rectangle.\n\n    Raises:\n        ValueError: If length or width is negative.\n    \"\"\"\n    if length &lt; 0 or width &lt; 0:\n        raise ValueError(\"Length and width must be positive\")\n    return length * width\n</code></pre> <ol> <li>Function signature with type hints</li> <li>Short description of the function</li> <li>Documentation of parameters</li> <li>Documentation of return value</li> <li>Documentation of exceptions</li> </ol>"},{"location":"technologies/documentation/mkdocstrings/#referencing-in-markdown","title":"Referencing in Markdown","text":"<p>Reference your code in Markdown files:</p> <pre><code># API Reference\n\n::: my_module.calculate_area\n</code></pre> <ol> <li>This directive tells MkDocstrings to generate documentation for the <code>calculate_area</code> function</li> </ol>"},{"location":"technologies/documentation/mkdocstrings/#docstring-styles","title":"Docstring Styles","text":"Google Style (Default) <p>```python linenums=\"1\" def function(param1, param2): \"\"\"Summary line.</p> <pre><code>    Extended description.\n\n    Args:\n        param1: Description of param1.\n        param2: Description of param2.\n\n    Returns:\n        Description of return value.\n\n    Raises:\n        ValueError: If something goes wrong.\n    \"\"\"\n```\n</code></pre> NumPy Style <p>```python linenums=\"1\" def function(param1, param2): \"\"\"Summary line.</p> <pre><code>    Extended description.\n\n    Parameters\n    ----------\n    param1 : type\n        Description of param1.\n    param2 : type\n        Description of param2.\n\n    Returns\n    -------\n    type\n        Description of return value.\n\n    Raises\n    ------\n    ValueError\n        If something goes wrong.\n    \"\"\"\n```\n</code></pre> reStructuredText Style <p>```python linenums=\"1\" def function(param1, param2): \"\"\"Summary line.</p> <pre><code>    Extended description.\n\n    :param param1: Description of param1.\n    :type param1: type\n    :param param2: Description of param2.\n    :type param2: type\n    :returns: Description of return value.\n    :rtype: type\n    :raises ValueError: If something goes wrong.\n    \"\"\"\n```\n</code></pre>"},{"location":"technologies/documentation/mkdocstrings/#advanced-features","title":"Advanced Features","text":""},{"location":"technologies/documentation/mkdocstrings/#cross-references","title":"Cross-References","text":"<p>Link to other documented objects:</p> <pre><code>See the [`calculate_area`][my_module.calculate_area] function for more details.\n</code></pre> <ol> <li>Creates a link to the documentation for the <code>calculate_area</code> function</li> </ol>"},{"location":"technologies/documentation/mkdocstrings/#custom-selection","title":"Custom Selection","text":"<p>Select specific members to document:</p> <pre><code>::: my_module.MyClass\n    selection:\n      members:\n        - method_a\n        - method_b\n</code></pre> <ol> <li>Only documents the specified methods</li> </ol>"},{"location":"technologies/documentation/mkdocstrings/#customizing-display","title":"Customizing Display","text":"<p>Customize the rendering of documentation:</p> <pre><code>::: my_module.MyClass\n    options:\n      show_source: false\n      show_bases: false\n      heading_level: 3\n</code></pre> <ol> <li>Overrides the global options for this specific class</li> </ol>"},{"location":"technologies/documentation/mkdocstrings/#best-practices","title":"Best Practices","text":"<ol> <li>Be consistent with docstring style: Choose one style (Google, NumPy, or reStructuredText) and use it consistently.</li> <li>Document all public APIs: Ensure all public functions, classes, and methods have docstrings.</li> <li>Include type hints: Use type hints in your code to enhance documentation.</li> <li>Document parameters and return values: Always document parameters, return values, and exceptions.</li> <li>Keep docstrings up-to-date: Update docstrings when code changes.</li> <li>Use examples: Include examples in docstrings for complex functions.</li> <li>Be concise but complete: Provide enough information without being overly verbose.</li> <li>Use cross-references: Link to related documentation when appropriate.</li> </ol>"},{"location":"technologies/documentation/mkdocstrings/#integration-with-type-hints","title":"Integration with Type Hints","text":"<p>MkDocstrings works well with type hints:</p> <pre><code>from typing import List, Dict, Optional\n\n\ndef process_data(data: List[Dict[str, str]], filter_key: Optional[str] = None) -&gt; Dict[str, int]:\n    \"\"\"Process the input data.\n\n    Args:\n        data: A list of dictionaries to process.\n        filter_key: Optional key to filter results.\n\n    Returns:\n        A dictionary with processed results.\n    \"\"\"\n</code></pre> <ol> <li>Import type annotations from the typing module</li> <li>Parameter with complex type annotation</li> <li>Optional parameter with default value and return type annotation</li> </ol>"},{"location":"technologies/documentation/mkdocstrings/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technologies/documentation/mkdocstrings/#common-issues","title":"Common Issues","text":""},{"location":"technologies/documentation/mkdocstrings/#missing-documentation","title":"Missing Documentation","text":"<p>If documentation is not appearing:</p> <ol> <li>Check that the import path is correct</li> <li>Verify that the module is importable from where MkDocs is run</li> <li>Ensure the docstrings are properly formatted</li> </ol>"},{"location":"technologies/documentation/mkdocstrings/#formatting-issues","title":"Formatting Issues","text":"<p>If docstrings aren't rendering correctly:</p> <ol> <li>Check that the docstring style in the configuration matches your code</li> <li>Verify indentation in docstrings</li> <li>Ensure all sections are properly formatted</li> </ol>"},{"location":"technologies/documentation/mkdocstrings/#import-errors","title":"Import Errors","text":"<p>If you encounter import errors:</p> <ol> <li>Make sure your package is installed in the environment where MkDocs runs</li> <li>Check for circular imports</li> <li>Consider using the <code>watch</code> option to monitor for changes</li> </ol>"},{"location":"technologies/documentation/mkdocstrings/#resources","title":"Resources","text":"<ul> <li>MkDocstrings Documentation</li> <li>Google Python Style Guide</li> <li>NumPy Docstring Guide</li> <li>reStructuredText Primer</li> <li>Python Type Hints</li> </ul>"},{"location":"technologies/package-management/hatchling/","title":"Hatchling - Modern Python Build System","text":"<p>Hatchling is a modern, extensible build backend for Python projects. It's designed to be a replacement for setuptools, offering a more modern and flexible approach to building Python packages.</p>"},{"location":"technologies/package-management/hatchling/#overview","title":"Overview","text":"<p>Hatchling is the build backend for the Hatch project management tool, but it can be used independently. It provides:</p> <ul> <li>A modern build system for Python packages</li> <li>Support for dynamic metadata</li> <li>Plugin system for extending functionality</li> <li>PEP 517/518 compliance</li> </ul>"},{"location":"technologies/package-management/hatchling/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Hatchling is used as the build backend for creating distributable packages. It's configured in the <code>pyproject.toml</code> file:</p> <pre><code>[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n</code></pre> <p>The project also configures Hatchling's wheel builder:</p> <pre><code>[tool.hatch.build.targets.wheel]\npackages = [\"src\", \"tests\"]\n</code></pre> <p>This configuration ensures that both the <code>src</code> and <code>tests</code> directories are included in the built wheel.</p>"},{"location":"technologies/package-management/hatchling/#building-packages","title":"Building Packages","text":"<p>To build packages using Hatchling:</p> <pre><code># Build a wheel\nuv run python -m build --wheel\n\n# Build both wheel and sdist\nuv run python -m build\n</code></pre>"},{"location":"technologies/package-management/hatchling/#configuration-options","title":"Configuration Options","text":"<p>Hatchling offers many configuration options in <code>pyproject.toml</code>:</p>"},{"location":"technologies/package-management/hatchling/#basic-project-metadata","title":"Basic Project Metadata","text":"<pre><code>[project]\nname = \"project-name\"\nversion = \"0.1.0\"\ndescription = \"Project description\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.11\"\nlicense = { text = \"MIT\" }\nauthors = [\n  { name = \"Your Name\", email = \"your.email@example.com\" },\n]\n</code></pre>"},{"location":"technologies/package-management/hatchling/#dependencies","title":"Dependencies","text":"<pre><code>[project]\ndependencies = [\n  \"dependency1&gt;=1.0.0\",\n  \"dependency2&gt;=2.0.0\",\n]\n\n[project.optional-dependencies]\ndev = [\n  \"pytest&gt;=7.0.0\",\n  \"black&gt;=23.0.0\",\n]\n</code></pre>"},{"location":"technologies/package-management/hatchling/#entry-points","title":"Entry Points","text":"<pre><code>[project.scripts]\ncommand-name = \"package.module:function\"\n\n[project.gui-scripts]\ngui-command = \"package.module:function\"\n\n[project.entry-points.\"package.plugins\"]\nplugin-name = \"package.module:function\"\n</code></pre>"},{"location":"technologies/package-management/hatchling/#build-configuration","title":"Build Configuration","text":"<pre><code>[tool.hatch.build]\nexclude = [\n  \"tests/\",\n  \"docs/\",\n]\n\n[tool.hatch.build.targets.wheel]\npackages = [\"src\"]\n</code></pre>"},{"location":"technologies/package-management/hatchling/#best-practices","title":"Best Practices","text":"<ol> <li>Use <code>src</code> directory structure: This keeps your package code separate from project files.</li> <li>Specify Python version requirements: Use <code>requires-python</code> to ensure compatibility.</li> <li>Include comprehensive metadata: Provide complete project information for better PyPI presentation.</li> <li>Use dynamic versioning when appropriate: Hatchling supports various versioning schemes.</li> </ol>"},{"location":"technologies/package-management/hatchling/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technologies/package-management/hatchling/#common-issues","title":"Common Issues","text":""},{"location":"technologies/package-management/hatchling/#build-fails-with-missing-dependencies","title":"Build Fails with Missing Dependencies","text":"<p>If the build fails due to missing dependencies:</p> <pre><code># Install build dependencies\nuv pip install build hatchling\n\n# Try building again\nuv run python -m build\n</code></pre>"},{"location":"technologies/package-management/hatchling/#package-missing-files","title":"Package Missing Files","text":"<p>If the built package is missing files:</p> <ol> <li>Check the <code>[tool.hatch.build.targets.wheel]</code> section</li> <li>Ensure all necessary directories are included</li> <li>Check for exclude patterns that might be too broad</li> </ol>"},{"location":"technologies/package-management/hatchling/#resources","title":"Resources","text":"<ul> <li>Hatchling Documentation</li> <li>Python Packaging User Guide</li> <li>PEP 517 - Build System Interface</li> <li>PEP 518 - Build System Requirements</li> </ul>"},{"location":"technologies/package-management/uv/","title":"UV - Fast Python Package Installer and Resolver","text":"<p>UV is a modern, fast Python package installer and resolver written in Rust, designed to be a drop-in replacement for pip and other Python package management tools.</p>"},{"location":"technologies/package-management/uv/#overview","title":"Overview","text":"<p>UV helps manage Python dependencies by:</p> <ul> <li>Providing extremely fast package installation and resolution</li> <li>Supporting virtual environments</li> <li>Offering compatibility with pip, pip-tools, and other Python packaging tools</li> <li>Resolving dependencies efficiently with a modern resolver</li> <li>Supporting lockfiles for reproducible environments</li> <li>Integrating with Python's packaging ecosystem</li> <li>Working with both PyPI and private package repositories</li> </ul>"},{"location":"technologies/package-management/uv/#installation","title":"Installation","text":"<p>UV is a core tool in this project and should be installed globally:</p> <pre><code># Install UV globally\ncurl -sSf https://astral.sh/uv/install.sh | sh\n\n# Verify installation\nuv --version\n</code></pre>"},{"location":"technologies/package-management/uv/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, UV is used to:</p> <ol> <li>Manage project dependencies</li> <li>Create and update virtual environments</li> <li>Run Python scripts and commands in the project's environment</li> <li>Execute development tools and test runners</li> <li>Ensure reproducible builds with dependency pinning</li> </ol>"},{"location":"technologies/package-management/uv/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>UV uses the standard <code>pyproject.toml</code> file for dependency management:</p> <pre><code>[project]\ndependencies = [\n  \"pydantic&gt;=2.0.0\",\n  \"pydantic-settings&gt;=2.0.0\",\n  \"lazy-loader&gt;=0.3\",\n]\n\n[project.optional-dependencies]\ndev = [\n  \"pytest&gt;=7.0.0\",\n  \"pytest-cov&gt;=4.1.0\",\n  \"ruff&gt;=0.1.0\",\n  # Other development dependencies\n]\n</code></pre>"},{"location":"technologies/package-management/uv/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/package-management/uv/#managing-dependencies","title":"Managing Dependencies","text":"<pre><code># Install all dependencies (including development)\nuv sync --dev\n\n# Install only production dependencies\nuv sync\n\n# Add a new dependency\nuv add requests\n\n# Add a development dependency\nuv add --dev pytest\n\n# Update dependencies\nuv sync --upgrade\n</code></pre>"},{"location":"technologies/package-management/uv/#working-with-virtual-environments","title":"Working with Virtual Environments","text":"<pre><code># Create a virtual environment\nuv venv\n\n# Activate the virtual environment (bash/zsh)\nsource .venv/bin/activate\n\n# Activate the virtual environment (Windows PowerShell)\n.venv\\Scripts\\Activate.ps1\n</code></pre>"},{"location":"technologies/package-management/uv/#running-commands","title":"Running Commands","text":"<pre><code># Run a Python script\nuv run python script.py\n\n# Run a command from an installed package\nuv run pytest\n\n# Run with specific Python version\nuv run --python=python3.11 pytest\n</code></pre>"},{"location":"technologies/package-management/uv/#examples","title":"Examples","text":""},{"location":"technologies/package-management/uv/#installing-dependencies","title":"Installing Dependencies","text":"<pre><code># Fresh install of all dependencies\n$ uv sync --dev\n\u2713 Created virtual environment at .venv!\n\u2713 Successfully installed 42 packages in 1.2s\n</code></pre>"},{"location":"technologies/package-management/uv/#running-pre-commit-hooks","title":"Running Pre-commit Hooks","text":"<pre><code># Install pre-commit hooks\n$ uv run pre-commit install\npre-commit installed at .git/hooks/pre-commit\n\n# Run pre-commit hooks on all files\n$ uv run pre-commit run --all-files\nRuff............................................................Passed\nPyright.........................................................Passed\n</code></pre>"},{"location":"technologies/package-management/uv/#executing-tests","title":"Executing Tests","text":"<pre><code># Run tests with pytest\n$ uv run pytest\n============================= test session starts ==============================\nplatform linux -- Python 3.11.0, pytest-7.3.1, pluggy-1.0.0\nrootdir: /path/to/project\ncollected 42 items\n\ntests/test_module1.py ..........................................  [100%]\n\n============================== 42 passed in 1.2s ===============================\n</code></pre>"},{"location":"technologies/package-management/uv/#performance-comparison","title":"Performance Comparison","text":"<p>UV significantly outperforms traditional Python package managers:</p> Operation pip pip-tools UV Fresh install (42 packages) 12.5s 10.2s 1.2s Dependency resolution 8.3s 5.1s 0.3s No-op reinstall 2.1s 1.8s 0.1s"},{"location":"technologies/package-management/uv/#best-practices","title":"Best Practices","text":"<ol> <li>Use <code>uv sync</code> for installation: Prefer <code>uv sync</code> over manual pip commands to ensure consistent environments.</li> <li>Include <code>--dev</code> for development: Always use <code>--dev</code> when working on the project to install development tools.</li> <li>Commit lockfiles: If using lockfiles, commit them to ensure reproducible builds.</li> <li>Use <code>uv run</code> for tools: Run installed tools with <code>uv run</code> to ensure they use the project's environment.</li> <li>Keep UV updated: Regularly update UV to benefit from performance improvements and bug fixes.</li> <li>Use virtual environments: Always work within a virtual environment to isolate project dependencies.</li> <li>Specify version constraints: Use appropriate version constraints in <code>pyproject.toml</code> to avoid unexpected updates.</li> </ol>"},{"location":"technologies/package-management/uv/#common-commands","title":"Common Commands","text":"Command Description <code>uv sync</code> Install dependencies from pyproject.toml <code>uv sync --dev</code> Install dependencies including development dependencies <code>uv sync --upgrade</code> Upgrade all dependencies to their latest versions <code>uv add package</code> Add a new dependency <code>uv add --dev package</code> Add a new development dependency <code>uv run command</code> Run a command in the project's environment <code>uv pip install package</code> Install a package (pip-compatible interface) <code>uv venv</code> Create a virtual environment"},{"location":"technologies/package-management/uv/#resources","title":"Resources","text":"<ul> <li>UV Documentation</li> <li>Python Packaging User Guide</li> <li>PEP 621 - Storing project metadata in pyproject.toml</li> <li>Astral Documentation</li> </ul>"},{"location":"technologies/project-structure/hatchling/","title":"Hatchling - Modern Python Project Build Backend","text":"<p>Hatchling is a modern, extensible build backend for Python projects that simplifies packaging, building, and distribution while providing powerful customization options.</p>"},{"location":"technologies/project-structure/hatchling/#overview","title":"Overview","text":"<p>Hatchling helps manage Python project builds by:</p> <ul> <li>Providing a modern, standards-compliant build system</li> <li>Supporting dynamic version management</li> <li>Offering a plugin system for customization</li> <li>Enabling metadata customization</li> <li>Supporting various project structures</li> <li>Integrating with the Python packaging ecosystem</li> <li>Working seamlessly with other tools like pip, uv, and PyPI</li> </ul>"},{"location":"technologies/project-structure/hatchling/#installation","title":"Installation","text":"<p>Hatchling is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install hatchling\n</code></pre>"},{"location":"technologies/project-structure/hatchling/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Hatchling is used to:</p> <ol> <li>Define the project's build system</li> <li>Manage package metadata</li> <li>Handle version information</li> <li>Configure package discovery and inclusion</li> <li>Support the build and distribution process</li> </ol>"},{"location":"technologies/project-structure/hatchling/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Hatchling is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"your-package-name\"\nversion = \"0.1.0\"\ndescription = \"Your package description\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.11\"\nlicense = { text = \"MIT\" }\nauthors = [\n  { name = \"Your Name\", email = \"your.email@example.com\" },\n]\ndependencies = [\n  # List of dependencies\n]\n\n[tool.hatch.build.targets.wheel]\npackages = [\"src/your_package\"]\n</code></pre>"},{"location":"technologies/project-structure/hatchling/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/project-structure/hatchling/#building-a-package","title":"Building a Package","text":"<p>To build a package using Hatchling:</p> <pre><code># Build a wheel\nuv run hatch build\n\n# Build a source distribution\nuv run hatch build --target sdist\n\n# Build both wheel and sdist\nuv run hatch build --target wheel --target sdist\n</code></pre>"},{"location":"technologies/project-structure/hatchling/#publishing-a-package","title":"Publishing a Package","text":"<pre><code># Build and publish to PyPI\nuv run hatch publish\n\n# Build and publish to TestPyPI\nuv run hatch publish --repo test\n</code></pre>"},{"location":"technologies/project-structure/hatchling/#examples","title":"Examples","text":""},{"location":"technologies/project-structure/hatchling/#dynamic-version-management","title":"Dynamic Version Management","text":"<pre><code>[tool.hatch.version]\npath = \"src/your_package/__about__.py\"\n</code></pre> <p>With <code>__about__.py</code> containing:</p> <pre><code>__version__ = \"0.1.0\"\n</code></pre>"},{"location":"technologies/project-structure/hatchling/#custom-package-discovery","title":"Custom Package Discovery","text":"<pre><code>[tool.hatch.build.targets.wheel]\npackages = [\"src/your_package\"]\n</code></pre>"},{"location":"technologies/project-structure/hatchling/#conditional-dependencies","title":"Conditional Dependencies","text":"<pre><code>[project.optional-dependencies]\ndev = [\n  \"pytest&gt;=7.0.0\",\n  \"pytest-cov&gt;=4.1.0\",\n]\ndocs = [\n  \"mkdocs&gt;=1.4.0\",\n  \"mkdocs-material&gt;=9.0.0\",\n]\n</code></pre>"},{"location":"technologies/project-structure/hatchling/#build-process","title":"Build Process","text":"<p>When you run <code>hatch build</code>, Hatchling performs these steps:</p> <ol> <li>Configuration Loading: Reads the <code>pyproject.toml</code> file</li> <li>Version Resolution: Determines the package version</li> <li>Metadata Preparation: Prepares package metadata</li> <li>Source Processing: Processes source files according to configuration</li> <li>Build Execution: Creates the distribution packages (wheel, sdist)</li> <li>Artifact Generation: Outputs the final distribution files</li> </ol>"},{"location":"technologies/project-structure/hatchling/#best-practices","title":"Best Practices","text":"<ol> <li>Use src layout: Place your package code in a <code>src</code> directory for cleaner separation.</li> <li>Specify Python version: Always set the <code>requires-python</code> field to ensure compatibility.</li> <li>Include a README: Provide a README.md file for PyPI display.</li> <li>Manage versions properly: Use a single source of truth for version information.</li> <li>Define optional dependencies: Group dependencies logically using optional-dependencies.</li> <li>Include license information: Always specify license information in your project metadata.</li> <li>Use dynamic metadata: Take advantage of Hatchling's dynamic metadata capabilities for complex projects.</li> </ol>"},{"location":"technologies/project-structure/hatchling/#advanced-features","title":"Advanced Features","text":""},{"location":"technologies/project-structure/hatchling/#environment-markers","title":"Environment Markers","text":"<pre><code>[project]\ndependencies = [\n  \"importlib-metadata&gt;=4.6; python_version &lt; '3.10'\",\n  \"tomli&gt;=2.0.0; python_version &lt; '3.11'\",\n]\n</code></pre>"},{"location":"technologies/project-structure/hatchling/#hooks-and-plugins","title":"Hooks and Plugins","text":"<pre><code>[tool.hatch.build.hooks.custom]\npath = \"build_hooks.py\"\n</code></pre> <p>With a custom hook in <code>build_hooks.py</code>:</p> <pre><code>def hook(version, build_data, artifacts):\n    # Custom build logic here\n    return artifacts\n</code></pre>"},{"location":"technologies/project-structure/hatchling/#resources","title":"Resources","text":"<ul> <li>Hatchling Documentation</li> <li>Python Packaging User Guide</li> <li>PEP 621 - Storing project metadata in pyproject.toml</li> <li>PyPI Publishing Guide</li> </ul>"},{"location":"technologies/project-structure/lazy-loader/","title":"Lazy-Loader - Deferred Module Loading for Python","text":"<p>Lazy-Loader is a utility that enables lazy loading of Python modules, improving startup time and reducing memory usage by only importing modules when they are actually needed.</p>"},{"location":"technologies/project-structure/lazy-loader/#overview","title":"Overview","text":"<p>Lazy-Loader helps optimize Python applications by:</p> <ul> <li>Deferring module imports until they are actually used</li> <li>Reducing application startup time</li> <li>Decreasing memory usage for unused modules</li> <li>Maintaining the same API as regular imports</li> <li>Supporting both package-level and module-level lazy loading</li> <li>Working with type checkers and IDEs</li> </ul>"},{"location":"technologies/project-structure/lazy-loader/#installation","title":"Installation","text":"<p>Lazy-Loader is included as a dependency:</p> <pre><code># Install with other dependencies\nuv sync\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install lazy-loader\n</code></pre>"},{"location":"technologies/project-structure/lazy-loader/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Lazy-Loader is used to:</p> <ol> <li>Optimize import times for large dependencies</li> <li>Reduce memory usage by only loading modules when needed</li> <li>Maintain clean imports in the codebase</li> <li>Improve application startup performance</li> </ol>"},{"location":"technologies/project-structure/lazy-loader/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Lazy-Loader is typically used in <code>__init__.py</code> files to lazily load submodules:</p> <pre><code># src/your_package/__init__.py\nfrom lazy_loader import lazy_loader\n\n# Set up lazy loading for submodules\n__getattr__, __dir__, __all__ = lazy_loader.attach(__name__, [\"module1\", \"module2\", \"module3\"])\n</code></pre>"},{"location":"technologies/project-structure/lazy-loader/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/project-structure/lazy-loader/#lazy-loading-modules","title":"Lazy Loading Modules","text":"<pre><code># In your package's __init__.py\nfrom lazy_loader import lazy_loader\n\n__getattr__, __dir__, __all__ = lazy_loader.attach(__name__, [\"heavy_module\", \"rarely_used_module\"])\n</code></pre>"},{"location":"technologies/project-structure/lazy-loader/#lazy-loading-with-explicit-exports","title":"Lazy Loading with Explicit Exports","text":"<pre><code># In your package's __init__.py\nfrom lazy_loader import lazy_loader\n\n__getattr__, __dir__, __all__ = lazy_loader.attach(\n    __name__,\n    {\n        \"heavy_module\": [\"Class1\", \"function1\"],\n        \"rarely_used_module\": [\"Class2\", \"function2\"],\n    },\n)\n</code></pre>"},{"location":"technologies/project-structure/lazy-loader/#examples","title":"Examples","text":""},{"location":"technologies/project-structure/lazy-loader/#basic-package-structure","title":"Basic Package Structure","text":"<pre><code>src/your_package/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 core.py\n\u251c\u2500\u2500 heavy_module.py\n\u2514\u2500\u2500 rarely_used_module.py\n</code></pre>"},{"location":"technologies/project-structure/lazy-loader/#implementation-in-__init__py","title":"Implementation in <code>__init__.py</code>","text":"<pre><code># src/your_package/__init__.py\n\"\"\"Your package description.\"\"\"\n\nfrom lazy_loader import lazy_loader\n\n# Import core functionality directly (not lazy)\nfrom .core import main_function, CoreClass\n\n# Set up lazy loading for heavier modules\n__getattr__, __dir__, __all__ = lazy_loader.attach(__name__, [\"heavy_module\", \"rarely_used_module\"])\n\n# Add directly imported items to __all__\n__all__ += [\"main_function\", \"CoreClass\"]\n</code></pre>"},{"location":"technologies/project-structure/lazy-loader/#using-the-lazy-loaded-modules","title":"Using the Lazy-Loaded Modules","text":"<pre><code># This import doesn't actually load heavy_module yet\nimport your_package\n\n# Core functionality is already loaded\nyour_package.main_function()\n\n# This will trigger the actual import of heavy_module\nresult = your_package.heavy_module.heavy_function()\n</code></pre>"},{"location":"technologies/project-structure/lazy-loader/#performance-benefits","title":"Performance Benefits","text":"<p>Lazy loading can significantly improve startup time and memory usage:</p> Scenario Without Lazy Loading With Lazy Loading Startup Time 500ms 150ms Memory Usage 100MB 40MB First Access Immediate Slight delay"},{"location":"technologies/project-structure/lazy-loader/#best-practices","title":"Best Practices","text":"<ol> <li>Use for heavy dependencies: Apply lazy loading to modules with heavy dependencies or resource usage.</li> <li>Keep core functionality direct: Import frequently used core functionality directly.</li> <li>Document lazy-loaded modules: Make it clear which modules are lazy-loaded.</li> <li>Consider import time: Be aware that the first access to a lazy-loaded module will have a slight delay.</li> <li>Test thoroughly: Ensure lazy loading doesn't introduce unexpected behavior.</li> <li>Use with type annotations: Add type annotations to help IDEs and type checkers understand lazy-loaded modules.</li> </ol>"},{"location":"technologies/project-structure/lazy-loader/#advanced-usage","title":"Advanced Usage","text":""},{"location":"technologies/project-structure/lazy-loader/#type-checking-support","title":"Type Checking Support","text":"<pre><code># src/your_package/__init__.py\nfrom lazy_loader import lazy_loader\n\n# For type checking\nif TYPE_CHECKING:\n    from .heavy_module import HeavyClass, heavy_function\n\n# Set up lazy loading\n__getattr__, __dir__, __all__ = lazy_loader.attach(__name__, [\"heavy_module\"])\n</code></pre>"},{"location":"technologies/project-structure/lazy-loader/#selective-lazy-loading","title":"Selective Lazy Loading","text":"<pre><code># src/your_package/__init__.py\nfrom lazy_loader import lazy_loader\n\n# Import some things directly\nfrom .core import main_function\n\n# Lazy load specific attributes from modules\n__getattr__, __dir__, __all__ = lazy_loader.attach(\n    __name__,\n    {\n        \"heavy_module\": [\"HeavyClass\", \"heavy_function\"],\n        \"rarely_used_module\": [\"RarelyUsedClass\"],\n    },\n)\n</code></pre>"},{"location":"technologies/project-structure/lazy-loader/#resources","title":"Resources","text":"<ul> <li>Lazy-Loader Documentation</li> <li>Python Import System</li> <li>PEP 562 \u2013 Module getattr and dir</li> <li>Python Performance Tips</li> </ul>"},{"location":"technologies/project-structure/mkinit/","title":"Mkinit - Automatic init.py Generator","text":"<p>Mkinit is a Python tool that automatically generates <code>__init__.py</code> files for Python packages, making it easier to maintain imports and exports.</p>"},{"location":"technologies/project-structure/mkinit/#overview","title":"Overview","text":"<p>Mkinit scans Python modules in a package and automatically generates appropriate import statements for the <code>__init__.py</code> file. This ensures that all modules and their exports are properly exposed at the package level.</p> <p>Key features:</p> <ul> <li>Automatic generation of <code>__init__.py</code> files</li> <li>Support for lazy loading with lazy_loader</li> <li>Generation of typed stub files (<code>.pyi</code>)</li> <li>Recursive scanning of nested packages</li> <li>Customizable import formatting</li> </ul>"},{"location":"technologies/project-structure/mkinit/#installation","title":"Installation","text":"<p>Mkinit is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install mkinit\n</code></pre>"},{"location":"technologies/project-structure/mkinit/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, mkinit is used to automatically generate and maintain <code>__init__.py</code> files for both the <code>src</code> and <code>tests</code> directories. This ensures that all modules are properly exposed and can be imported from the package root.</p> <p>The project configures mkinit to use lazy loading with typed stubs, which improves import performance while maintaining type checking support.</p>"},{"location":"technologies/project-structure/mkinit/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Mkinit is configured as a poethepoet task in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.poe.tasks]\nmkinit = { sequence = [\"mkinit-src\", \"mkinit-tests\"] }\nmkinit-src = { cmd = \"mkinit src --relative --lazy_loader_typed --black --recursive -w\" }\nmkinit-tests = { cmd = \"mkinit tests --relative --lazy_loader_typed --black --recursive -w\" }\n</code></pre> <p>This configuration:</p> <ul> <li>Uses relative imports (<code>--relative</code>)</li> <li>Generates typed lazy loading stubs (<code>--lazy_loader_typed</code>)</li> <li>Formats the output with Black (<code>--black</code>)</li> <li>Recursively processes nested packages (<code>--recursive</code>)</li> <li>Writes the changes to the files (<code>-w</code>)</li> </ul>"},{"location":"technologies/project-structure/mkinit/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/project-structure/mkinit/#generating-initpy-files","title":"Generating init.py Files","text":"<p>To generate <code>__init__.py</code> files for the project:</p> <pre><code># Generate for both src and tests\nuv run poe mkinit\n\n# Generate only for src\nuv run poe mkinit-src\n\n# Generate only for tests\nuv run poe mkinit-tests\n</code></pre>"},{"location":"technologies/project-structure/mkinit/#manual-usage","title":"Manual Usage","text":"<p>You can also run mkinit manually for specific directories:</p> <pre><code># Generate for a specific directory\nuv run mkinit path/to/package --relative --recursive -w\n\n# Generate with lazy loading\nuv run mkinit path/to/package --lazy_loader -w\n\n# Generate with typed lazy loading\nuv run mkinit path/to/package --lazy_loader_typed -w\n\n# Preview changes without writing\nuv run mkinit path/to/package\n</code></pre>"},{"location":"technologies/project-structure/mkinit/#common-options","title":"Common Options","text":"<p>Mkinit supports several command-line options:</p> <ul> <li><code>--relative</code>: Use relative imports instead of absolute imports</li> <li><code>--recursive</code>: Process subdirectories recursively</li> <li><code>--lazy_loader</code>: Generate lazy loading imports</li> <li><code>--lazy_loader_typed</code>: Generate typed lazy loading imports</li> <li><code>--black</code>: Format the output with Black</li> <li><code>-w, --write</code>: Write changes to the files (otherwise just preview)</li> <li><code>--diff</code>: Show a diff of the changes</li> <li><code>--nomodify</code>: Don't modify existing imports</li> <li><code>--nomods</code>: Don't add import statements for modules</li> </ul>"},{"location":"technologies/project-structure/mkinit/#best-practices","title":"Best Practices","text":"<ol> <li>Run mkinit after adding new modules: Whenever you add a new module to the project, run mkinit to update the <code>__init__.py</code> files.</li> <li>Use version control: Always commit <code>__init__.py</code> files to version control after generating them.</li> <li>Include in pre-commit hooks: Consider adding mkinit to your pre-commit hooks to ensure <code>__init__.py</code> files are always up to date.</li> <li>Use with lazy loading: Combine mkinit with lazy loading for optimal import performance.</li> </ol>"},{"location":"technologies/project-structure/mkinit/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technologies/project-structure/mkinit/#common-issues","title":"Common Issues","text":""},{"location":"technologies/project-structure/mkinit/#circular-imports","title":"Circular Imports","text":"<p>If you encounter circular import errors:</p> <ol> <li>Restructure your code to avoid circular dependencies</li> <li>Use lazy loading to break circular dependencies</li> <li>Use conditional imports inside functions</li> </ol>"},{"location":"technologies/project-structure/mkinit/#missing-exports","title":"Missing Exports","text":"<p>If some exports are missing from the generated <code>__init__.py</code>:</p> <ol> <li>Ensure the exports are properly defined in the module</li> <li>Check that the module is in the correct directory</li> <li>Run mkinit with the <code>--verbose</code> flag to see what's being processed</li> </ol>"},{"location":"technologies/project-structure/mkinit/#resources","title":"Resources","text":"<ul> <li>Mkinit Documentation</li> <li>Lazy Loading in Python</li> <li>Python Package Structure Best Practices</li> </ul>"},{"location":"technologies/project-structure/pydantic-settings/","title":"Pydantic-Settings - Settings Management for Python","text":"<p>Pydantic-Settings is a library that provides a settings management system using Pydantic models, allowing for type-safe configuration with validation, environment variable support, and more.</p>"},{"location":"technologies/project-structure/pydantic-settings/#overview","title":"Overview","text":"<p>Pydantic-Settings helps manage application configuration by:</p> <ul> <li>Providing type validation for settings</li> <li>Supporting multiple configuration sources (env vars, .env files, etc.)</li> <li>Offering nested settings models</li> <li>Enabling environment-specific configurations</li> <li>Validating configuration values</li> <li>Supporting secrets management</li> <li>Integrating seamlessly with Pydantic</li> </ul>"},{"location":"technologies/project-structure/pydantic-settings/#installation","title":"Installation","text":"<p>Pydantic-Settings is included as a dependency:</p> <pre><code># Install with other dependencies\nuv sync\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install pydantic-settings\n</code></pre>"},{"location":"technologies/project-structure/pydantic-settings/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Pydantic-Settings is used to:</p> <ol> <li>Define and validate application configuration</li> <li>Load settings from environment variables</li> <li>Provide type-safe access to configuration values</li> <li>Support different environments (development, testing, production)</li> </ol>"},{"location":"technologies/project-structure/pydantic-settings/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Pydantic-Settings is typically used in a settings module:</p> <pre><code># src/utils/settings.py\nfrom pathlib import Path\nfrom typing import Any\n\nfrom pydantic import Field\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass Settings(BaseSettings):\n    \"\"\"Application settings.\n\n    Provides a centralized configuration for the application with environment variable support.\n    \"\"\"\n\n    APP_NAME: str = Field(\n        default=\"Python Starting Project\",\n        description=\"The name of the application.\",\n    )\n    APP_VERSION: str = Field(\n        default=\"0.1.0\",\n        description=\"The version of the application.\",\n    )\n    DEBUG: bool = Field(\n        default=False,\n        description=\"Enable or disable debug mode.\",\n    )\n    LOG_LEVEL: str = Field(\n        default=\"INFO\",\n        description=\"The logging level.\",\n    )\n    LOG_FORMAT: str = Field(\n        default=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        description=\"The log message format.\",\n    )\n    LOG_FILE: str = Field(\n        default=\"logs/app.log\",\n        description=\"Path to the log file.\",\n    )\n\n    # Paths\n    BASE_DIR: Path = Field(\n        default_factory=lambda: Path(__file__),\n        description=\"Base directory of the application.\",\n    )\n    LOG_DIR: Path = Field(\n        default_factory=lambda: Path(\"logs\"),\n        description=\"Directory for log files.\",\n    )\n\n    # Configuration source tracking\n    env_file_found: bool = Field(\n        default=False,\n        description=\"Indicates whether a .env file was found during initialization.\",\n    )\n\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"ignore\",\n    )\n\n\n# Create a global settings instance\nsettings = Settings()\n</code></pre>"},{"location":"technologies/project-structure/pydantic-settings/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/project-structure/pydantic-settings/#defining-settings","title":"Defining Settings","text":"<pre><code>from pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass AppSettings(BaseSettings):\n    model_config = SettingsConfigDict(env_file=\".env\", env_prefix=\"APP_\")\n\n    # Settings with types and default values\n    debug: bool = False\n    port: int = 8000\n    api_key: str\n    max_connections: int = 100\n</code></pre>"},{"location":"technologies/project-structure/pydantic-settings/#using-settings","title":"Using Settings","text":"<pre><code># Import the settings instance\nfrom src.utils.settings import settings\n\n# Access settings with type safety\nif settings.DEBUG:\n    print(f\"Running in debug mode with log level {settings.LOG_LEVEL}\")\n\n# Use in application code\nlogger.info(\"Starting %s v%s\", settings.APP_NAME, settings.APP_VERSION)\n</code></pre>"},{"location":"technologies/project-structure/pydantic-settings/#environment-specific-settings","title":"Environment-Specific Settings","text":"<pre><code>from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    environment: str = \"development\"\n\n    @property\n    def is_development(self) -&gt; bool:\n        return self.environment == \"development\"\n\n    @property\n    def is_production(self) -&gt; bool:\n        return self.environment == \"production\"\n</code></pre>"},{"location":"technologies/project-structure/pydantic-settings/#environment-variable-override-behavior","title":"Environment Variable Override Behavior","text":"<p>In Pydantic-Settings, environment variables always take precedence over values in the <code>.env</code> file. This means that if a setting is defined both as an environment variable and in the <code>.env</code> file, the value from the environment variable will be used.</p> <p>For example, if your <code>.env</code> file contains:</p> <pre><code>LOG_LEVEL=DEBUG\n</code></pre> <p>But you have an environment variable set:</p> <pre><code>LOG_LEVEL=INFO\n</code></pre> <p>The <code>LOG_LEVEL</code> setting will be <code>INFO</code>.</p> <p>Pydantic settings consider the <code>extra</code> config in the case of dotenv files. If you set <code>extra=forbid</code> (the default) on <code>model_config</code> and your dotenv file contains an entry for a field that is not defined in the settings model, it will raise a <code>ValidationError</code>. For compatibility with Pydantic v1, you should use <code>extra=ignore</code>:</p> <pre><code>model_config = SettingsConfigDict(\n    env_file=\".env\",\n    env_file_encoding=\"utf-8\",\n    extra=\"ignore\",\n)\n</code></pre>"},{"location":"technologies/project-structure/pydantic-settings/#field-value-priority","title":"Field Value Priority","text":"<p>In the case where a value is specified for the same <code>Settings</code> field in multiple ways, the selected value is determined as follows (in descending order of priority):</p> <ol> <li>If <code>cli_parse_args</code> is enabled, arguments passed in at the CLI</li> <li>Arguments passed to the <code>Settings</code> class initializer</li> <li>Environment variables</li> <li>Variables loaded from a dotenv (<code>.env</code>) file</li> <li>Variables loaded from the secrets directory</li> <li>Default field values for the <code>Settings</code> model</li> </ol> <p>This priority order ensures that values can be overridden in a predictable way, with more explicit sources (like CLI arguments and initializer arguments) taking precedence over less explicit ones (like environment variables and dotenv files).</p>"},{"location":"technologies/project-structure/pydantic-settings/#multiple-dotenv-files","title":"Multiple Dotenv Files","text":"<p>If you need to load multiple dotenv files, you can pass multiple file paths as a tuple or list. The files will be loaded in order, with each file overriding the previous one:</p> <pre><code>model_config = SettingsConfigDict(\n    # `.env.prod` takes priority over `.env`\n    env_file=(\".env\", \".env.prod\")\n)\n</code></pre> <p>This is useful for having a base configuration in one file and environment-specific overrides in another.</p>"},{"location":"technologies/project-structure/pydantic-settings/#examples","title":"Examples","text":""},{"location":"technologies/project-structure/pydantic-settings/#environment-variables","title":"Environment Variables","text":"<pre><code># Our settings support environment variables without a prefix\n# For example, with these environment variables:\nAPP_NAME = \"Environment App\"\nAPP_VERSION = \"2.0.0\"\nDEBUG = true\nLOG_LEVEL = \"DEBUG\"\n\n# The settings would be:\nsettings = Settings()\nassert settings.APP_NAME == \"Environment App\"\nassert settings.APP_VERSION == \"2.0.0\"\nassert settings.DEBUG is True\nassert settings.LOG_LEVEL == \"DEBUG\"\n</code></pre>"},{"location":"technologies/project-structure/pydantic-settings/#nested-settings","title":"Nested Settings","text":"<pre><code>from pydantic import BaseModel\nfrom pydantic_settings import BaseSettings\n\n\nclass DatabaseSettings(BaseModel):\n    host: str = \"localhost\"\n    port: int = 5432\n    user: str = \"user\"\n    password: str = \"password\"\n    name: str = \"database\"\n\n\nclass AppSettings(BaseSettings):\n    debug: bool = False\n    database: DatabaseSettings = DatabaseSettings()\n</code></pre>"},{"location":"technologies/project-structure/pydantic-settings/#best-practices","title":"Best Practices","text":"<ol> <li>Use environment variables: Store configuration in environment variables, especially for secrets.</li> <li>Provide defaults: Set sensible default values for non-sensitive settings.</li> <li>Use validation: Take advantage of Pydantic's validation to ensure settings are correct.</li> <li>Separate concerns: Split settings into logical groups using nested models.</li> <li>Document settings: Add docstrings to explain what each setting does.</li> <li>Use computed properties: Add properties for derived values to keep settings DRY.</li> <li>Keep secrets secure: Never hardcode sensitive information; use environment variables or secret management tools.</li> </ol>"},{"location":"technologies/project-structure/pydantic-settings/#advanced-features","title":"Advanced Features","text":""},{"location":"technologies/project-structure/pydantic-settings/#field-customization","title":"Field Customization","text":"<pre><code>from pydantic import Field\nfrom pydantic_settings import BaseSettings\nfrom pathlib import Path\n\n\nclass Settings(BaseSettings):\n    # Simple field with description\n    APP_NAME: str = Field(\n        default=\"Python Starting Project\",\n        description=\"The name of the application.\",\n    )\n\n    # Boolean field\n    DEBUG: bool = Field(\n        default=False,\n        description=\"Enable or disable debug mode.\",\n    )\n\n    # Field with complex default using default_factory\n    LOG_DIR: Path = Field(\n        default_factory=lambda: Path(\"logs\"),\n        description=\"Directory for log files.\",\n    )\n</code></pre>"},{"location":"technologies/project-structure/pydantic-settings/#cli-support","title":"CLI Support","text":"<p>Pydantic-Settings v2 provides integrated CLI support, making it easy to define CLI applications using Pydantic models. There are two primary use cases:</p> <ol> <li>Using a CLI to override fields in Pydantic models</li> <li>Using Pydantic models to define CLIs</li> </ol> <p>To enable CLI parsing, set the <code>cli_parse_args</code> flag in the model configuration:</p> <pre><code>from pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass Settings(BaseSettings):\n    model_config = SettingsConfigDict(cli_parse_args=True)\n\n    debug: bool = False\n    port: int = 8000\n</code></pre> <p>This allows you to override settings via command-line arguments:</p> <pre><code>python app.py --debug=true --port=9000\n</code></pre> <p>CLI arguments have the highest priority in the field value resolution order, taking precedence over all other sources.</p>"},{"location":"technologies/project-structure/pydantic-settings/#customizing-settings-sources","title":"Customizing Settings Sources","text":"<p>If the default order of priority doesn't match your needs, you can change it by overriding the <code>settings_customise_sources</code> method of your <code>Settings</code> class:</p> <pre><code>from typing import Tuple, Type\nfrom pydantic_settings import BaseSettings, PydanticBaseSettingsSource\n\n\nclass Settings(BaseSettings):\n    # Your settings fields here...\n\n    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: Type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -&gt; Tuple[PydanticBaseSettingsSource, ...]:\n        # Change the order of sources (first has highest priority)\n        return env_settings, init_settings, dotenv_settings, file_secret_settings\n</code></pre> <p>This example changes the priority order so that environment variables take precedence over initializer arguments.</p> <p>You can also add your own custom sources or remove existing ones by modifying the returned tuple.</p>"},{"location":"technologies/project-structure/pydantic-settings/#resources","title":"Resources","text":"<ul> <li>Pydantic-Settings Documentation</li> <li>Pydantic Documentation</li> <li>12-Factor App Configuration</li> <li>Environment Variables Best Practices</li> </ul>"},{"location":"technologies/task-running/poethepoet/","title":"Poethepoet - Python Task Runner","text":"<p>Poethepoet (poe) is a task runner that allows you to define and run tasks in your Python project. It's similar to npm scripts for JavaScript projects, but designed specifically for Python.</p>"},{"location":"technologies/task-running/poethepoet/#overview","title":"Overview","text":"<p>Poethepoet provides:</p> <ul> <li>A simple way to define project tasks</li> <li>Integration with pyproject.toml</li> <li>Support for task dependencies and sequences</li> <li>Command-line arguments for tasks</li> <li>Environment variable configuration</li> <li>Cross-platform compatibility</li> </ul>"},{"location":"technologies/task-running/poethepoet/#installation","title":"Installation","text":"<p>Poethepoet is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install poethepoet\n</code></pre>"},{"location":"technologies/task-running/poethepoet/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Poethepoet is used to:</p> <ol> <li>Define common development tasks</li> <li>Run linters and formatters</li> <li>Execute tests</li> <li>Build documentation</li> <li>Generate code</li> <li>Provide a consistent interface for various tools</li> </ol>"},{"location":"technologies/task-running/poethepoet/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Poethepoet is configured in the <code>pyproject.toml</code> file under the <code>[tool.poe.tasks]</code> section:</p> <pre><code>[tool.poe.tasks]\nflynt = \"flynt --aggressive --fail-on-change --quiet src tests\"\nlint = { sequence = [\"pyupgrade\", \"flynt\", \"pyright\", \"ruff\", \"ruff-format\"] }\nmkdocs = { cmd = \"mkdocs build\" }\nmkdocs-serve = { cmd = \"mkdocs serve\" }\nmkinit = { sequence = [\"mkinit-src\", \"mkinit-tests\"] }\nmkinit-src = { cmd = \"mkinit src --relative --lazy_loader_typed --black --recursive -w\" }\nmkinit-tests = { cmd = \"mkinit tests --relative --lazy_loader_typed --black --recursive -w\" }\npre = \"pre-commit run --all-files --show-diff-on-failure --verbose\"\npre-commit = \"pre-commit run --all-files\"\npyright = \"pyright\"\npyupgrade = \"pyupgrade --py311-plus\"\nradon = \"radon cc src --min C --total-average\"\nruff = \"ruff check\"\nruff-format = \"ruff format\"\nbandit = \"bandit -c pyproject.toml -r src --exclude tests,.venv,.git\"\ninterrogate = \"interrogate -v src\"\ntest-coverage = \"pytest -xvs -n auto --cov=src --cov-report=xml --cov-fail-under=80 --ignore=tests\"\nvulture = \"vulture src --min-confidence 80\"\nxenon = \"xenon src\"\n</code></pre>"},{"location":"technologies/task-running/poethepoet/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/task-running/poethepoet/#running-tasks","title":"Running Tasks","text":"<p>To run a Poethepoet task:</p> <pre><code># Run via uv\nuv run poe task-name\n\n# Run directly (if poethepoet is installed globally or in the env)\npoe task-name\n</code></pre>"},{"location":"technologies/task-running/poethepoet/#common-tasks","title":"Common Tasks","text":"<pre><code># Run linters\npoe lint\n\n# Run tests with coverage\npoe test-coverage\n\n# Build documentation\npoe mkdocs\n\n# Serve documentation locally\npoe mkdocs-serve\n\n# Run pre-commit hooks\npoe pre-commit\n\n# Generate __init__.py files\npoe mkinit\n</code></pre>"},{"location":"technologies/task-running/poethepoet/#task-types","title":"Task Types","text":"<p>Poethepoet supports several types of tasks:</p>"},{"location":"technologies/task-running/poethepoet/#simple-command-tasks","title":"Simple Command Tasks","text":"<pre><code>task-name = \"command --with --options\"\n</code></pre>"},{"location":"technologies/task-running/poethepoet/#command-tasks-with-options","title":"Command Tasks with Options","text":"<pre><code>task-name = { cmd = \"command --with --options\" }\n</code></pre>"},{"location":"technologies/task-running/poethepoet/#sequence-tasks","title":"Sequence Tasks","text":"<pre><code>task-name = { sequence = [\"task1\", \"task2\", \"task3\"] }\n</code></pre>"},{"location":"technologies/task-running/poethepoet/#script-tasks","title":"Script Tasks","text":"<pre><code>task-name = { script = \"python_module:function_name\" }\n</code></pre>"},{"location":"technologies/task-running/poethepoet/#shell-tasks","title":"Shell Tasks","text":"<pre><code>task-name = { shell = \"echo 'Running in a shell'\" }\n</code></pre>"},{"location":"technologies/task-running/poethepoet/#advanced-features","title":"Advanced Features","text":""},{"location":"technologies/task-running/poethepoet/#task-dependencies","title":"Task Dependencies","text":"<p>You can define tasks that depend on other tasks:</p> <pre><code>lint = { sequence = [\"pyupgrade\", \"flynt\", \"pyright\", \"ruff\", \"ruff-format\"] }\n</code></pre>"},{"location":"technologies/task-running/poethepoet/#task-arguments","title":"Task Arguments","text":"<p>You can pass arguments to tasks:</p> <pre><code>poe ruff src/specific_module.py\n</code></pre>"},{"location":"technologies/task-running/poethepoet/#environment-variables","title":"Environment Variables","text":"<p>You can set environment variables for tasks:</p> <pre><code>task-name = { cmd = \"command\", env = { VAR1 = \"value1\", VAR2 = \"value2\" } }\n</code></pre>"},{"location":"technologies/task-running/poethepoet/#best-practices","title":"Best Practices","text":"<ol> <li>Group related tasks: Use sequence tasks to group related operations.</li> <li>Use descriptive task names: Choose names that clearly indicate what the task does.</li> <li>Document tasks: Include comments in your pyproject.toml to explain complex tasks.</li> <li>Prefer poe over direct commands: Use poe tasks to provide a consistent interface.</li> <li>Use task dependencies: Break complex tasks into smaller, reusable tasks.</li> </ol>"},{"location":"technologies/task-running/poethepoet/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technologies/task-running/poethepoet/#common-issues","title":"Common Issues","text":""},{"location":"technologies/task-running/poethepoet/#task-not-found","title":"Task Not Found","text":"<p>If you get a \"task not found\" error:</p> <ol> <li>Check the spelling of the task name</li> <li>Ensure the task is defined in pyproject.toml</li> <li>Make sure you're running the command from the project root</li> </ol>"},{"location":"technologies/task-running/poethepoet/#task-fails-with-error","title":"Task Fails with Error","text":"<p>If a task fails with an error:</p> <ol> <li>Check the error message for details</li> <li>Run the command directly to see if it works outside of poe</li> <li>Check for environment or path issues</li> </ol>"},{"location":"technologies/task-running/poethepoet/#arguments-not-passed-correctly","title":"Arguments Not Passed Correctly","text":"<p>If arguments aren't being passed correctly:</p> <ol> <li>Try quoting the arguments</li> <li>Use <code>--</code> to separate poe arguments from task arguments</li> <li>Check if the task is defined to accept arguments</li> </ol>"},{"location":"technologies/task-running/poethepoet/#resources","title":"Resources","text":"<ul> <li>Poethepoet Documentation</li> <li>Python Project Configuration with pyproject.toml</li> <li>Task Runner Comparison</li> </ul>"},{"location":"technologies/testing/pytest-asyncio/","title":"Pytest-asyncio - Testing Asynchronous Code with Pytest","text":"<p>Pytest-asyncio is a pytest plugin that provides support for testing asynchronous code based on asyncio, Python's standard library for writing concurrent code using the async/await syntax.</p>"},{"location":"technologies/testing/pytest-asyncio/#overview","title":"Overview","text":"<p>Pytest-asyncio helps test asynchronous code by:</p> <ul> <li>Providing fixtures for testing asyncio coroutines</li> <li>Managing the asyncio event loop during tests</li> <li>Supporting both function and class-based async tests</li> <li>Handling test teardown properly for async resources</li> <li>Integrating seamlessly with pytest's existing features</li> <li>Supporting Python 3.7+ asyncio features</li> </ul>"},{"location":"technologies/testing/pytest-asyncio/#installation","title":"Installation","text":"<p>Pytest-asyncio is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install pytest-asyncio\n</code></pre>"},{"location":"technologies/testing/pytest-asyncio/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Pytest-asyncio is used to:</p> <ol> <li>Test asynchronous functions and coroutines</li> <li>Ensure proper handling of async resources</li> <li>Validate async API behavior</li> <li>Test concurrent operations</li> </ol>"},{"location":"technologies/testing/pytest-asyncio/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Pytest-asyncio is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.pytest.ini_options]\nasyncio_mode = \"auto\"\n</code></pre> <p>This configuration enables automatic detection of async tests, which means:</p> <ul> <li>Tests defined with <code>async def</code> are automatically treated as asyncio tests</li> <li>The event loop is automatically created and managed for each test</li> </ul>"},{"location":"technologies/testing/pytest-asyncio/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/testing/pytest-asyncio/#writing-asynchronous-tests","title":"Writing Asynchronous Tests","text":"<pre><code># Simple async test\nasync def test_async_function():\n    result = await my_async_function()\n    assert result == expected_value\n\n\n# Using async fixtures\n@pytest.fixture\nasync def async_resource():\n    resource = await create_resource()\n    yield resource\n    await resource.close()\n\n\nasync def test_with_async_fixture(async_resource):\n    result = await async_resource.operation()\n    assert result == expected_value\n</code></pre>"},{"location":"technologies/testing/pytest-asyncio/#running-async-tests","title":"Running Async Tests","text":"<pre><code># Run all tests (including async tests)\nuv run pytest\n\n# Run specific async tests\nuv run pytest test_async_module.py\n</code></pre>"},{"location":"technologies/testing/pytest-asyncio/#examples","title":"Examples","text":""},{"location":"technologies/testing/pytest-asyncio/#testing-an-async-api-client","title":"Testing an Async API Client","text":"<pre><code>import pytest\n\n\n@pytest.fixture\nasync def api_client():\n    client = AsyncAPIClient()\n    await client.connect()\n    yield client\n    await client.disconnect()\n\n\nasync def test_api_get_data(api_client):\n    data = await api_client.get_data(\"resource_id\")\n    assert \"key\" in data\n    assert data[\"status\"] == \"active\"\n</code></pre>"},{"location":"technologies/testing/pytest-asyncio/#testing-concurrent-operations","title":"Testing Concurrent Operations","text":"<pre><code>import asyncio\n\n\nasync def test_concurrent_operations():\n    # Run multiple operations concurrently\n    results = await asyncio.gather(operation1(), operation2(), operation3())\n\n    # Check results\n    assert results[0] == expected1\n    assert results[1] == expected2\n    assert results[2] == expected3\n</code></pre>"},{"location":"technologies/testing/pytest-asyncio/#asyncio-modes","title":"Asyncio Modes","text":"<p>Pytest-asyncio supports different modes for handling the asyncio event loop:</p> <ol> <li><code>auto</code>: Automatically detects async tests and fixtures</li> <li><code>strict</code>: Requires explicit marking of async tests with <code>@pytest.mark.asyncio</code></li> <li><code>legacy</code>: Uses a single event loop for all tests (deprecated)</li> </ol>"},{"location":"technologies/testing/pytest-asyncio/#best-practices","title":"Best Practices","text":"<ol> <li>Use appropriate fixtures: Create async fixtures for resource management.</li> <li>Clean up resources: Always clean up async resources in fixture teardown.</li> <li>Test error handling: Test both success and error paths in async code.</li> <li>Avoid mixing sync and async: Keep synchronous and asynchronous code separate.</li> <li>Test timeouts: Use <code>asyncio.wait_for()</code> to test timeout behavior.</li> <li>Test cancellation: Verify that your async code handles cancellation correctly.</li> <li>Use <code>asyncio.gather</code>: Test concurrent operations with <code>asyncio.gather</code>.</li> </ol>"},{"location":"technologies/testing/pytest-asyncio/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"Issue Solution Event loop is closed Use <code>asyncio_mode = \"auto\"</code> in pytest configuration Fixture teardown not running Ensure you're using <code>yield</code> instead of <code>return</code> in async fixtures Test hangs indefinitely Add timeouts to your async operations with <code>asyncio.wait_for()</code> Mixing sync and async code Use <code>asyncio.run()</code> or <code>loop.run_until_complete()</code> to call async from sync"},{"location":"technologies/testing/pytest-asyncio/#resources","title":"Resources","text":"<ul> <li>Pytest-asyncio Documentation</li> <li>Asyncio Documentation</li> <li>Pytest Documentation</li> <li>Python Asyncio Guide</li> </ul>"},{"location":"technologies/testing/pytest-cov/","title":"Pytest-cov - Code Coverage for Pytest","text":"<p>Pytest-cov is a plugin for pytest that provides code coverage reporting, helping you identify which parts of your code are being tested and which are not.</p>"},{"location":"technologies/testing/pytest-cov/#overview","title":"Overview","text":"<p>Pytest-cov helps improve test quality by:</p> <ul> <li>Measuring how much of your code is executed during tests</li> <li>Generating detailed reports on code coverage</li> <li>Identifying untested code paths</li> <li>Supporting branch coverage analysis</li> <li>Integrating seamlessly with pytest</li> <li>Providing various output formats (terminal, HTML, XML)</li> </ul>"},{"location":"technologies/testing/pytest-cov/#installation","title":"Installation","text":"<p>Pytest-cov is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install pytest-cov\n</code></pre>"},{"location":"technologies/testing/pytest-cov/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Pytest-cov is used to:</p> <ol> <li>Measure test coverage across the codebase</li> <li>Generate coverage reports as part of the CI/CD pipeline</li> <li>Identify areas of the code that need more testing</li> <li>Enforce minimum coverage thresholds</li> </ol>"},{"location":"technologies/testing/pytest-cov/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Pytest-cov is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.pytest.ini_options]\naddopts = \"--cov=src --cov-report=term --cov-report=html\"\n</code></pre> <p>This configuration:</p> <ul> <li>Measures coverage for code in the <code>src</code> directory</li> <li>Outputs coverage reports to the terminal</li> <li>Generates HTML reports for detailed analysis</li> </ul>"},{"location":"technologies/testing/pytest-cov/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/testing/pytest-cov/#running-tests-with-coverage","title":"Running Tests with Coverage","text":"<p>To run tests with coverage:</p> <pre><code># Run tests with coverage\nuv run pytest --cov=src\n\n# Run tests with coverage and generate HTML report\nuv run pytest --cov=src --cov-report=html\n\n# Run tests with coverage for specific modules\nuv run pytest --cov=src.module1 --cov=src.module2\n</code></pre>"},{"location":"technologies/testing/pytest-cov/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Specify source directories to measure\nuv run pytest --cov=src --cov=lib\n\n# Generate different report formats\nuv run pytest --cov=src --cov-report=term --cov-report=html --cov-report=xml\n\n# Set minimum coverage threshold\nuv run pytest --cov=src --cov-fail-under=90\n\n# Show line numbers of missing coverage\nuv run pytest --cov=src --cov-report=term-missing\n</code></pre>"},{"location":"technologies/testing/pytest-cov/#examples","title":"Examples","text":""},{"location":"technologies/testing/pytest-cov/#terminal-coverage-report","title":"Terminal Coverage Report","text":"<pre><code>----------- coverage: platform linux, python 3.11.0-final-0 -----------\nName                    Stmts   Miss  Cover\n-------------------------------------------\nsrc/__init__.py             4      0   100%\nsrc/module1.py             26      3    88%\nsrc/module2.py             42      7    83%\nsrc/utils.py               18      2    89%\n-------------------------------------------\nTOTAL                      90     12    87%\n</code></pre>"},{"location":"technologies/testing/pytest-cov/#html-report","title":"HTML Report","text":"<p>The HTML report provides a detailed view of coverage, including:</p> <ul> <li>File-by-file breakdown</li> <li>Line-by-line highlighting of covered and uncovered code</li> <li>Branch coverage information</li> <li>Summary statistics</li> </ul>"},{"location":"technologies/testing/pytest-cov/#coverage-types","title":"Coverage Types","text":"<p>Pytest-cov supports different types of coverage measurement:</p> <ol> <li>Statement Coverage: Measures which statements in your code have been executed</li> <li>Branch Coverage: Measures which possible branches (if/else paths) have been taken</li> <li>Function Coverage: Measures which functions have been called</li> <li>Line Coverage: Measures which executable lines have been run</li> </ol>"},{"location":"technologies/testing/pytest-cov/#best-practices","title":"Best Practices","text":"<ol> <li>Aim for high coverage: Strive for at least 80-90% code coverage.</li> <li>Focus on critical paths: Ensure business-critical code has near 100% coverage.</li> <li>Don't just chase numbers: High coverage doesn't guarantee good tests; focus on test quality too.</li> <li>Use branch coverage: Enable branch coverage to catch untested conditional paths.</li> <li>Set minimum thresholds: Use <code>--cov-fail-under</code> to enforce minimum coverage requirements.</li> <li>Review coverage reports regularly: Identify and address areas with low coverage.</li> <li>Include coverage in CI: Make coverage checks part of your continuous integration pipeline.</li> </ol>"},{"location":"technologies/testing/pytest-cov/#resources","title":"Resources","text":"<ul> <li>Pytest-cov Documentation</li> <li>Coverage.py Documentation</li> <li>Pytest Documentation</li> <li>Code Coverage Best Practices</li> </ul>"},{"location":"technologies/testing/pytest-xdist/","title":"Pytest-xdist - Distributed Testing with Pytest","text":"<p>Pytest-xdist is a pytest plugin that allows you to run tests in parallel across multiple CPUs or even multiple machines, significantly reducing test execution time.</p>"},{"location":"technologies/testing/pytest-xdist/#overview","title":"Overview","text":"<p>Pytest-xdist helps speed up test execution by:</p> <ul> <li>Running tests in parallel across multiple CPU cores</li> <li>Distributing tests across multiple machines</li> <li>Supporting load-balanced and grouped test execution</li> <li>Providing options for test isolation</li> <li>Integrating seamlessly with pytest's existing features</li> <li>Offering flexible configuration options</li> </ul>"},{"location":"technologies/testing/pytest-xdist/#installation","title":"Installation","text":"<p>Pytest-xdist is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install pytest-xdist\n</code></pre>"},{"location":"technologies/testing/pytest-xdist/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Pytest-xdist is used to:</p> <ol> <li>Speed up test execution by running tests in parallel</li> <li>Ensure tests are properly isolated and don't interfere with each other</li> <li>Optimize CI/CD pipeline performance</li> <li>Reduce feedback time during development</li> </ol>"},{"location":"technologies/testing/pytest-xdist/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Pytest-xdist is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.pytest.ini_options]\naddopts = \"-xvs\"\n</code></pre> <p>The <code>-x</code> option enables parallel test execution.</p>"},{"location":"technologies/testing/pytest-xdist/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/testing/pytest-xdist/#running-tests-in-parallel","title":"Running Tests in Parallel","text":"<pre><code># Run tests using all available CPU cores\nuv run pytest -n auto\n\n# Run tests using a specific number of workers\nuv run pytest -n 4\n\n# Run tests with load balancing\nuv run pytest -n 4 --dist=loadfile\n</code></pre>"},{"location":"technologies/testing/pytest-xdist/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Run tests in parallel with verbose output\nuv run pytest -n 4 -v\n\n# Run tests with load balancing based on execution time\nuv run pytest -n auto --dist=loadscope\n\n# Run tests with load balancing based on test file\nuv run pytest -n auto --dist=loadfile\n\n# Run tests with load balancing based on test module\nuv run pytest -n auto --dist=loadmodule\n</code></pre>"},{"location":"technologies/testing/pytest-xdist/#distribution-modes","title":"Distribution Modes","text":"<p>Pytest-xdist supports different distribution modes:</p> <ol> <li><code>--dist=load</code> (default): Distributes tests to available workers as they finish their previous tests</li> <li><code>--dist=loadscope</code>: Groups tests by module and class, ensuring related tests run on the same worker</li> <li><code>--dist=loadfile</code>: Groups tests by file, ensuring all tests from a file run on the same worker</li> <li><code>--dist=loadgroup</code>: Groups tests by the <code>xdist_group</code> marker</li> <li><code>--dist=each</code>: Runs the entire test suite on each worker with different parameters</li> </ol>"},{"location":"technologies/testing/pytest-xdist/#examples","title":"Examples","text":""},{"location":"technologies/testing/pytest-xdist/#basic-parallel-execution","title":"Basic Parallel Execution","text":"<pre><code># Run tests using all available CPU cores\n$ uv run pytest -n auto\n============================= test session starts ==============================\nplatform linux -- Python 3.11.0, pytest-7.3.1, pluggy-1.0.0\nrootdir: /path/to/project\nplugins: xdist-3.3.1, asyncio-0.21.0, cov-4.1.0\ngw0 [250] / gw1 [250] / gw2 [250] / gw3 [250]\n...\n</code></pre>"},{"location":"technologies/testing/pytest-xdist/#using-test-groups","title":"Using Test Groups","text":"<pre><code># In your test file\nimport pytest\n\n\n@pytest.mark.xdist_group(name=\"database\")\ndef test_database_connection():\n    # Test database connection\n    ...\n\n\n@pytest.mark.xdist_group(name=\"api\")\ndef test_api_endpoint():\n    # Test API endpoint\n    ...\n</code></pre> <pre><code># Run tests with group-based distribution\nuv run pytest -n 4 --dist=loadgroup\n</code></pre>"},{"location":"technologies/testing/pytest-xdist/#best-practices","title":"Best Practices","text":"<ol> <li>Ensure test isolation: Make sure tests don't depend on each other or shared state.</li> <li>Use appropriate distribution mode: Choose the right <code>--dist</code> option based on your test dependencies.</li> <li>Consider test data: Be careful with tests that access the same test data or database.</li> <li>Balance parallelism: More workers isn't always better; find the optimal number for your system.</li> <li>Use markers for grouping: Use <code>xdist_group</code> markers to control how tests are distributed.</li> <li>Monitor resource usage: Watch CPU, memory, and I/O usage during parallel test execution.</li> <li>Combine with pytest-cov: Use <code>--cov-append</code> when combining with coverage measurement.</li> </ol>"},{"location":"technologies/testing/pytest-xdist/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"Issue Solution Tests interfering with each other Use <code>--dist=loadscope</code> or <code>--dist=loadfile</code> to group related tests Database conflicts Use separate test databases or transactions for isolation Inconsistent test failures Add the <code>--reruns</code> option to retry flaky tests High resource usage Reduce the number of workers with <code>-n</code> option Slow test initialization Use session-scoped fixtures for expensive setup operations"},{"location":"technologies/testing/pytest-xdist/#resources","title":"Resources","text":"<ul> <li>Pytest-xdist Documentation</li> <li>Pytest Documentation</li> <li>Parallel Testing Best Practices</li> <li>Test Isolation Strategies</li> </ul>"},{"location":"technologies/testing/pytest/","title":"Pytest - Python Testing Framework","text":"<p>Pytest is a powerful, flexible testing framework for Python that makes it easy to write simple and scalable test cases.</p>"},{"location":"technologies/testing/pytest/#overview","title":"Overview","text":"<p>Pytest provides:</p> <ul> <li>A simple, expressive syntax for writing tests</li> <li>Powerful fixture system for test setup and teardown</li> <li>Comprehensive assertion introspection</li> <li>Plugin architecture for extending functionality</li> <li>Parallel test execution</li> <li>Test discovery and collection</li> </ul>"},{"location":"technologies/testing/pytest/#installation","title":"Installation","text":"<p>Pytest and its plugins are included as development dependencies:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install pytest pytest-cov pytest-asyncio pytest-xdist\n</code></pre>"},{"location":"technologies/testing/pytest/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Pytest is used to:</p> <ol> <li>Write and run unit tests</li> <li>Measure code coverage</li> <li>Test asynchronous code</li> <li>Run tests in parallel</li> <li>Generate coverage reports</li> </ol>"},{"location":"technologies/testing/pytest/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Pytest is configured in the <code>pyproject.toml</code> file:</p> <pre><code>[tool.pytest.ini_options]\nasyncio_default_fixture_loop_scope = \"function\"\npython_classes = [\"Test*\"]\npython_files = [\"test_*.py\"]\npython_functions = [\"test_*\"]\ntestpaths = [\"tests\"]\n</code></pre> <p>Pytest is also configured as a poethepoet task for running tests with coverage:</p> <pre><code>[tool.poe.tasks]\ntest-coverage = \"pytest -xvs -n auto --cov=src --cov-report=xml --cov-fail-under=80 --ignore=tests\"\n</code></pre>"},{"location":"technologies/testing/pytest/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/testing/pytest/#running-tests","title":"Running Tests","text":"<p>To run tests:</p> <pre><code># Run all tests with coverage\nuv run poe test-coverage\n\n# Run all tests\nuv run pytest\n\n# Run specific tests\nuv run pytest tests/unit/test_specific.py\n\n# Run tests matching a pattern\nuv run pytest -k \"test_pattern\"\n</code></pre>"},{"location":"technologies/testing/pytest/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Run tests verbosely\nuv run pytest -v\n\n# Show extra test summary info\nuv run pytest -v\n\n# Stop after first failure\nuv run pytest -x\n\n# Drop into debugger on failure\nuv run pytest --pdb\n\n# Run tests in parallel\nuv run pytest -n auto\n\n# Measure code coverage\nuv run pytest --cov=src\n</code></pre>"},{"location":"technologies/testing/pytest/#writing-tests","title":"Writing Tests","text":""},{"location":"technologies/testing/pytest/#basic-test-structure","title":"Basic Test Structure","text":"<pre><code># test_example.py\ndef test_addition():\n    assert 1 + 1 == 2\n\n\ndef test_string_methods():\n    assert \"hello\".capitalize() == \"Hello\"\n</code></pre>"},{"location":"technologies/testing/pytest/#test-classes","title":"Test Classes","text":"<pre><code># test_example.py\nclass TestMathFunctions:\n    def test_addition(self):\n        assert 1 + 1 == 2\n\n    def test_multiplication(self):\n        assert 2 * 3 == 6\n</code></pre>"},{"location":"technologies/testing/pytest/#using-fixtures","title":"Using Fixtures","text":"<pre><code># test_example.py\nimport pytest\n\n\n@pytest.fixture\ndef sample_data():\n    return {\"name\": \"Test User\", \"age\": 30}\n\n\ndef test_user_name(sample_data):\n    assert sample_data[\"name\"] == \"Test User\"\n\n\ndef test_user_age(sample_data):\n    assert sample_data[\"age\"] == 30\n</code></pre>"},{"location":"technologies/testing/pytest/#testing-exceptions","title":"Testing Exceptions","text":"<pre><code># test_example.py\nimport pytest\n\n\ndef divide(a, b):\n    return a / b\n\n\ndef test_division_by_zero():\n    with pytest.raises(ZeroDivisionError):\n        divide(1, 0)\n</code></pre>"},{"location":"technologies/testing/pytest/#parameterized-tests","title":"Parameterized Tests","text":"<pre><code># test_example.py\nimport pytest\n\n\n@pytest.mark.parametrize(\n    \"input,expected\",\n    [\n        (1, 1),\n        (2, 4),\n        (3, 9),\n        (4, 16),\n    ],\n)\ndef test_square(input, expected):\n    assert input**2 == expected\n</code></pre>"},{"location":"technologies/testing/pytest/#async-tests","title":"Async Tests","text":"<pre><code># test_example.py\nimport pytest\n\n\n@pytest.mark.asyncio\nasync def test_async_function():\n    result = await some_async_function()\n    assert result == expected_value\n</code></pre>"},{"location":"technologies/testing/pytest/#plugins-used-in-this-project","title":"Plugins Used in This Project","text":""},{"location":"technologies/testing/pytest/#pytest-cov","title":"pytest-cov","text":"<p>Measures code coverage and generates reports:</p> <pre><code>uv run pytest --cov=src --cov-report=xml\n</code></pre>"},{"location":"technologies/testing/pytest/#pytest-asyncio","title":"pytest-asyncio","text":"<p>Enables testing of asynchronous code:</p> <pre><code>@pytest.mark.asyncio\nasync def test_async_function():\n    # Test async code\n</code></pre>"},{"location":"technologies/testing/pytest/#pytest-xdist","title":"pytest-xdist","text":"<p>Enables parallel test execution:</p> <pre><code>uv run pytest -n auto  # Use all available CPU cores\nuv run pytest -n 4     # Use 4 CPU cores\n</code></pre>"},{"location":"technologies/testing/pytest/#best-practices","title":"Best Practices","text":"<ol> <li>Follow naming conventions: Name test files with <code>test_</code> prefix and test functions with <code>test_</code> prefix.</li> <li>Use fixtures for setup and teardown: Avoid duplicating setup code across tests.</li> <li>Keep tests independent: Tests should not depend on the state from other tests.</li> <li>Test one thing per test: Each test should verify a single behavior.</li> <li>Use parameterized tests: Test multiple inputs with a single test function.</li> <li>Aim for high coverage: Strive for at least 80% code coverage.</li> <li>Include both positive and negative tests: Test both expected and error cases.</li> </ol>"},{"location":"technologies/testing/pytest/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technologies/testing/pytest/#common-issues","title":"Common Issues","text":""},{"location":"technologies/testing/pytest/#tests-not-being-discovered","title":"Tests Not Being Discovered","text":"<p>If tests aren't being discovered:</p> <ol> <li>Check that test files start with <code>test_</code></li> <li>Check that test functions start with <code>test_</code></li> <li>Check that test classes start with <code>Test</code></li> <li>Check the <code>testpaths</code> configuration</li> </ol>"},{"location":"technologies/testing/pytest/#fixture-errors","title":"Fixture Errors","text":"<p>If you're having issues with fixtures:</p> <ol> <li>Check fixture scope (function, class, module, session)</li> <li>Check for circular dependencies between fixtures</li> <li>Ensure fixtures are accessible to the tests that need them</li> </ol>"},{"location":"technologies/testing/pytest/#coverage-issues","title":"Coverage Issues","text":"<p>If you're having issues with coverage:</p> <ol> <li>Check that the source paths are correct</li> <li>Ensure you're not excluding relevant files</li> <li>Check for <code>.coveragerc</code> or configuration in <code>pyproject.toml</code></li> </ol>"},{"location":"technologies/testing/pytest/#resources","title":"Resources","text":"<ul> <li>Pytest Documentation</li> <li>Pytest-cov Documentation</li> <li>Pytest-asyncio Documentation</li> <li>Pytest-xdist Documentation</li> <li>Python Testing Best Practices</li> </ul>"},{"location":"technologies/version-control/git/","title":"Git - Distributed Version Control System","text":"<p>Git is a distributed version control system that tracks changes in source code during software development, enabling collaboration among multiple developers.</p>"},{"location":"technologies/version-control/git/#overview","title":"Overview","text":"<p>Git helps manage code changes by:</p> <ul> <li>Tracking file changes over time</li> <li>Supporting branching and merging</li> <li>Enabling distributed development</li> <li>Providing a complete history of changes</li> <li>Facilitating collaboration among team members</li> <li>Supporting workflows for code review and quality control</li> <li>Integrating with CI/CD pipelines and other development tools</li> </ul>"},{"location":"technologies/version-control/git/#installation","title":"Installation","text":"<p>Git is a core tool that should be installed globally on your system:</p> <pre><code># macOS (using Homebrew)\nbrew install git\n\n# Ubuntu/Debian\nsudo apt-get install git\n\n# Windows\n# Download from https://git-scm.com/download/win\n</code></pre> <p>Verify your installation:</p> <pre><code>git --version\n</code></pre>"},{"location":"technologies/version-control/git/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Git is used to:</p> <ol> <li>Track changes to source code and documentation</li> <li>Manage feature development through branches</li> <li>Facilitate code reviews through pull requests</li> <li>Integrate with pre-commit hooks for quality control</li> <li>Support the CI/CD pipeline</li> <li>Maintain a complete history of project development</li> </ol>"},{"location":"technologies/version-control/git/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Git is configured with standard settings and integrates with pre-commit hooks:</p> <pre><code># View current configuration\ngit config --list\n\n# Set up user information (if not already configured)\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n</code></pre>"},{"location":"technologies/version-control/git/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/version-control/git/#common-git-commands","title":"Common Git Commands","text":"<pre><code># Initialize a repository\ngit init\n\n# Clone a repository\ngit clone https://github.com/username/repository.git\n\n# Check status\ngit status\n\n# Stage changes\ngit add filename\ngit add .  # Stage all changes\n\n# Commit changes\ngit commit -m \"Descriptive commit message\"\n\n# Push changes to remote\ngit push origin branch-name\n\n# Pull changes from remote\ngit pull origin branch-name\n</code></pre>"},{"location":"technologies/version-control/git/#branching-and-merging","title":"Branching and Merging","text":"<pre><code># Create a new branch\ngit branch feature-branch\n\n# Switch to a branch\ngit checkout feature-branch\n\n# Create and switch to a new branch\ngit checkout -b feature-branch\n\n# Merge a branch\ngit checkout main\ngit merge feature-branch\n\n# Delete a branch\ngit branch -d feature-branch\n</code></pre>"},{"location":"technologies/version-control/git/#examples","title":"Examples","text":""},{"location":"technologies/version-control/git/#typical-workflow","title":"Typical Workflow","text":"<pre><code># Start a new feature\ngit checkout -b new-feature\n\n# Make changes and commit them\ngit add .\ngit commit -m \"feat: add new feature\"\n\n# Push the branch to remote\ngit push origin new-feature\n\n# Create a pull request (via GitHub/GitLab/etc.)\n\n# After review and approval, merge the pull request\n\n# Update local main branch\ngit checkout main\ngit pull origin main\n\n# Delete the feature branch\ngit branch -d new-feature\n</code></pre>"},{"location":"technologies/version-control/git/#working-with-pre-commit-hooks","title":"Working with Pre-commit Hooks","text":"<pre><code># Install pre-commit hooks\nuv run pre-commit install\n\n# Make changes\n# ...\n\n# Stage changes\ngit add .\n\n# Commit (pre-commit hooks will run automatically)\ngit commit -m \"feat: add new feature\"\n\n# If hooks fail, fix issues and try again\ngit add .\ngit commit -m \"feat: add new feature\"\n</code></pre>"},{"location":"technologies/version-control/git/#git-workflow-in-this-project","title":"Git Workflow in This Project","text":"<p>This project follows a feature branch workflow:</p> <ol> <li>Main Branch: The <code>main</code> branch contains stable, production-ready code</li> <li>Feature Branches: New features are developed in dedicated branches</li> <li>Pull Requests: Changes are reviewed through pull requests</li> <li>Merge Strategy: Feature branches are merged into <code>main</code> after review</li> <li>Commit Messages: Follows the Conventional Commits specification</li> </ol>"},{"location":"technologies/version-control/git/#best-practices","title":"Best Practices","text":"<ol> <li>Write meaningful commit messages: Follow the Conventional Commits specification.</li> <li>Keep commits focused: Each commit should represent a single logical change.</li> <li>Pull before pushing: Always pull the latest changes before pushing to avoid conflicts.</li> <li>Use branches for features: Develop new features in dedicated branches.</li> <li>Review code before merging: Use pull requests for code review.</li> <li>Don't commit sensitive information: Keep secrets, credentials, and personal data out of the repository.</li> <li>Use .gitignore: Properly configure <code>.gitignore</code> to exclude unnecessary files.</li> </ol>"},{"location":"technologies/version-control/git/#common-git-patterns","title":"Common Git Patterns","text":""},{"location":"technologies/version-control/git/#feature-branch-workflow","title":"Feature Branch Workflow","text":"<ol> <li>Create a feature branch from <code>main</code></li> <li>Develop the feature in the branch</li> <li>Create a pull request for review</li> <li>Merge the feature branch into <code>main</code> after approval</li> </ol>"},{"location":"technologies/version-control/git/#gitflow-workflow","title":"Gitflow Workflow","text":"<ol> <li><code>main</code> branch for production releases</li> <li><code>develop</code> branch for development</li> <li>Feature branches for new features</li> <li>Release branches for preparing releases</li> <li>Hotfix branches for urgent fixes</li> </ol>"},{"location":"technologies/version-control/git/#resources","title":"Resources","text":"<ul> <li>Git Documentation</li> <li>Pro Git Book</li> <li>Conventional Commits</li> <li>GitHub Flow</li> <li>Gitflow Workflow</li> </ul>"},{"location":"technologies/version-control/pre-commit/","title":"Pre-commit - Git Hooks Framework","text":"<p>Pre-commit is a framework for managing and maintaining multi-language pre-commit hooks that run automatically before each git commit, ensuring code quality and consistency.</p>"},{"location":"technologies/version-control/pre-commit/#overview","title":"Overview","text":"<p>Pre-commit helps maintain code quality by:</p> <ul> <li>Running code quality checks before each commit</li> <li>Supporting hooks for multiple languages and tools</li> <li>Preventing commits that don't meet quality standards</li> <li>Automating code formatting and linting</li> <li>Ensuring consistent code style across the project</li> <li>Integrating with CI/CD pipelines</li> <li>Supporting custom hooks for project-specific checks</li> </ul>"},{"location":"technologies/version-control/pre-commit/#installation","title":"Installation","text":"<p>Pre-commit is included as a development dependency:</p> <pre><code># Install with other development dependencies\nuv sync --dev\n</code></pre> <p>To install it directly:</p> <pre><code>uv pip install pre-commit\n</code></pre> <p>After installation, you need to install the git hooks:</p> <pre><code>uv run pre-commit install\n</code></pre>"},{"location":"technologies/version-control/pre-commit/#how-its-used-in-this-project","title":"How It's Used in This Project","text":"<p>In this project, Pre-commit is used to:</p> <ol> <li>Run code quality checks before each commit</li> <li>Enforce consistent code style and formatting</li> <li>Catch common issues early in the development process</li> <li>Ensure documentation is properly formatted</li> <li>Run security checks on the codebase</li> </ol>"},{"location":"technologies/version-control/pre-commit/#configuration-in-this-project","title":"Configuration in This Project","text":"<p>Pre-commit is configured in the <code>.pre-commit-config.yaml</code> file:</p> <pre><code>repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.1.6\n    hooks:\n      - id: ruff\n        args: [--fix]\n      - id: ruff-format\n\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.7.1\n    hooks:\n      - id: mypy\n        additional_dependencies: [pydantic, types-requests]\n\n  # Additional hooks...\n</code></pre>"},{"location":"technologies/version-control/pre-commit/#basic-usage","title":"Basic Usage","text":""},{"location":"technologies/version-control/pre-commit/#running-pre-commit","title":"Running Pre-commit","text":"<pre><code># Run pre-commit on all files\nuv run pre-commit run --all-files\n\n# Run pre-commit on staged files\nuv run pre-commit run\n\n# Run a specific hook\nuv run pre-commit run ruff --all-files\n</code></pre>"},{"location":"technologies/version-control/pre-commit/#common-command-line-options","title":"Common Command-Line Options","text":"<pre><code># Skip specific hooks\nuv run pre-commit run --all-files --hook-stage commit --skip ruff\n\n# Run hooks on specific files\nuv run pre-commit run --files src/module.py tests/test_module.py\n\n# Show hook output even if successful\nuv run pre-commit run --verbose\n</code></pre>"},{"location":"technologies/version-control/pre-commit/#examples","title":"Examples","text":""},{"location":"technologies/version-control/pre-commit/#pre-commit-output","title":"Pre-commit Output","text":"<pre><code>$ uv run pre-commit run --all-files\nRuff............................................................Passed\nRuff Format....................................................Passed\nmypy...........................................................Passed\nBandit.........................................................Passed\nVulture........................................................Passed\nPyright........................................................Passed\n</code></pre>"},{"location":"technologies/version-control/pre-commit/#failed-check-example","title":"Failed Check Example","text":"<pre><code>$ uv run pre-commit run --all-files\nRuff............................................................Failed\n- hook id: ruff\n- exit code: 1\n\nsrc/module.py:10:1: F401 [*] `os` imported but unused\nsrc/module.py:25:5: E501 Line too long (88 &gt; 79 characters)\n</code></pre>"},{"location":"technologies/version-control/pre-commit/#hook-types","title":"Hook Types","text":"<p>Pre-commit supports different types of hooks:</p> <ol> <li>pre-commit: Runs before committing</li> <li>pre-push: Runs before pushing</li> <li>pre-merge-commit: Runs before merge commits</li> <li>pre-rebase: Runs before rebasing</li> <li>commit-msg: Runs to validate commit messages</li> <li>prepare-commit-msg: Runs to prepare commit messages</li> </ol>"},{"location":"technologies/version-control/pre-commit/#best-practices","title":"Best Practices","text":"<ol> <li>Run hooks on all files periodically: Use <code>pre-commit run --all-files</code> to check the entire codebase.</li> <li>Keep hooks fast: Ensure hooks run quickly to avoid disrupting the development workflow.</li> <li>Use auto-fixing hooks: Prefer hooks that can automatically fix issues when possible.</li> <li>Update hooks regularly: Keep hook versions updated to benefit from improvements and bug fixes.</li> <li>Include pre-commit in CI: Run pre-commit in CI to ensure all contributors follow the same standards.</li> <li>Document custom hooks: If you add custom hooks, document their purpose and requirements.</li> <li>Use local hooks for project-specific checks: Add local hooks for checks specific to your project.</li> </ol>"},{"location":"technologies/version-control/pre-commit/#common-hooks","title":"Common Hooks","text":"Hook Purpose <code>ruff</code> Python linter and formatter <code>mypy</code> Static type checking <code>black</code> Python code formatter <code>isort</code> Import sorter <code>flake8</code> Python style guide enforcement <code>bandit</code> Security linter <code>prettier</code> Multi-language formatter <code>markdownlint</code> Markdown linter <code>shellcheck</code> Shell script linter"},{"location":"technologies/version-control/pre-commit/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technologies/version-control/pre-commit/#skipping-hooks","title":"Skipping Hooks","text":"<p>To skip hooks for a specific commit:</p> <pre><code>git commit --no-verify -m \"Your commit message\"\n</code></pre>"},{"location":"technologies/version-control/pre-commit/#updating-hooks","title":"Updating Hooks","text":"<p>To update hooks to their latest versions:</p> <pre><code>uv run pre-commit autoupdate\n</code></pre>"},{"location":"technologies/version-control/pre-commit/#clearing-cache","title":"Clearing Cache","text":"<p>If you encounter issues with cached results or pyi files:</p> <pre><code>uv run pre-commit clean\npoe mkinit\n</code></pre>"},{"location":"technologies/version-control/pre-commit/#resources","title":"Resources","text":"<ul> <li>Pre-commit Documentation</li> <li>Available Hooks</li> <li>Git Hooks Documentation</li> <li>Creating Custom Hooks</li> </ul>"},{"location":"tools-guide/","title":"Tools Guide","text":"<p>The tools guide section provides simplified explanations of the various tools used in this project template. Each guide includes basic usage information, common patterns, and troubleshooting tips.</p> <p>Available guides:</p> <ul> <li>Code Quality: Learn about the tools that help maintain code quality, such as Ruff, Pyright, and Bandit.</li> <li>Documentation: Explore the documentation tools like MkDocs and MkDocstrings.</li> <li>Testing: Understand the testing framework and tools for test coverage and automation.</li> <li>Project Management: Learn about package management, task running, and version control tools.</li> </ul> <p>Choose a guide to learn more about the tools used in this project.</p>"},{"location":"tools-guide/code-quality/","title":"Code Quality Tools Guide","text":"<p>Est. time to complete: 20 minutes</p>"},{"location":"tools-guide/code-quality/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>The purpose and benefits of code quality tools</li> <li>How to use the main code quality tools in this project</li> <li>When to use different tools for specific needs</li> <li>How to troubleshoot common issues</li> </ul>"},{"location":"tools-guide/code-quality/#quick-reference","title":"Quick Reference","text":"Tool Primary Use When to Use Complexity Command Ruff Linting &amp; Formatting Daily development \u2605\u2605\u2606 <code>poe ruff</code> Pyright Type checking Daily development \u2605\u2605\u2606 <code>poe pyright</code> Bandit Security scanning Pre-commit \u2605\u2606\u2606 (Runs automatically) Vulture Dead code detection Pre-commit \u2605\u2606\u2606 (Runs automatically) Interrogate Docstring coverage Pre-commit \u2605\u2606\u2606 (Runs automatically)"},{"location":"tools-guide/code-quality/#understanding-code-quality","title":"Understanding Code Quality","text":"<p>Code quality tools help you write better, more maintainable code by automatically checking for:</p> <ul> <li>Syntax errors and bugs</li> <li>Inconsistent formatting</li> <li>Security vulnerabilities</li> <li>Missing documentation</li> <li>Performance issues</li> <li>Type errors</li> </ul> <p>These tools are configured to work together seamlessly in this project, ensuring that your code meets high-quality standards without requiring significant manual effort.</p>"},{"location":"tools-guide/code-quality/#ruff-your-primary-code-quality-tool","title":"Ruff: Your Primary Code Quality Tool","text":""},{"location":"tools-guide/code-quality/#what-it-does","title":"What It Does","text":"<p>Ruff is an extremely fast Python linter and formatter written in Rust. It combines the functionality of many Python linting tools into a single package, including:</p> <ul> <li>Linting: Finds errors, bugs, stylistic issues, and suspicious code</li> <li>Formatting: Ensures consistent code style (similar to Black)</li> <li>Import sorting: Organizes imports (similar to isort)</li> <li>Code fixing: Automatically fixes many issues</li> </ul>"},{"location":"tools-guide/code-quality/#basic-usage","title":"Basic Usage","text":"<pre><code># Check for linting issues\npoe ruff\n\n# Format your code\npoe ruff-format\n\n# Both check and format\npoe ruff-all\n</code></pre>"},{"location":"tools-guide/code-quality/#common-patterns","title":"Common Patterns","text":""},{"location":"tools-guide/code-quality/#1-running-ruff-while-coding","title":"1. Running Ruff while coding","text":"<p>The best practice is to run Ruff regularly as you code, rather than waiting until you're ready to commit. This helps catch issues early.</p> <pre><code># After making changes to a file\npoe ruff-all\n</code></pre>"},{"location":"tools-guide/code-quality/#2-understanding-error-codes","title":"2. Understanding error codes","text":"<p>Ruff uses error codes to indicate different types of issues:</p> <ul> <li><code>E</code>, <code>F</code>: Error/Fatal (must fix)</li> <li><code>W</code>: Warning (should fix)</li> <li><code>I</code>: Import related</li> <li><code>D</code>: Documentation related</li> </ul> <p>Example error message:</p> <pre><code>src/main.py:10:1: F401 'os' imported but unused\n</code></pre> <p>This tells you:</p> <ul> <li>File: src/main.py</li> <li>Line 10, column 1</li> <li>Error code: F401</li> <li>Issue: You imported 'os' but never used it</li> </ul>"},{"location":"tools-guide/code-quality/#a-quick-cheat-sheet-for-common-error-codes","title":"A quick cheat sheet for common error codes:","text":"Code Meaning How to Fix E501 Line too long Break the line into multiple lines F401 Unused import Remove the unused import W293 Blank line contains whitespace Remove trailing whitespace D103 Missing docstring Add a docstring to the function"},{"location":"tools-guide/code-quality/#troubleshooting","title":"Troubleshooting","text":"<p>Problem: Too many errors when first running Ruff Solution: Focus on fixing one category at a time, starting with E and F errors</p> <p>Problem: Ruff is changing formatting you prefer Solution: Adjust settings in pyproject.toml under [tool.ruff.format]</p>"},{"location":"tools-guide/code-quality/#pyright-type-checking-for-safer-code","title":"Pyright: Type Checking for Safer Code","text":""},{"location":"tools-guide/code-quality/#what-it-does_1","title":"What It Does","text":"<p>Pyright is a static type checker that helps find type-related errors without running your code. It uses Python's type hints to:</p> <ul> <li>Catch type errors before runtime</li> <li>Improve code navigation and completion in your editor</li> <li>Document expected input and output types</li> </ul>"},{"location":"tools-guide/code-quality/#basic-usage_1","title":"Basic Usage","text":"<pre><code># Run type checking on your project\npoe pyright\n\n# Specific file\npyright src/specific_file.py\n</code></pre>"},{"location":"tools-guide/code-quality/#simple-type-annotation-examples","title":"Simple Type Annotation Examples","text":"<pre><code># Variables\nname: str = \"John\"\nage: int = 30\n\n# Functions\ndef greet(name: str) -&gt; str:\n    return f\"Hello, {name}!\"\n\n# Optional parameters\ndef process_data(data: list[str], debug: bool = False) -&gt; dict[str, int]:\n    # Process data\n    return {\"count\": len(data)}\n</code></pre>"},{"location":"tools-guide/code-quality/#troubleshooting_1","title":"Troubleshooting","text":"<p>Problem: \"Cannot find module\" errors Solution: Make sure the module is installed and in your Python path</p> <p>Problem: Too many \"Unknown type\" errors Solution: Add type annotations gradually, focusing on function parameters and return types first</p>"},{"location":"tools-guide/code-quality/#other-code-quality-tools","title":"Other Code Quality Tools","text":"<p>This project includes several other tools that run automatically as part of the pre-commit process:</p>"},{"location":"tools-guide/code-quality/#bandit","title":"Bandit","text":"<p>Checks for security issues in your code, such as:</p> <ul> <li>Hardcoded passwords</li> <li>SQL injection vulnerabilities</li> <li>Use of insecure functions</li> </ul>"},{"location":"tools-guide/code-quality/#vulture","title":"Vulture","text":"<p>Finds unused code that can be safely removed, including:</p> <ul> <li>Unused variables</li> <li>Unused functions and classes</li> <li>Unreachable code</li> </ul>"},{"location":"tools-guide/code-quality/#interrogate","title":"Interrogate","text":"<p>Checks docstring coverage to ensure your code is well-documented:</p> <ul> <li>Verifies functions have docstrings</li> <li>Monitors overall docstring coverage percentage</li> <li>Ensures documentation stays up-to-date with code</li> </ul>"},{"location":"tools-guide/code-quality/#tool-comparison-when-to-use-what","title":"Tool Comparison: When to Use What","text":"If You Need To... Use This Tool Example Scenario Fix syntax and style Ruff Ensuring consistent code style across the project Catch type errors Pyright Validating function parameters and return types Check for security issues Bandit Before deploying code that handles sensitive data Clean up unused code Vulture When refactoring or maintaining legacy code Improve documentation Interrogate When preparing code for team contribution"},{"location":"tools-guide/code-quality/#practical-example-fixing-common-issues","title":"Practical Example: Fixing Common Issues","text":"<p>Let's say you have this code with several issues:</p> <pre><code>import os\nimport sys\n\ndef calculate_result(input):\n    if input &gt; 10:\n        print(\"Value is greater than 10\")\n        result = input * 2\n    return result\n</code></pre> <p>Running our tools would find these issues:</p> <ol> <li><code>import os</code> is unused (Ruff F401)</li> <li>Function is missing a docstring (Interrogate)</li> <li>Parameter <code>input</code> has no type annotation (Pyright)</li> <li><code>result</code> might be undefined if input \u2264 10 (Pyright, Ruff)</li> <li>Using print for logging is discouraged (Ruff)</li> </ol> <p>Here's the corrected version:</p> <pre><code>import sys\nfrom logging import getLogger\n\nlogger = getLogger(__name__)\n\ndef calculate_result(input_value: int) -&gt; int:\n    \"\"\"Calculate a result based on the input value.\n\n    Args:\n        input_value: The number to process\n\n    Returns:\n        The calculated result\n    \"\"\"\n    result = 0\n    if input_value &gt; 10:\n        logger.debug(\"Value is greater than 10\")\n        result = input_value * 2\n    return result\n</code></pre>"},{"location":"tools-guide/code-quality/#further-reading","title":"Further Reading","text":"<ul> <li>Detailed Ruff documentation</li> <li>Detailed Pyright documentation</li> <li>Understanding pre-commit hooks</li> </ul>"},{"location":"tools-guide/code-quality/#check-your-understanding","title":"Check Your Understanding","text":"<ol> <li> <p>What tool would you use to automatically format your code?</p> <ul> <li>Ruff</li> </ul> </li> <li> <p>Which tool helps identify type-related errors without running the code?</p> <ul> <li>Pyright</li> </ul> </li> <li> <p>What's the command to check and fix linting issues?</p> <ul> <li><code>poe ruff</code></li> </ul> </li> <li> <p>Which tool checks for security vulnerabilities?</p> <ul> <li>Bandit</li> </ul> </li> <li> <p>What's the recommended frequency for running code quality tools?</p> <ul> <li>Regularly while coding, before committing changes</li> </ul> </li> </ol>"},{"location":"tools-guide/documentation/","title":"Documentation Tools Guide","text":""},{"location":"tools-guide/documentation/#quick-reference","title":"Quick Reference","text":"Tool Primary Use When to Use Complexity MkDocs Documentation site generation Project setup and updates \u2605\u2605\u2606 MkDocstrings API documentation generation Code documentation \u2605\u2605\u2606 Interrogate Docstring coverage checking Pre-commit \u2605\u2606\u2606 MDFormat Markdown formatting Pre-commit \u2605\u2606\u2606 <p>This is a placeholder. Will add simplified explanations and examples of the documentation tools from technologies/documentation/</p>"},{"location":"tools-guide/documentation/#mkdocs","title":"MkDocs","text":""},{"location":"tools-guide/documentation/#what-it-does","title":"What It Does","text":"<p>This is a placeholder. Will add concise explanation with examples</p>"},{"location":"tools-guide/documentation/#basic-usage","title":"Basic Usage","text":"<p>This is a placeholder. Will add basic usage examples</p> <p>More tools will be added here...</p>"},{"location":"tools-guide/documentation/#tool-comparison","title":"Tool Comparison","text":"<p>This is a placeholder. Will add comparison of when to use each tool</p>"},{"location":"tools-guide/documentation/#further-reading","title":"Further Reading","text":"<p>This is a placeholder. Will add links to detailed documentation</p>"},{"location":"tools-guide/project-management/","title":"Project Management Tools Guide","text":""},{"location":"tools-guide/project-management/#quick-reference","title":"Quick Reference","text":"Tool Primary Use When to Use Complexity UV Package management Daily development \u2605\u2606\u2606 Poethepoet Task running Daily development \u2605\u2606\u2606 Pre-commit Code quality hooks Project setup and commits \u2605\u2605\u2606 Commitizen Commit message standardization Every commit \u2605\u2606\u2606 <p>This is a placeholder. Will add simplified explanations and examples of the project management tools from various technology directories</p>"},{"location":"tools-guide/project-management/#uv","title":"UV","text":""},{"location":"tools-guide/project-management/#what-it-does","title":"What It Does","text":"<p>This is a placeholder. Will add concise explanation with examples</p>"},{"location":"tools-guide/project-management/#basic-usage","title":"Basic Usage","text":"<p>This is a placeholder. Will add basic usage examples</p> <p>More tools will be added here...</p>"},{"location":"tools-guide/project-management/#tool-comparison","title":"Tool Comparison","text":"<p>This is a placeholder. Will add comparison of when to use each tool</p>"},{"location":"tools-guide/project-management/#further-reading","title":"Further Reading","text":"<p>This is a placeholder. Will add links to detailed documentation</p>"},{"location":"tools-guide/testing/","title":"Testing Tools Guide","text":""},{"location":"tools-guide/testing/#quick-reference","title":"Quick Reference","text":"Tool Primary Use When to Use Complexity Pytest Testing framework Test development \u2605\u2605\u2606 Pytest-Cov Test coverage Test verification \u2605\u2606\u2606 Pytest-AsyncIO Async testing When using async code \u2605\u2605\u2605 Pytest-XDist Parallel testing Large test suites \u2605\u2605\u2606 <p>This is a placeholder. Will add simplified explanations and examples of the testing tools from technologies/testing/</p>"},{"location":"tools-guide/testing/#pytest","title":"Pytest","text":""},{"location":"tools-guide/testing/#what-it-does","title":"What It Does","text":"<p>This is a placeholder. Will add concise explanation with examples</p>"},{"location":"tools-guide/testing/#basic-usage","title":"Basic Usage","text":"<p>This is a placeholder. Will add basic usage examples</p> <p>More tools will be added here...</p>"},{"location":"tools-guide/testing/#tool-comparison","title":"Tool Comparison","text":"<p>This is a placeholder. Will add comparison of when to use each tool</p>"},{"location":"tools-guide/testing/#further-reading","title":"Further Reading","text":"<p>This is a placeholder. Will add links to detailed documentation</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>The tutorials section provides step-by-step guides for common tasks and workflows. Each tutorial is designed to be practical and hands-on, with clear explanations and examples.</p> <p>Available tutorials:</p> <ul> <li>Setup Your First Project: Learn how to set up a new project using this template.</li> <li>Adding a Feature: Walk through the process of adding a new feature to your project.</li> <li>Testing Your Code: Learn how to test your code effectively using the built-in testing tools.</li> </ul> <p>Choose a tutorial to get started with practical examples.</p>"},{"location":"tutorials/adding-a-feature/","title":"Tutorial: Adding a Feature to Your Project","text":"<p>Est. time to complete: 1 hour</p>"},{"location":"tutorials/adding-a-feature/#overview","title":"Overview","text":"<p>This tutorial guides you through the process of adding a new feature to a project created with this template, following best practices for code quality, testing, and documentation.</p>"},{"location":"tutorials/adding-a-feature/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed the Setup Your First Project tutorial</li> <li>Basic understanding of Python development</li> <li>Familiarity with the project structure</li> </ul>"},{"location":"tutorials/adding-a-feature/#step-1-planning-your-feature","title":"Step 1: Planning Your Feature","text":"<p>This is a placeholder. Will add detailed instructions for planning a feature, including considerations for architecture and design.</p>"},{"location":"tutorials/adding-a-feature/#check-your-work","title":"Check Your Work","text":"<p>This is a placeholder. Will add verification steps for the planning phase.</p>"},{"location":"tutorials/adding-a-feature/#troubleshooting","title":"Troubleshooting","text":"<p>This is a placeholder. Will add common planning issues and solutions.</p>"},{"location":"tutorials/adding-a-feature/#step-2-implementing-the-feature","title":"Step 2: Implementing the Feature","text":"<p>This is a placeholder. Will add detailed instructions for implementing the feature, including code examples and best practices.</p>"},{"location":"tutorials/adding-a-feature/#check-your-work_1","title":"Check Your Work","text":"<p>This is a placeholder. Will add verification steps for the implementation phase.</p>"},{"location":"tutorials/adding-a-feature/#troubleshooting_1","title":"Troubleshooting","text":"<p>This is a placeholder. Will add common implementation issues and solutions.</p>"},{"location":"tutorials/adding-a-feature/#step-3-writing-tests","title":"Step 3: Writing Tests","text":"<p>This is a placeholder. Will add detailed instructions for writing tests for the new feature.</p>"},{"location":"tutorials/adding-a-feature/#check-your-work_2","title":"Check Your Work","text":"<p>This is a placeholder. Will add verification steps for the testing phase.</p>"},{"location":"tutorials/adding-a-feature/#troubleshooting_2","title":"Troubleshooting","text":"<p>This is a placeholder. Will add common testing issues and solutions.</p>"},{"location":"tutorials/adding-a-feature/#step-4-documenting-your-feature","title":"Step 4: Documenting Your Feature","text":"<p>This is a placeholder. Will add detailed instructions for documenting the new feature.</p>"},{"location":"tutorials/adding-a-feature/#check-your-work_3","title":"Check Your Work","text":"<p>This is a placeholder. Will add verification steps for the documentation phase.</p>"},{"location":"tutorials/adding-a-feature/#troubleshooting_3","title":"Troubleshooting","text":"<p>This is a placeholder. Will add common documentation issues and solutions.</p>"},{"location":"tutorials/adding-a-feature/#final-result","title":"Final Result","text":"<p>This is a placeholder. Will add verification steps and what a successfully implemented feature looks like.</p>"},{"location":"tutorials/adding-a-feature/#going-further","title":"Going Further","text":"<p>This is a placeholder. Will add suggestions for extending the feature and learning more advanced techniques.</p> <ul> <li>Try adding additional functionality to your feature</li> <li>Learn about Advanced Testing Techniques</li> <li>Explore CI/CD Integration for your project</li> </ul>"},{"location":"tutorials/setup-your-first-project/","title":"Tutorial: Setting Up Your First Project","text":"<p>Est. time to complete: 20 minutes</p>"},{"location":"tutorials/setup-your-first-project/#overview","title":"Overview","text":"<p>This tutorial guides you through the process of setting up a new Python project using this template. By the end, you'll have a fully configured development environment with best-practice tools for code quality, testing, and documentation.</p>"},{"location":"tutorials/setup-your-first-project/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+ installed on your system</li> <li>Git installed on your system</li> <li>Basic command-line knowledge</li> <li>Either Visual Studio Code or Cursor (recommended) installed</li> </ul>"},{"location":"tutorials/setup-your-first-project/#step-1-install-uv-package-manager","title":"Step 1: Install UV Package Manager","text":"<p>Let's start by installing UV, a blazing-fast Python package manager written in Rust. It's much faster than pip and provides better dependency resolution.</p>"},{"location":"tutorials/setup-your-first-project/#for-macoslinux","title":"For MacOS/Linux:","text":"<pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"tutorials/setup-your-first-project/#for-windows","title":"For Windows:","text":"<pre><code>powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>After installation, verify that UV is properly installed:</p> <pre><code>uv --version\n</code></pre> <p>You should see the UV version number displayed, indicating that UV is ready to use.</p>"},{"location":"tutorials/setup-your-first-project/#step-2-create-a-virtual-environment","title":"Step 2: Create a Virtual Environment","text":"<p>Before getting the project code, let's set up a virtual environment to keep our dependencies isolated:</p> <pre><code># Create a directory for your project\nmkdir my-python-project\ncd my-python-project\n\n# Create a virtual environment\nuv venv\n\n# Activate the virtual environment\n# On macOS/Linux:\nsource .venv/bin/activate\n# On Windows:\n.venv\\Scripts\\activate\n</code></pre> <p>You should now see the virtual environment name in your terminal prompt, showing that it's active.</p>"},{"location":"tutorials/setup-your-first-project/#step-3-get-the-repository","title":"Step 3: Get the Repository","text":"<p>Now that we have our environment ready, let's get the project template:</p> <ol> <li>Go to the Python Starting Project GitHub: https://github.com/dhkts1/Python-Starting-Project</li> <li>Click the green \"Use this template\" button</li> <li>Choose \"Create a new repository\"</li> <li>Fill in your repository details and click \"Create repository\"</li> <li>Clone your new repository into your project directory:     <pre><code>git clone https://github.com/your-username/your-repo-name.git .\n</code></pre></li> </ol> <p>The dot at the end of the clone command ensures that the repository is cloned into your current directory.</p>"},{"location":"tutorials/setup-your-first-project/#step-4-install-dependencies","title":"Step 4: Install Dependencies","text":"<p>With our repository set up and virtual environment active, we can now install all the project dependencies:</p> <pre><code># Install all dependencies (including development tools)\nuv sync\n</code></pre> <p>This command installs:</p> <ul> <li>All production dependencies</li> <li>Development tools (linters, formatters, testing tools)</li> <li>Documentation tools</li> </ul> <p>You'll see a progress bar and eventually a success message when all packages are installed.</p>"},{"location":"tutorials/setup-your-first-project/#step-5-set-up-pre-commit-hooks","title":"Step 5: Set Up Pre-commit Hooks","text":"<p>Next, let's set up pre-commit hooks which will automatically check your code quality before each commit:</p> <pre><code># Install pre-commit hooks\npre-commit install\n</code></pre> <p>These hooks are configured in the <code>.pre-commit-config.yaml</code> file and help maintain code quality by running checks before each commit.</p>"},{"location":"tutorials/setup-your-first-project/#step-6-verify-your-setup","title":"Step 6: Verify Your Setup","text":"<p>Let's make sure everything is working correctly by running the pre-commit checks manually:</p> <pre><code># Run all pre-commit hooks\npoe pre\n</code></pre> <p>You should see a series of checks running, all of which should pass. This confirms that your setup is working correctly and all tools are properly configured.</p>"},{"location":"tutorials/setup-your-first-project/#step-7-open-in-your-ide","title":"Step 7: Open in Your IDE","text":"<p>Now that our project is set up, let's open it in an IDE for easier editing:</p>"},{"location":"tutorials/setup-your-first-project/#for-visual-studio-code","title":"For Visual Studio Code:","text":"<pre><code>code .\n</code></pre>"},{"location":"tutorials/setup-your-first-project/#for-cursor","title":"For Cursor:","text":"<pre><code>cursor .\n</code></pre> <p>When you first open the project, your IDE should recommend installing some extensions. Install these for the best development experience, as they enhance code editing with features like syntax highlighting, code completion, and linting.</p>"},{"location":"tutorials/setup-your-first-project/#step-8-run-the-sample-application","title":"Step 8: Run the Sample Application","text":"<p>The template includes a sample application you can run to verify everything works correctly:</p> <pre><code># Run the main script\npython -m src.main\n</code></pre> <p>You can also use the Run and Debug button in VSCode/Cursor to run the application. There's a pre-configured <code>launch.json</code> file in the <code>.vscode</code> folder that makes this process seamless.</p> <p>You should see some log output, confirming that the application is working correctly.</p>"},{"location":"tutorials/setup-your-first-project/#step-9-make-your-first-change","title":"Step 9: Make Your First Change","text":"<p>Now that everything is running smoothly, let's make our first change to the project:</p> <ol> <li>Open <code>src/main.py</code></li> <li>Modify the log message in the main function</li> <li>Save the file</li> <li>Run the application again to see your changes:     <pre><code>python -m src.main\n</code></pre></li> </ol> <p>You should see your modified log message in the output, confirming that your changes were applied successfully.</p>"},{"location":"tutorials/setup-your-first-project/#step-10-commit-your-changes","title":"Step 10: Commit Your Changes","text":"<p>Finally, let's save our changes to the repository:</p> <pre><code># Stage your changes\ngit add src/main.py\n# You can also use \"git add .\" to stage all changes\n# Or use \"git status\" to see what files were changed\n</code></pre> <p>If there are errors in the output or files were automatically formatted, you'll need to run <code>git add</code> again to stage the updated files.</p> <p>Then, commit your changes:</p> <pre><code># Commit your changes\ngit commit -m \"Update log message in main function\"\n</code></pre> <p>Notice how the pre-commit hooks run automatically before the commit is created. These checks ensure your code meets the project's quality standards.</p>"},{"location":"tutorials/setup-your-first-project/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/setup-your-first-project/#common-issues","title":"Common Issues","text":"<p>Problem: Missing dependencies when running commands Solution: Run <code>uv sync</code> again to ensure all dependencies are installed</p> <p>Problem: Pre-commit hooks failing Solution: Read the error messages carefully. Most issues can be fixed by running <code>poe lint</code> to lint format and fix errors. Problem: IDE not showing proper code intelligence Solution: Make sure you've installed the recommended extensions and configured your IDE to use the project's virtual environment.</p>"},{"location":"tutorials/setup-your-first-project/#next-steps","title":"Next Steps","text":"<p>Congratulations on setting up your Python project! Here are some next steps you might want to take:</p> <ul> <li>Learn about the code quality tools to maintain high code standards</li> <li>Explore the project structure to understand how everything fits together</li> <li>Check out the development workflow for daily development practices</li> <li>Add your own code to the project and start building something amazing</li> </ul>"},{"location":"tutorials/setup-your-first-project/#check-your-understanding","title":"Check Your Understanding","text":"<ol> <li> <p>What command installs all dependencies for the project?</p> <ul> <li><code>uv sync</code></li> </ul> </li> <li> <p>What command sets up pre-commit hooks?</p> <ul> <li><code>pre-commit install</code></li> </ul> </li> <li> <p>What command runs all pre-commit checks manually?</p> <ul> <li><code>poe pre</code></li> </ul> </li> <li> <p>What happens when you run <code>git commit</code> after setting up pre-commit hooks?</p> <ul> <li>Pre-commit hooks run automatically to check code quality before creating the commit</li> </ul> </li> </ol>"},{"location":"tutorials/testing-your-code/","title":"Tutorial: Testing Your Code","text":"<p>Est. time to complete: 1 hour</p>"},{"location":"tutorials/testing-your-code/#overview","title":"Overview","text":"<p>This tutorial guides you through the process of writing and running tests for your Python project using the testing tools configured in this template. You'll learn how to write effective tests, check test coverage, and integrate testing into your development workflow.</p>"},{"location":"tutorials/testing-your-code/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed the Setup Your First Project tutorial</li> <li>Basic understanding of Python development</li> <li>Familiarity with testing concepts</li> </ul>"},{"location":"tutorials/testing-your-code/#step-1-understanding-the-testing-framework","title":"Step 1: Understanding the Testing Framework","text":"<p>This is a placeholder. Will add detailed explanation of the testing framework (pytest) and how it's configured in this project.</p>"},{"location":"tutorials/testing-your-code/#check-your-work","title":"Check Your Work","text":"<p>This is a placeholder. Will add verification steps for understanding the testing framework.</p>"},{"location":"tutorials/testing-your-code/#troubleshooting","title":"Troubleshooting","text":"<p>This is a placeholder. Will add common understanding issues and solutions.</p>"},{"location":"tutorials/testing-your-code/#step-2-writing-your-first-test","title":"Step 2: Writing Your First Test","text":"<p>This is a placeholder. Will add detailed instructions for writing a simple test for an example function.</p>"},{"location":"tutorials/testing-your-code/#check-your-work_1","title":"Check Your Work","text":"<p>This is a placeholder. Will add verification steps for the first test.</p>"},{"location":"tutorials/testing-your-code/#troubleshooting_1","title":"Troubleshooting","text":"<p>This is a placeholder. Will add common test writing issues and solutions.</p>"},{"location":"tutorials/testing-your-code/#step-3-running-tests-and-understanding-results","title":"Step 3: Running Tests and Understanding Results","text":"<p>This is a placeholder. Will add detailed instructions for running tests and interpreting the results.</p>"},{"location":"tutorials/testing-your-code/#check-your-work_2","title":"Check Your Work","text":"<p>This is a placeholder. Will add verification steps for running tests.</p>"},{"location":"tutorials/testing-your-code/#troubleshooting_2","title":"Troubleshooting","text":"<p>This is a placeholder. Will add common test running issues and solutions.</p>"},{"location":"tutorials/testing-your-code/#step-4-measuring-and-improving-test-coverage","title":"Step 4: Measuring and Improving Test Coverage","text":"<p>This is a placeholder. Will add detailed instructions for checking test coverage and improving it.</p>"},{"location":"tutorials/testing-your-code/#check-your-work_3","title":"Check Your Work","text":"<p>This is a placeholder. Will add verification steps for test coverage.</p>"},{"location":"tutorials/testing-your-code/#troubleshooting_3","title":"Troubleshooting","text":"<p>This is a placeholder. Will add common coverage issues and solutions.</p>"},{"location":"tutorials/testing-your-code/#final-result","title":"Final Result","text":"<p>This is a placeholder. Will add verification steps and what a successful testing setup looks like.</p>"},{"location":"tutorials/testing-your-code/#going-further","title":"Going Further","text":"<p>This is a placeholder. Will add suggestions for improving testing skills and exploring advanced testing techniques.</p> <ul> <li>Learn about Test-Driven Development (TDD)</li> <li>Explore advanced pytest features</li> <li>Set up continuous integration for automated testing</li> </ul>"}]}